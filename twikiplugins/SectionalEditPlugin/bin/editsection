#!/usr/bin/perl -wT
#
# TWiki Collaboration Platform, http://TWiki.org/
#
# Copyright (C) 1999-2004 Peter Thoeny, peter@thoeny.com
#
# Based on parts of Ward Cunninghams original Wiki and JosWiki.
# Copyright (C) 1998 Markus Peter - SPiN GmbH (warpi@spin.de)
# Some changes by Dave Harris (drh@bhresearch.co.uk) incorporated
#
# For licensing info read license.txt file in the TWiki root.
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details, published at 
# http://www.gnu.org/copyleft/gpl.html

BEGIN {
    # Set default current working directory
    if( $ENV{"SCRIPT_FILENAME"} && $ENV{"SCRIPT_FILENAME"} =~ /^(.+)\/[^\/]+$/ ) {
        chdir $1;
    }
    # Set library paths in @INC at compile time
    unshift @INC, '.';
    require 'setlib.cfg';
}

use strict;
use CGI::Carp qw(fatalsToBrowser);
use CGI;
use TWiki;
use TWiki::Contrib::EditContrib;


if( $TWiki::Plugins::VERSION >= 1.1 ) {
    # Dakar interface
    TWiki::UI::run( \&starthere );
} else {
    # Cairo interface
    &starthere();
}

sub starthere {

    my $query;

    if( $TWiki::Plugins::VERSION >= 1.1 ) {
        # Dakar interface
        my $session = shift;

        die unless defined($session);

        $query = $session->{cgiQuery};

        $TWiki::Plugins::SESSION = $session;

    } else {
        # Cairo interface
        $query = new CGI;
    }

    &main( $query );
}

sub main
{
    my $query = shift;

    my (undef, $topic, $webName, $text, $tmpl ) = &TWiki::Contrib::EditContrib::edit( $query );

    my $theSec = int($query->param('sec')) || 0;
    my $theEditUrl = &TWiki::Func::getScriptUrl( $webName, $topic, "editsection" );
    my $theEditUrlParams = "&sec=$theSec#SECEDITBOX";
    $tmpl =~ s/%EDIT%/$theEditUrl/go;
    $tmpl =~ s/%EDITPARAMS%/$theEditUrlParams/go;
    my $sectxt = "";
    my $pretxt = "";
    my $postxt = "";
    my $pos = 0;
    my $editsections = 0;

    # Get rid of CRs (we only want to deal with LFs)
    $text =~ s/\r//g;

    if ( $TWiki::Plugins::SectionalEditPlugin::alwayssection || ($editsections = $text =~ m/<editsections\s*\/>/i) ) {
	my $lastmark = "";
	my $lastpos = 0;
        while ( $text =~ m/^---\+{1,$TWiki::Plugins::SectionalEditPlugin::sectiondepth}[^+]/mg ) {
	  if ( $pos == $theSec ) {
	    $postxt = $&.$';
	    $sectxt = $lastmark.substr($text,$lastpos,(pos $text) - length($&) - $lastpos);
	    $pos++;
	    last;
	  } elsif ( $pos == ($theSec - 1) ) {
	    $lastmark = $&;
	    $lastpos = pos $text;
	    $pretxt = $`;
	  }
	  $pos++;
	}
	if ( $pos == $theSec ) {
	  # The target section was the last section
	  #$postxt = "";
	  $sectxt = $lastmark.substr($text,$lastpos);
	}
	if ( $editsections ) {
	  # move the <editsections/> command into $pretxt
	  if ( $sectxt =~ s|<editsections\s*\/>||i ) {
	    $pretxt = "<editsections\/>\n$pretxt";
	  }
	}
        # Move the end of line to the beginning of postxt
        # So that sections aren't accidentally collapsed
	# (by user deleting the trailing newline in section)
        if ($sectxt =~ s/[\n\r]$//s) {
	  $postxt = "\n" . $postxt;
        }
    }
    elsif ( $text =~ m/<sectionbreak\s*\/?>/i ) {    
	my @sections = split(/<sectionbreak\s*\/?>/i, $text);
	# The following does not honor the literal spelling of the <sectionbreak/> tag
	foreach my $s (@sections) {
	    if ($pos < $theSec) {
		unless ($pretxt eq "") {
		    $pretxt .= "<sectionbreak/>";
		}
		$pretxt .= $s;
	    } elsif ($pos > $theSec) {
		$postxt .= "<sectionbreak/>";
		$postxt .= $s;
	    } else {
		$sectxt = $s;
	    }
	    $pos++;
	}
	unless ($pretxt eq "") {
	    $pretxt .= "<sectionbreak/>\n";
	}
    }
    elsif ( $text =~ m/<\/?sectionedit.*?>/i ) { 
	my @sections = split(/(<\/?sectionedit.*?>)/i, $text); 
	foreach my $s (@sections) {
	    if ($pos < $theSec) {
		if ( $s =~ m/<(\/?)sectionedit(.*?)>/ ) { $pretxt .= "<$1sectionedit$2>"; next; }
		$pretxt .= $s;
	    } elsif ($pos > $theSec) {
		if ( $s =~ m/<(\/?)sectionedit(.*?)>/ ) { $postxt .= "<$1sectionedit$2>"; next; }
		$postxt .= $s;
	    } else {
		if ( $s =~ m/<(\/?)sectionedit(.*?)>/ ) { $pretxt .= "<$1sectionedit$2>"; next; }
		$sectxt = $s;
	    }
	    $pos++;
	}
    }

    TWiki::Contrib::EditContrib::finalize_edit ($query, $topic, $webName, $pretxt, $sectxt, $postxt, $pretxt, $postxt, $tmpl);
    
}
