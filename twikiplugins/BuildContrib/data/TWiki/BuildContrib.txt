---+!! TWiki Developer Environment

%TOC%

---+ Summary of Contents

---++ Build & Install Modules
The Build.pm module can be used to create a really simple build process for your plugin, addon or contrib module, including build, test, install, release and upload targets. The advantage of this module is that it defines a standard build procedure for plugins, so you won't get file names wrong or get the list of files in the plugin topic wrong either.

The module assumes that you are *not* developing your plugin in a live TWiki installation (which is usually a really bad idea), but are instead doing the sensible thing and developing in a separate directory tree, usually - but not always - a CVS checkout area.

The easiest way to start using the module is to copy the =build.pl= file from =lib/TWiki/Contrib/BuildContrib/build.pl= into your own plugin or contrib, in the corresponding place i.e. copy it to =lib/TWiki/Plugins/MyPlugin/build.pl= or =lib/TWiki/Contrib/MyContrib/build.pl=. Then edit the file, and change as appropriate (it chouls be fairly obvious what you have to do). Then type
   * =perl build.pl manifest=
and copy and paste the output file list into a file called MANIFEST in the root of your plugin checkout area (ie. alongside lib, bin. templates etc.)

__Notes__
   * This is a _build_ module for use by developers, not an _install_ module for end users. When a release is built, an installer/uninstaller script is automatically generated that is packaged with the release. This simple script is the only part of the build system visible to end users
   * This topic and all the embedded POD documentation are generated using this build module.
   * The build environment does _not_ assume the use of CVS, though it is highly recommended.
   * The test target assumes you are using Test::Unit. =Build.pm= has only been tested on Linux, but should work with cygwin OK.

---++ Test Fixtures
The are a number of test fixtures in the repository that can be used for testing plugins with =Test::Unit=. The fixtures replace the =TWiki::Func=, =TWiki::Store= and TWiki modules, allowing a stand-alone unit test suite to be built for the plugin. The easiest way to use the fixtures is to copy the tests from an existing plugin that uses them - for example, CommentPlugin, ActionTrackerPlugin, WebDAVPlugin or FormQueryPlugin - and modify the tests appropriately for your plugin.

The fixtures do not replace _all_ of the TWiki core functionality, just those pieces used by the plugins. If you find a piece is missing, and you need it, please feel free to extend the fixtures on condition that you check your improvements back in.

---++ <nop>TWikiCLI - command line interface to TWiki

Note that the <nop>TWikiCLI (BuildContrib/contrib/bin/twikicli) feature is strictly experimental.
Its interfaces are likely to change and it may be dropped completely.

Purpose:
	1 To replace all twiki command line scripts with a single interface script environment

Its purpose is to seek out classes in the path that can do its bidding. Only one class is provided
at present: TWikiCLI::Extension, so only the "twikicli extension" currently does anything.

Usage:
	1 Add BuildContrib/contrib/bin to your PATH. This contains one uber-command:
		* twikicli

You can use "twikicli extension install TWiki:Plugins.TWikiExtension "
	* e.g.:
		* twikicli extension install DistributionContrib
		* twikicli extension install TWikiReleaseTrackerPlugin

Prerequisite environment, assuming 
	1 you have your development/test TWiki installs at (URI) =athens.twiki.com=, =beijing.twiki.com=, =beta.twiki.com= and =bleeding.twiki.com=
	1 you have your development CVS checkout at =$HOME/twikiplugindev/twikiplugins=
	1 You are using your bleeding edge as the source of contrib libraries for plugin testing
<verbatim>
export TWIKI_HOMES="athens.twiki.com/twiki beijing.twiki.com/twiki beta.twiki.com/twiki bleeding.twiki.com"
export TWIKI_LIBSDIR=$HOME/twikiplugindev/twikiplugins/
export TWIKI_RUNTIMELIB=/usr/local/twiki/bleeding/twiki/lib
export TWIKI_LIBS=`echo $TWIKI_LIBSDIR*/lib/ | tr " " ":"`:$TWIKI_RUNTIMELIB
</verbatim>
	
Development notes:
	1 This is a very rough implementation - I built one myself as I could not find one on CPAN. If
	we find one we will trash the implementation. Hopefully we will be able to keep the functionality though
	
---++ Support scripts
=conformance_analyser.pl= is a perl script that analyses the conformance of plugins to the API and packaging standards. It is driven from the zips downloadable from twiki.org.

---+ Detailed Documentation
%$POD%

---++ Settings
	* Name of the perl package
		* Set STUB = %$STUB%

---++ Installation Instructions

	* Download the ZIP file from the Plugin web (see below)
	* Unzip ==%TOPIC%.zip== in your twiki installation directory. Content:
	| *File:* | *Description:* |
%$MANIFEST%
	* Optionally, run ==%TOPIC%_installer== to automatically check and install other TWiki modules that this module depends on. You can also do this step manually.
	* Alternatively, manually make sure the dependencies listed in the table below are resolved.
	%$DEPENDENCIES%

---++ Contrib Info

|  Authors: | TWiki:Main.CrawfordCurrie, TWiki:Main.MartinCleaver |
|  Copyright &copy;: | 2004, Crawford Currie http://www.c-dot.co.uk |
|  License: | GPL |
|  Dependencies: | %$DEPENDENCIES% |
|  30/08/04 | Crawford Currie added installer scripts |
|  26/08/04 | Martin Cleaver added twikicli |
|  14/08/04 | Crawford Currie made the initial implementation, separated out from the old SharedCode module |
|  Home: | http://TWiki.org/cgi-bin/view/Plugins/%TOPIC% |
|  Feedback: | http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%Dev |

__Related Topics:__ %TWIKIWEB%.TWikiPreferences

-- TWiki:Main/CrawfordCurrie - %$DATE%
-- TWiki:Main/MartinCleaver - %$DATE%
