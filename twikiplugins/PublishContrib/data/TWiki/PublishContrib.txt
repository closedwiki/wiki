---+!! <nop>%TOPIC%
Generates a static view of a web, as HTML files on disc, or as a PDF, or as a zip or tgz archive file.

<!--

   PLEASE DO NOT EDIT THIS TOPIC

   It is automatically generated from the subversion repository, and any changes
   you make will simply be overwritten the next time a release is generated.

   Instead, you could check your fix in, raise a bug in the Bugs web, or mail thge author.
-->

_Previously known as !GenHTMLAddOn, and then !PublishAddOn, this is the *original* publishing extension for TWiki_.

*WARNING: TWiki-4 only. If you want to use this extension with an earlier version of TWiki, please see [[http://twiki.org/cgi-bin/view/Plugins/%TOPIC%?rev=1.2][here]]*

%TOC%

When TWiki generates a view, it does so dynamically i.e. there's a CGI script that runs, processes some files, and generates HTML that is displayed by the browser. There are circumstances in which this may not be desirable or even possible. For example:
	1 TWiki is used to create documentation which has to be bundled into a product release,
	1 Published versions of TWiki pages must be read-only,
	1 The TWiki server is inaccessible to the audience (e.g. on the other side of a corporate firewall).

!PublishContrib provides support for the generation of stand-alone HTML from a TWiki web. It will generate fully rendered versions of a set of TWiki pages together with any attached files.

---++ Features
	* All standard TWiki tags are interpreted
	* Plugins are called
	* Unresolved links to non-existant topics are silently ignored
	* Topic links internal to the TWiki are translated to relative links
	* Powerful support for choosing what content gets published
	* Any links to the 'pub' areas of topics in the web are automatically resolved and the referenced files copied.
	* Any links to images outside the TWiki are resolved, and the image is stored in the output (requires LWP).
	* Output in HTML or PDF. HTML can be compressed.
	* Full support for hierarchical webs
	* Multiple instances (e.g. dev, test, prod) can be specified
	* Templates (such as viewprint) can also be generated, and the links are fixed up appropritately
	* able to publish html and referenced files directly to a remote server via ftp (using the ftp publish format)
	   * generates a sitemal.xml, default.htm, index.html and google site verification file
	   * uses extra parameters (ftppublish, destinationftpserver, destinationftppath, destinationftpusername, destinationftppassword, googlefile, defaultpage)
	   * requires Net::FTP to ftp, only if ftppublish=ftp

---++ Usage

The easiest way to publish a web is from this topic, by filling in the following form.

The output is generated in a directory designated during installation. The progress messages printed during documentation generation tell you exactly where the output is.

You can also create a permanent topic in a web to help with the publishing process. See [[#PublishTopic][below]].

<style type="text/css" media="all">
.twikiPageForm table th,
.twikiPageForm table td {
vertical-align:top;
border-bottom:1px solid #ddd;
padding:.5em;
}
</style>

<div class="twikiPageForm">
<form method="POST" name="publish" action="%SCRIPTURL{publish}%/%URLPARAM{"web" default=""}%">
<table class="twikiTable" cellpadding="0" cellspacing="0">
<tr>
  <th>Description</th><th>Value</th><th>Parameter&nbsp;Name</th>
</tr>
<tr>
  <td> Web to publish </td>
  <td>
   <select name="web" class="twikiSelect">%WEBLIST{"<option $marker value='$name'>$name</option>" selection="%URLPARAM{"web" default="%WEB%"}%"}%</select>
  </td>
  <td>
   =web=
  </td>
</tr>
<tr>
  <td> 
    Comma-separated list of [[#WildcardPattern][wildcard patterns]] that match
    the names of topics to *include* 
  </td>
  <td> 
    <input type="text" name="inclusions" class="twikiInputField" value="%URLPARAM{"inclusions" default="*"}%" size="50"/>
  </td>
  <td>
   =inclusions=
  </td>
</tr>
<tr>
  <td> 
    Comma-separated list of [[#WildcardPattern][wildcard patterns]] that match
    the names of topics to *exclude* 
  </td>
  <td> 
    <input type="text" name="exclusions" class="twikiInputField" value="%URLPARAM{"exclusions" default=""}%" size="50"/>
  </td>
  <td>
   =exclusions=
  </td>
</tr>
<tr>
  <td> 
    A [[#RegularExpression][regular expression]] that will cause a topic to be
    *excluded* if the RE matches the topic content 
  </td>
  <td> 
    <input type="text" name="filter" class="twikiInputField" value="%URLPARAM{"filter" default=""}%" size="50" />
  </td>
  <td>
   =filter=
  </td>
</tr>
<tr>
  <td>Select skin for published HTML :</td>
  <td>
    <input type="text" name="skin" class="twikiInputField" size="20" value="text" /><br />
    You are recommended to pick =text=, or =plain=, or a =print= skin.
    Your installation may also offer a special =export= or =publish= skin.
  </td>
  <td>
   =skin=
  </td>
</tr>
<tr>
  <td>Output format :</td>
  <td>
   <select name="format" class="twikiSelect">
    <option value="">file</option>
    <option value="zip">zip</option>
    <option value="tgz">tgz</option>
    <option value="pdf">pdf</option>
   </select><br />
    *WARNING* The rendered data can get pretty big, and the process itself puts
    a heavy load on the server when using compression on large webs.
  </td>
  <td>
   =format=
  </td>
</tr>
<tr>
  <td>Extra options :</td>
  <td>
   Some output generators support extra options (e.g. PDF; you can add =htmldoc= command-line parameters here e.g =--linkstyle underline=)<br />
   <textarea rows="5" cols="80"  class="twikiInputField">%URLPARAM{"genopt" default=""}%</textarea>
  </td>
  <td>
   =genopt=
  </td>
</td>
</tr>
<tr>
<td colspan="3" class="twikiLast">
<input type="submit" class="twikiSubmit" value="Publish" />
</td>
</tr>
</table>
</form>
</div>
#WildcardPattern
---+++ Wildcard Patterns
Wildcard patterns are well known to people who are used to command lines on computers, but may be unfamiliar to the Windows generation. A wildcard is a special string that you can put into a filename so that it matches a whole range of files:
| *String* | *What  it does* | *Example* | *What the example matches* |
| * | Matches any string, including an empty string. | =*Cheese*= | Every topic with "Cheese" somewhere in the name (but _not_ "cheese") |
| ? | Matches any single character. | Example1? | Example10 and Example 1X but _not_ example1 |
| [...] | Matches any one of the enclosed characters.  A pair of characters separated by a hyphen denotes a range  expression; any  character that sorts between those two characters, inclusive, using the current locale's collating sequence and character set, is matched.  If the first character following the [ is a ^ then any character not enclosed is matched. A - may be matched by including it as the first or  last  character  in  the set.  A ] may be matched by including it as the first character in the set.<br /> Within  [  and ], character classes can be specified using the syntax [:class:], where class is one of the following classes defined in the POSIX.2 standard: =alnum=, =alpha=, =ascii=, =blank=, =cntrl=, =digit=, =graph=, =lower=, =print=, =punct=, =space=, =upper=, =word=, =xdigit=. A character class matches any character belonging to that class.  The =word= character class matches letters, digits, and the character _. | B[aeiou]g | Bag, Bog, Big, Beg, Bug |

#RegularExpression
---+++ Regular Expressions
A perl regular expression. You can use a simple string here, which will be matched exactly, or you can read up on perl regular expressions on the web. 

---+++ Using a Publish Topic
You can create a publish topic in a web that contains all the details needed to publish that web. This is just a topic with a series of standard TWiki variable settings in it. You can use the PublishWeb topic in this web as a template for your own topics.

Alternatively you can just take a copy of the form in this topic, paste it into your own topic, and change the defaults.

---+++ Publishing from the command line
TWiki-4 allows you to call any TWiki script from the command line, and the =publish= script is no exception. Just =cd= to the =bin= directory, and
=perl publish=. Parameters are passed as name=value pairs, for example:
<verbatim>
perl publish web=Book exclusions='Web*' format=file
perl publish web=Book inclusions=WebBook format=pdf genopt='--book --duplex --toclevels=5'
</verbatim>
The available parameter names are shown in the example above, in the 'Name' column.

---+++ Controlling which parts of a topic get published
You can control what gets published from a topic using =%<nop>STARTPUBLISH%= and =%<nop>STOPPUBLISH%= control tags:
   * If =%<nop>STARTPUBLISH%= is the first control tag seen in the file, everything before it will be ignored.
   * Everything between =%<nop>STOPPUBLISH%= and the next =%<nop>STARTPUBLISH%= (or the end of the topic) will be ignored.
   * =%<nop>STARTPUBLISH%= and =%<nop>STOPPUBLISH%= will be visible in the viewed topic, so you can easily see what will be published from the topic.
Note: the old &lt;nopublish> tag is deprecated and should be replaced in topics

Another good trick is to set up a special "publishing" web. Create topics in the web that %INCLUDE the topics from *other* webs that you want to publish. You can use [[VarSTARTSECTION][STARTSECTION]] and [[VarENDSECTION][ENDSECTION]] to highlight what you want published. This way the "publishing" web gives you a view of exactly what will be in the published output, without the need for special publishing tags.

---++ Settings
   * Name of the perl package
      * Set STUB = %$STUB%
   * Short description
      * Set SHORTDESCRIPTION = Generate static HTML for a TWiki Web

---+++ Known problems
	* Doesn't handle revision info tags in templates
	* Plugin tags that create complex HTML (such as TWiki:Plugins/TWikiDrawPlugin =DRAWING= tags) are not handled correctly.
	* Links to excluded topics still get generated as links

---+++ Installation Instructions
---++++ Dependencies

Note: If you want to generate PDF files, you will need an installation of =htmldoc=. =htmldoc= is available from http://www.easysw.com/htmldoc/ for free, but you are *strongly* recommended to buy the commercial version. Your support for OSS projects helps make OSS possible.

   * Download and unpack the archive in your twiki installation directory. Contents:
   | *File:* | *Description:* |
%$MANIFEST%
   * =perl= ==%TOPIC%_installer.pl== =install= to automatically check and install other TWiki modules that this module depends on, and configure the plugin. This script also includes an =uninstall= option should you ever wish to remove the plugin from your installation, and an =upgrade= option that will automatically download and install the latest version of the add-on.
   * If the install script fails for any reason, you may need to define the configuration yourself. Edit =LocalSite.cfg= and add the following lines:
<verbatim>
$TWiki::cfg{PublishContrib}{Dir} = "dir_path";
$TWiki::cfg{PublishContrib}{URL} = "url_path";
</verbatim>
Where =dir_path= is the file system path to your publish directory on the server, and =url_path= is the URL of the same directory.

---++++ Additional install steps
---+++++ =PDF= output
   1 install htmldoc from http://www.easysw.com/htmldoc/
   1 Add the following line to =LocalSite.cfg=
<verbatim>
$TWiki::cfg{PublishContrib}{PDFCmd} = 'htmldoc --webpage --links --linkstyle plain --outfile %FILE|F% %EXTRAS|U% %FILES|F%';
</verbatim>
Note that =htmldoc= can also be used to generate !PostScript by using the =-t= option in the =Generator Options= field above. See the =htmldoc= man pages for details.

---+++++ =.tgz= (tar) output
   1 Install Archive::Tar and everything it depends on
---+++++ =.zip= output
   1 Install Archive::Zip and everything it depends on

---+++ Info
This add-on started as the TWiki:Plugins/GenHTMLAddon, written by TWiki:Main/CrawfordCurrie at Motorola. It was then rewritten by TWiki:Main/EricScouten, and then fixed and enhanced by TWiki:Main/CrawfordCurrie (http://c-dot.co.uk)

|  Authors: | TWiki:Main/CrawfordCurrie, TWiki:Main/EricScouten |
|  Dependencies: | %$DEPENDENCIES% |
|  Version: | %$VERSION% |
|  Change History: | |
|  10412 | Correction to the correction for anchors. |
|  10345 | Correction to support anchors in URLs properly |
|  10242 | Martin Cleaver - changes to allow generation of viewprint and viewxxx when specified by TEMPLATE; multiple INSTANCE (dev/test/prod); (Bugs:Item2269) |
|  10063 | Bugfix Bugs:Item2216 |
|  10006 | Crawford Currie - fixed problem where it was failing to remove &lt;base> tags completely (Bugs:Item2200) |
|  9986 | Crawford Currie - added doc on usage from command line, corrected sense of topicsearch filter (Bugs:Item2120, Bugs:Item2121), renamed parameters (old ones are still valid), corrected handling of empty web refs (Bugs:Item2128), deprecated nopublish html-style tag in favour of !PublishWebPlugin-compatible style (though with richer semantics) (Bugs:Item2196) |
|  9823 | Crawford Currie - added support for hierarchical webs, and inclusion of external images. |
|  9773 | Crawford Currie - added tgz and pdf support |
|  9725 | Michael Daum - fixed rewriting urls; \
                 fixed nested resources issue; \
		 creating a new prefs object for each topic |
|  9713 | Corrected form action so it uses up the right web preferences |
|  9695 | Michael Daum - recursively archive resources imported by css files;\
      fixed several html errors in the !PublishContrib and !PublishWeb topics;\
      removed hardcoded reference to print.pattern |
|  8959 | TWiki-4 version. Also supports publishing to a file area, making TWiki easier to use as a CMS (see also TWiki:Plugins/PublishWebPlugin, which does almost the same thing :-( ) |
|  6276 | <a rel='nofollow' href='http://develop.twiki.org/~develop/cgi-bin/view/Bugs/Item196'>Item196</a>  bugfix for HTTP_HOST, as described in the Dev topic for the contrib |
|  5566 | Changed interface to support wildcards, and lightened the plugin by replacing a lot of files with simpler ways of doing things. |
|  5499 | Added Compress::Zlib dependency, as requested by Brad Taylor |
|  27 Apr 2005 | 1.301 Crawford Currie - fixed minor issues highlighted by Bruce Dillahunty and Scott Claridge |
|  11 Apr 2005 | 1.3 Crawford Currie - reworked the interface and code to work better |
|  13 October 2004 | 1.200 Crawford Currie - Cairo compatible |
|  7 Jan 2003 | 1.1 Initial version |
|  Home: | TWiki:Plugins/%TOPIC% |
|  Feedback: | TWiki:Plugins/%TOPIC%Dev |
|  Appraisal: | http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%Appraisal |

__Related Topics:__ %TWIKIWEB%.TWikiPreferences, %TWIKIWEB%.TWikiPlugins

---++++ Copyright
This code is a development of the Architectures and System Platforms group of Motorola Inc. and is protected by the following copyrights:
	* Copyright &copy; 2001 Motorola. All Rights Reserved.
	* Copyright &copy; 2002-2003, Eric Scouten.
	* Copyright &copy; 2004-2006 Crawford Currie http://c-dot.co.uk
	* Copyright &copy; 2006 Martin Cleaver http://www.cleaver.org

The 2005 functionality improvements were sponsored by [[http://www.windriver.com][Wind River Systems]]

The =pdf= and =tgz= output formats were made possible by [[http://www.sabiolabs.com][ =Sabio Labs= ]]

---++++ License
As required for the publication of all extensions to TWiki, the software is published under the terms of the GNU General Public License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details, published at 
http://www.gnu.org/copyleft/gpl.html
