---+!! Power Edit Plugin

The PowerEditPlugin is a plug-in extension to TWiki that supports a Java 1.1 applet text editor. This applet works on most Java-enabled browsers (we haven't tested them <u>all</u>!).

%TOC%

---+ Features
The applet provides the same editing capabilities as a standard browser text area, and adds some common editor functionality:
	* Cut, Copy, Paste - the cut buffer is a static variable in the applet as there is no access to the system cut buffer from an applet. The cut buffer persists over different invocations of <nop>PowerEditPlugin, however, and you can always use the cut and paste functions in the browser menus to cut and paste outside the window.
	* Undo - undoes up to 100 commands per edit session.
	* Do again - repeats the last command.
	* Find, Replace - optionally use Emacs style regular expressions as provided by the gnu.regexp library. Replace is currently not smart enough to use field replacement, however.
	* Can be invoked in a separate frame.
	* Programmable buttons.

The applet also supports a browser preview window that displays your edited text in a "What You See Is Almost What You Get" mode.

---+ Usage information

---++ Configuring the Buttons and Hot keys

Buttons and hotkeys are all created by reading a user-defined URL which is set by the %<nop>POWEREDIT_CONTROLS% variable (see TWiki.TWikiVariables, "Creating Custom Variables"). If the variable is not set, the URL %<nop>PUBURL%/TWiki/PowerEditControls.txt is read instead. This allows administrators to set default buttons and keys for the whole installation, for each web, and users can to set up their own controls for the editor by defining this variable in their personal topics.

For example,
<pre>
      * <nop>Set POWEREDIT_CONTROLS = %<nop>PUBURL%/Main/AlanTuring/Controls.txt
</pre>
The control file contains a set of button panel and macro definitions in XML. For example:
<pre>
&lt;macros>
   &lt;map name="space" action=" " tip="insert a space"/>
&lt;/macros>
&lt;top>
   &lt;map name="Tele type" action="/cut/=/paste/=" tip="TT text" />
   &lt;map name="http://my.site.com/space.gif" action="/space/" tip="insert link"/>
   &lt;map name="COPY" action="/copy/" tip="Copy selection"/>
&lt;/top>
&lt;/keys>
   <map name="^X" action="/cut/"/>
&lt;/keys>
</pre>
In this example:
   * The first button in the top panel will be labelled "Tele type" and will perform the sequence /cut/=/paste/= - which will cut the currently selected text, enter an '=' sign, paste the text and enter another '=' sign. The tooltip "TT text" will be displayed when the mouse is moved over the button.
   * The second button will use the GIF file at the URL in its name to create an image button, and when invoked will execute the =space= macro, which in turn is defined to insert a ' ' character.
      * Images for the editor basic commands are all statically bound (see Command below) and the following additional images are also statically bound: ITALIC TT BOLD UL OL
   * The third button will use the statically bound COPY image (an image that doesn't have to be downloaded) and invoke the /copy/ editor command.
   * The key "Ctrl+X" will be defined to perform the /cut/ command.
	* The four button panels are named "top", "bottom", "left" and "right"
	* There can be as many "macros" blocks as you like
	* In button blocks, the name is used as the label on the button
	* Control keys are denoted by a leading ^ character and must be in upper case e.g. ^A *not* ^a. Note that some browsers may not support key definitions.
	* The command string is a mixture of basic editor commands (see below) and text to be inserted.
	* The usual HTML entities are available in names and macro definitions, for example <code>action="&amp;quot;&amp;quot;"</code>.
	* Comments can be inserted into the file using standard SGML comment constructs i.e. &lt;!-- _comment_ --&gt;.
	* For some unexplained reason, probably due to synchronous access, it isn't possible to use the <nop>PowerEditPlugin on the PowerEditControls file.

Also supported is the =&lt;load&gt;= tag, which when given a url will include that url in-line in the controls definition.

The default control definitions for this installation may be viewed <a href="%SCRIPTURLPATH%/view%SCRIPTSUFFIX%/%TWIKIWEB%/PowerEditControls?raw=on">here</a>.

---++ Commands
The following commands are basic to the editor and can be used in button, key and macro definitions:
| *Name* | *Image name* | *Description* |
| /copy/ | COPY | Copy the currently selected text to the internal cut buffer |
| /cut/ | CUT | Cut the currently selected text to the internal cut buffer |
| /find/ | FIND | Invoke the find dialog |
| /paste/ | PASTE | Paste the internal cut buffer. Will erase the current selection. |
| /undo/ | UNDO | Undo the last edit |
| /redo/ | REDO | Repeats the last command executed (does *not* repeat typing) |
| /refind/ | REFIND | Repeat the last find |
| /replace/ | REPLACE | Invoke the replace dialog |
| /rereplace/ | REREPLACE | Repeat the last replacement |

---++ Controls file formal definition
A controls file consists of a list of the following elements:
[[#LoadElement][LOAD]] 
[[#MacrosElement][MACROS]] 
[[#KeysElement][KEYS]] 
[[#TopElement][TOP]] 
[[#BottomElement][BOTTOM]] 
[[#LeftElement][LEFT]] 
[[#RightElement][RIGHT]]

#KeysElement
---+++ *KEYS* element
<table>
<tr><td>Syntax</td>		<td>&lt;KEYS&gt;..&lt;/KEYS&gt;</td></tr>
<tr><td>Attributes</td>		<td>None</td></tr>
<tr><td>Contents</td>		<td>[[#MapElement][MAP]] elements</td></tr>
<tr><td>Contained in</td>	<td>File</td></tr>
</table>

The *KEYS* element defines a set of [[#MapElement][MAP]] elements that define key mappings for hot keys in the editor. In this context the 'name' attribute of a contained [[#MapElement][MAP]] element is interpreted as the key string for a single key stroke. Control keys are denoted by a leading ^ character and must be in upper case e.g. ^A *not* ^a. Note that some browsers may not support key definitions.

#MacrosElement
---+++ *MACROS* element
<table>
<tr><td>Syntax</td>		<td>&lt;MACROS&gt;..&lt;/MACROS&gt;</td></tr>
<tr><td>Attributes</td>		<td>None</td></tr>
<tr><td>Contents</td>		<td>[[#MapElement][MAP]] elements</td></tr>
<tr><td>Contained in</td>	<td>File</td></tr>
</table>

The *MACROS* element defines a set of [[#MapElement][MAP]] elements that define macro mappings for other maps in the control file. A macro may be referred to by enclosing the name of the macro in forward-slashes in the action attribute of another *MAP*.

#TopElement
---+++ *TOP* element
<table>
<tr><td>Syntax</td>		<td>&lt;TOP&gt;..&lt;/TOP&gt;</td></tr>
<tr><td>Attributes</td>		<td>None</td></tr>
<tr><td>Contents</td>		<td>[[#MapElement][MAP]] elements</td></tr>
<tr><td>Contained in</td>	<td>File</td></tr>
</table>

The *TOP* element defines a set of [[#MapElement][MAP]] elements that define macro mappings for buttons in the top button panel of the editor. In this context the 'name' attribute of a contained [[#MapElement][MAP]] element is interpreted as a a button label. It can be any of a statically bound image name, or failing that the URL of a button image, or failing that a plain string to use as a button label.

#BottomElement
---+++ *BOTTOM* element
<table>
<tr><td>Syntax</td>		<td>&lt;BOTTOM&gt;..&lt;/BOTTOM&gt;</td></tr>
<tr><td>Attributes</td>		<td>None</td></tr>
<tr><td>Contents</td>		<td>[[#MapElement][MAP]] elements</td></tr>
<tr><td>Contained in</td>	<td>File</td></tr>
</table>

The *BOTTOM* element defines a set of [[#MapElement][MAP]] elements that define macro mappings for buttons in the bottom button panel of the editor. In this context the 'name' attribute of a contained [[#MapElement][MAP]] element is interpreted as a a button label. It can be any of a statically bound image name, or failing that the URL of a button image, or failing that a plain string to use as a button label.

#LeftElement
---+++ *LEFT* element
<table>
<tr><td>Syntax</td>		<td>&lt;LEFT&gt;..&lt;/LEFT&gt;</td></tr>
<tr><td>Attributes</td>		<td>None</td></tr>
<tr><td>Contents</td>		<td>[[#MapElement][MAP]] elements</td></tr>
<tr><td>Contained in</td>	<td>File</td></tr>
</table>

The *LEFT* element defines a set of [[#MapElement][MAP]] elements that define macro mappings for buttons in the left button panel of the editor. In this context the 'name' attribute of a contained [[#MapElement][MAP]] element is interpreted as a a button label. It can be any of a statically bound image name, or failing that the URL of a button image, or failing that a plain string to use as a button label.

#RightElement
---+++ *RIGHT* element
<table>
<tr><td>Syntax</td>		<td>&lt;RIGHT&gt;..&lt;/RIGHT&gt;</td></tr>
<tr><td>Attributes</td>		<td>None</td></tr>
<tr><td>Contents</td>		<td> [[#MapElement][MAP]] elements</td></tr>
<tr><td>Contained in</td>	<td>File</td></tr>
</table>

The *RIGHT* element defines a set of [[#MapElement][MAP]] elements that define macro mappings for buttons in the right button panel of the editor. In this context the 'name' attribute of a contained [[#MapElement][MAP]] element is interpreted as a a button label. It can be any of a statically bound image name, or failing that the URL of a button image, or failing that a plain string to use as a button label.

#MapElement
---+++ *MAP* element
<table>
<tr><td>Syntax</td>		<td>&lt;MAP../&gt;</td></tr>
<tr><td>Attributes</td>		<td>
   * NAME= source of map; may be a key string, a macro name, a button name or the URL of a button image, depending on context.
   * ACTION= macro string to execute
ACTION
TIP
</td></tr>
<tr><td>Contents</td>		<td> [[#MapElement][MAP]] elements</td></tr>
<tr><td>Contained in</td>	<td>
[[#MacrosElement][MACROS]] 
[[#KeysElement][KEYS]] 
[[#TopElement][TOP]] 
[[#BottomElement][BOTTOM]] 
[[#LeftElement][LEFT]] 
[[#RightElement][RIGHT]]
</td></tr>
</table>

The *MAP* element defines a mapping from a string to an action. The action is always a macro (a string comprising text to enter and references to basic editor commands and macros defined in a [[#MacrosElement][MACROS]] block). The string may be interpreted as a name, a button name, or a URL, depending on context. See the description of the containing contexts for more information.

#LoadElement
---+++ *LOAD* element
<table>
<tr><td>Syntax</td>		<td>&lt;LOAD../&gt;</td></tr>
<tr><td>Attributes</td>		<td>
   * URL= URL
</td></tr>
<tr><td>Contained in</td>	<td>File</td></tr>
</table>
The *LOAD* element is used to define a URL from which to load further controls definitions in-line. The contens of the URL are included as if they were typed directly in the file. The URL should normally be type =text/plain= - for example, it may refer to an uploaded attachment of type =.txt=

---++ Applet parameters
| *Parameter* | *Values* | *Description* |
| useframe | "yes" or "no" | Whether to use a separate window or not |
| editboxwidth | Number of columns | If useframe=yes, then defines the number of columns width of the edit area. Ignored if useframe=no. |
| editboxheight | Number of rows | If useframe=yes, then defines the number of rows height of the edit area. Ignored if useframe=no. |
| text | text | The text to edit. See "A note on large parameters", below. |
| controls | text | The control setup |

---+++ A note on large parameters
Because some browsers severely limit the size of data that can be passed in parameters, the plugin uses a multi-tier strategy for recovering the text to edit. First, it attempts to interpret the value of the =text= parameter as a Javascript expression that will return the text. For example, if the HTML contains:
<pre>
&lt;form name="editor"&gt;
&lt;input type="hidden" name="thetext" value="A very long text string" /&gt;
&lt;/form&gt;
&lt;applet ...&gt;
&lt;param name="text" value="editor.thetext.value"&gt;
...
&lt;/applet&gt;
</pre>
then the =text= parameter would be set to =document.editor.thetext.value= to recover the value from the hidden input field. The expression can be any Javascript expression, valid in the context of the window, that returns a string. This may fail for a number of reasons, as not all browsers support Javascript or have the same interpretation of security restrictions.

If that fails, then the editor tries to interpret the value of =text= as a URL, and download the text from it. For example:
<pre>
&lt;param name="text" value="http://twiki.kamasutra.org/bin/view/PositionSixtyNine?skin=naked"&gt;
</pre>
Again this can fail for a number of reasons, usually to do with security or dropped links.

Finally if that fails, the editor interprets the value of the =text= parameter as being the text to edit. This can fail if the value of the text is too large for the browser to handle in a parameter.

The value of the controls parameter is always interpreted as the actual text of the controls description. However, the &lt;load&gt; tag allows you to defer this to a URL if the controls text gets too large for a parameter to handle.

---+ <nop>PowerEditPlugin Global Settings

Plugin settings are stored as preferences variables. To reference a plugin setting write ==%<nop>&lt;plugin&gt;_&lt;setting&gt;%==, i.e. ==%<nop>POWEREDITPLUGIN_SHORTDESCRIPTION%==

	* One line description, is shown in the %TWIKIWEB%.TextFormattingRules topic:
		* Set SHORTDESCRIPTION = Extend TWiki with a Java 1.1 Applet based text editor.
	* __Note__ The %<nop>POWEREDIT_CONTROLS% variable is *not* a plugin variable but a global variable. As such you have to set it in TWiki.TWikiPreferences if you want to override the default. See TWiki.TWikiVariables "Creating Custom Variables".

---+ Installation Instructions

__Note:__ You do not need to install anything on the browser to use this plugin. The following instructions are for the administrator who installs the plugin on the server where TWiki is running. 

	* Download the ZIP file from the Plugin web (see below). Contents:
	| *File:* | *Description:* |
	| ==PowerEditPlugin.xml== | Ant build file |
	| ==data/TWiki/PowerEditPlugin.txt== | Plugin topic |
	| ==data/TWiki/PowerEditControls.txt== | Sample control configuration |
	| ==templates/edit.power.tmpl== | Specialised skin. The difference to edit.tmpl are minimal, so deriving a local skin should be trivial. |
	| ==templates/applet.power.tmpl== | Sub-template use for the applet tag. Done as a sub-skin to short-circuit default TWiki expansions. |
	| ==pub/TWiki/PowerEditPlugin/poweredit.jar== | JAR file |
	| ==lib/TWiki/Plugins/PowerEditPlugin/source.zip== | Source and test code |
	| ==lib/TWiki/Plugins/PowerEditPlugin.pm== | Plugin script |
	* Unzip ==PowerEditPlugin.zip== in your twiki installation directory.
   * (Dakar) Visit =configure= in your TWiki installation, and enable the plugin in the {Plugins} section.
	* A command to invoke the editor can by added to the normal topic view by putting the following line into your =bin/view= template, immediately after the line reading %<nop>EDITTOPIC%:
	<pre>
	%<nop>TMPL:P{"sep"}% &lt;a href="%<nop>SCRIPTURLPATH%/edit%<nop>SCRIPTSUFFIX%/%<nop>WEB%/%<nop>TOPIC%?skin=power">PowerEdit&lt;/a>
	</pre>

---+ Plugin Info

|  Plugin Author: | TWiki:Main/CrawfordCurrie http://www.c-dot.co.uk |
|  Plugin Version: | 14 Mar 2003 |
|  Change History: | 1 Oct 2001: Initial version as an Addon |
|  | 14 Mar 2003: Total rewrite as a Plugin |
|  CPAN Dependencies: | none |
|  Other Dependencies: | Java 1.1 (also supports more recent browser plugins) |
|  Perl Version: | 5.0 |
|  Plugin Home: | http://TWiki.org/cgi-bin/view/Plugins/PowerEditPlugin |
|  Feedback: | http://TWiki.org/cgi-bin/view/Plugins/PowerEditPluginDev |

__Related Topics:__ %TWIKIWEB%.TWikiPreferences, %TWIKIWEB%.TWikiPlugins

---+ Known Problems

---++ Clipboard Access
In order to access the clipboard on the client machine, an applet has to be signed. By default PowerEdit is shipped _unsigned_. This is because (1) proper certificates cost money and (2) certificates you generate yourself have extremely limited lifetimes. So unless you sign the jar (after adding appropriate security API calls to the code!) you won't get clipboard access. This generally isn't much of a problem on UNIX and Linux because of the middle-button copy and paste capability. 

---+ Customisation and Further Development

All the sources and unit tests are provided with the distribution, together with an Ant build file (see http://www.jakarta.org) should further customisation be required. The source.zip is shipped in the =lib/TWiki/Plugins/PowerEditPlugin= directory and when unzipped creates source, packages and test subdirectories. The =src= directory contains the applet sources, the =test= directory contains JUnit unit tests, and the =packages= directory contains the GNU 'regexp' package, which is used by search and replace and the TWiki Markup to XHTML converter.

It is a condition of use that any useful customisations are fed back to the TWiki:Plugins.PowerEditPluginDev page at http://www.twiki.org !

Further development of this plugin is welcomed. The sources are all checked in to the TWiki CVS repository. If you make extensions to the plugin, please, please, _please_ maintain and extend the tests!

---+ Copyright

This code is a development of C-dot Software and is protected by the following copyrights:
	* Copyright &copy; 2004 Crawford Currie http://www.c-dot.co.uk.
Portions of this code (clearly marked) are based on code developed by Motorola Inc. and are protected by the following copyrights:
	* Portions Copyright &copy; 2001-2003 Motorola. All Rights Reserved.

---+ License

As required for the publication of all extensions to TWiki, this
software is published under the terms of the GNU General Public
License.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details, published at
http://www.gnu.org/copyleft/gpl.html

%META:FILEATTACHMENT{name="PowerEditControls.xml" attr="" comment="XML controls description" date="1075801512" path="PowerEditControls.xml" size="6995" user="guest" version="1.1"}%
