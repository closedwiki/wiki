%META:TOPICINFO{author="guest" date="1099288894" format="1.0" version="1.2"}%
---+!! TWiki Shell

%TOC%

---+ Purpose
%STARTINCLUDE%
TWikiShellContrib is  a shell that can be use to replace all twiki command line scripts with a single interface. Each command available in the twikishell is also available as a command line option using the -e switch.
%ENDINCLUDE%

---+ Installation

	* Make sure that Term::Shell is installed (either in the perl distribution or locally in twiki)
	* Unzip ==%TOPIC%.zip== in your twiki installation directory. Content:
	| *File:* | *Description:* |
        | ==/twikishell== | The uber command to start it |
        | ==/data/TWiki/TWikiShellContrib.txt== | This topic |
        | ==/lib/TWiki/Contrib/TWikiShellContrib/TWikiShell.pm== | Main module |
        | ==/lib/TWiki/Contrib/TWikiShellContrib/Standard.pm== | Standard set of commands |
        | ==/lib/TWiki/Contrib/TWikiShellContrib/Common.pm== | Common subs used |
        | ==/lib/TWiki/Contrib/TWikiShellContrib/Zip.pm== | Zip files service |
        | ==/lib/TWiki/Contrib/TWikiShellContrib/DirHandling.pm== | Dir Handling service |
        | ==/lib/TWiki/Contrib/TWikiShellContrib/Ext/Dump.pm== | Example Extended Command |

If you have a non-standard instalation, then move the files wherever you need them to be.

---+ Usage

In the TWiki home directory, there is an uber-command:
	* twikishell

This will fire the shell. The following command line options are available:

| *Option* | *Description* |
| -v | Verbose mode (Verbosity level 1) (Default) |
| -vv | Very Verbose mode (Verbosity level 2) |
| -q | Quiet Operation (Verbosity level 0) |
| -d | Turns on debugging (prints debug statements to console) |
| -e <command> | Execute the specified command. Must be the last option in the cli. i.e: twikishell -e install plugin CalendarPlugin|

---+ Operation

When the shell starts, it first try to load the .twikishellrc file for the stored configuration. If it can't find it, it 'll try to guess where setlib.cfg is, and if it can't find it it will ask the user for it's location.

Once it knows the setlib.cfg directory or if the config file is found, the correct twikiLibPath is addded to the @INC var and the shell is ready to go.

On a bare installation (without any CommandSets installed), you have the following available commands:

| *Command* | *Description* |
| help | Shows a list of available commands  |
| exit, q , quit | Quits the shell |
| import <perl module> | Imports a perl module and scan it for new commands to be added to the shell |
| verbose <level> | Changes the verbosity level to either 1 or 2 |
| quiet | Changes the verbosity level to 0 |
| debug | Set debugging On and Off. Usage: debug [on/off] |
| register | Register a CommandSet to be loaded at shell startup |
| unregister | Unregister a CommandSet so it's not loaded at shell startup |
| reload | Reloads a CommandSet |
| reload shell | Reloads the shell |

The config file is a dump (using Data::Dumper) of the configuration object used internally

---+ CommandSet

---++ Creation

CommandSets are perl modules that defines one or more of the following subs:

| *Sub* | *Description*|
| run | Command execution |
| smry | One-line help to be used by "help" to sumarize all the commands |
| help | Complete help to be shown by the "help <command>" command |
| run_<subcommand> | SubCommand execution |
| smry_<subcommand> | One-line help to be used by "help" to sumarize all the commands |
| help_<subcommand> | Complete help to be shown by the "help <command> <subcommand>" command |

There are several ways to implement CommandSet. The first thing to understand is how the commands map to perl modules and handler subs. See the following table:

| *command/subcommand* | *Module Name* | *Implemented Handlers * |
| dump | Dump | run, smry, help |
| dump config | Dump | run_config, smry_config, help_config |
|^ | Dump::Config | run, smry, help |
| dump handlers | Dump | run_handlers, smry_handlers, help_handlers |
|^ | Dump::Handlers | run, smry, help |


The CommandSet can be on any TWiki subpackage. CommandSet under the TWiki::Contrib::TWikiShellContrib::Ext package are considered to be "Core" CommandSet, that is, are distributed with TWikiShellContrib.

For an example, check the TWiki::Contrib::TWikiShellContrib::Ext::Dump module (implementation of the dump command).

---++ Initializing CommandSet

Any CommandSet that needs an special initializacion when imported can use the following hook:

---+++ onImport($shell,$config)
Called when the CommandSet is being imported.

---++ Loading a CommandSet to the Shell

To load a CommandSet, use:

<verbatim>
	import <command>
</verbatim>

or

<verbatim>
	import <CommandSet_module_without_prefix>
</verbatim>

if it's a core CommandSet, or 

<verbatim>
	import <CommandSet_module>
</verbatim>

if not.

Also, if the CommandSet is in a subpackage of Ext (like the Dump CommandSet) it will be imported automatically on it first invocation (for example, the Dump CommandSet will be loaded automatically when the dump, dump config or dump handlers commands are called). 

---++ CommandSet contract

All the handlers will be called with the following parameters (in order):

|*Parameter*|*Description*|
|$shell| A reference to the shell object |
|$config| A reference to the config object|
|@args| The list of parameters passed to the command|


---+ Config Object

The config object provides a centralized place where CommandSet can store their settings. It's a blessed hash with the following published subs

	* sub save : Save the configuration to the .twikishellrc file, using Data::Dumper
	* sub saveAndDispose: Clean up the configuration and save it as per save sub.

Also, the configuration will always have the following variables set:

	* twikiBinDir : TWiki bin directory (where setlib.cfg is)
	* twikiLibPath : TWiki lib directory 
	* verbosity : Last verbosity set


Any CommandSet that want to store a setting in the config object, must call the save method. 

It's recommended that CommandSets using the config object to store settings must create a namespace using a hash for the settings so they won't conflict with others. Example:

The ==TWiki::Contrib::TWikiReleaseTrackerCommand== may store it's settings in ==$config->{TWikiReleaseTrackerCommand}==, so it's settings accessed using ==$config->{TWikiReleaseTrackerCommand}{setting_name}==
---++ Settings
   * Name of the perl package
      * Set STUB = TWiki::Contrib::TWikiShellContrib
---+ Services

The "services" are sets of common functionality than can be reused across CommandSets.

---++ TWiki::Contrib::TWikiShellContrib::Zip

---+++ unzip($sourceFile,$targetDir)

Unzips $sourceFile to $targetDir. It's use ==Archive::Zip== if installed, or the configured unzip program if not.

---+++ checkUnzipMechanism($config)

Makes sure that the unzip service is correctly configured, and if not try to configure it automatically or asking the user.

---++ TWiki::Contrib::TWikiShellContrib::DirHandling

---+++ makepath($path)

Creates the directory structure leading to $path. Examples:

<verbatim>
makepath("/lib/TWiki/Plugin/NewPlugin/NewPlugin.pm");
</verbatim>

will try to create the following directories if they don't exist:
<verbatim>
/lib
/lib/TWiki
/lib/TWiki/Plugin
/lib/TWiki/Plugin/NewPlugin
</verbatim>

<verbatim>
makepath("/pub/SomeDir/SomeSubDir");
</verbatim>

will try to create the following directories if they don't exist:

<verbatim>
/pub
/pub/SomeDir
</verbatim>


---+ Contrib Info

| Authors: | TWiki:Main.CrawfordCurrie, TWiki:Main.MartinCleaver,TWiki:Main.RafaelAlvarez |
| Copyright &copy;: | 2004, Crawford Currie, Rafael Alvarez and Martin Cleaver|
| License: | GPL |
| Dependencies: | Term::Shell |
| 02/11/04 | 1.1 Added reload and register commands |
| 21/10/04 | 1.000 Initial release, based on the work of TWiki:Main.MartinCleaver|
|  Home: | http://TWiki.org/cgi-bin/view/Plugins/%TOPIC% |
|  Feedback: | http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%Dev |

__Related Topics:__ TWiki:Main.TWikiShell

