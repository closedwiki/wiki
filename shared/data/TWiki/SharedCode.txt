This topic describes the contents of the TWiki Plugins shared code repository. This repository gathers together common code from across different plugins, and provides compatibility interfaces with older TWiki releases for plugins written to use the latest plugins API.

On a temporary basis only, just until we have worked out how to automatically manage dependencies, please get the code from the attached zip.

%TOC%

---+ Summary of Contents
---++ Build & Install Modules
SharedCode includes a Build.pm module that can be used to create a really simple build process for your plugin, including build, test, install, release and upload targets. The advantage of this module is that it defines a standard build procedure for plugins, so you won;t get file names wrong or get the list of files in the plugin topic wrong either. The easiest way to use the module is to copy the =build.pl= file from the =lib/TWiki/Plugins/SharedCode/= into your own plugin subdirectory. Note that the test target assumes you are using Test::Unit. =Build.pm= has only been tested on Linux, but should work with cygwin OK.

Note this is a _build_ module for use by developers, not an _install_ module for end users. The intent is that =Build.pm= will be extended to _auto-generate_ the installer for the plugin as part of the release process. We're not quite there yet, but watch this space!

The build environment also requires curl.

Note that the Shared Code repository, including this topic and all the embedded POD documentation, is generated using this build module.

The build environment does _not_ assume the use of CVS, though it is highly recommended.
---++ Code Modules
---+++ Attributes handling
Provides a simple and consistent interface for creation and management of lists of standard TWiki-syntax attribute value lists, as used in tags.
---++ Compatibility Modules
---+++ <nop>CairoCompatibilityModule
SharedCode includes a Cairo compatibility module, that implements some of the functions added in Cairo so they are available to plugins running in a pre-Cairo installation. This allows plugin authors to upgrade to Cairo without losing compatibility with earlier TWiki releases.
---++ Test Fixtures
The are a number of test fixtures in the shared code repository that can be used for testing plugins with =Test::Unit=. The fixtures replace the =TWiki::Func=, =TWiki::Store= and TWiki modules, allowing a stand-alone unit test suite to be built for the plugin. The easiest way to use the fixtures is to copy the tests from an existing plugin that uses them - for example, CommentPlugin, ActionTrackerPlugin, WebDAVPlugin or FormQueryPlugin - and modify the tests appropriately for your plugin.

The fixtures do not replace _all_ of the TWiki core functionality, just those pieces used by the plugins. If you find a piece is missing, and you need it, please feel free to extend the fixtures on condition that you check your improvements back in.
---++ Support scripts
=conformance_analyser.pl= is a perl script that analyses the conformance of plugins to the API and packaging standards. It is driven from the zips downloadable from twiki.org.

%$POD%
