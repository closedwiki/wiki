%META:TOPICINFO{author="MikeMannix" date="999598350" format="1.0" version="1.1"}%
%META:TOPICPARENT{name="WebHome"}%
---+ new topic for the final doc

Slightly edited down, but waiting for new docs, hopefully.

see also for ref: orig TWikiTemplatingSystem
%TOC%

%STARTINCLUDE%
---## TWiki Template System

_Define the templates used to render all HTML pages displayed in TWiki_ 

---+++ Overview

We have a need for more advanced template handling. As Main.JohnTalintyre pointed out in CommonHeaderFooterTemplate it makes sense to separate the header and footer into one file so that it can be easily altered (or even overloaded by a skin). Also the oops dialog messages are all identical except for a few variables like heading, and so on.

Using external modules like the TemplateToolkit would be one way to go, but this will add a lot of baggage to TWiki.

---+++ Needs of the TWiki templating system

	* Separate common parts into one (or more) base template file(s) and include that from other template files like =view.tmpl=.
	* Define common variables like a "|" separator in the base template and use them in other template files
	* Define variable text in templates (i.e. =view.tmpl=) and pass them to the base template

---+++ Functional Spec

I tried to define a simple but powerful solution that can be extended over time. Here we go:

	* Special template directives (or preprocessor commands) are embedded in normal templates.
	* Use of template directives is optional, templates work without them.
	* All template preprocessing is done in =&TWiki::Store::readTemplate()= so that the caller simply gets an expanded template file (the same as before)
	* Directives are of form =%<nop>TMPL:&lt;key&gt;%= and =%<nop>TMPL:&lt;key&gt;{"attr"}%=.
	* Initial set of directives:
		* =%<nop>TMPL:INCLUDE{"file"}%=: Includes a template file. The usual search path is applied.
		* =%<nop>TMPL:DEF{"var"}%=: Define a variable. Text between this and the END directive is not returned, but put into a hash for later use.
		* =%<nop>TMPL:END%=: Ends variable definition.
		* =%<nop>TMPL:P{"var"}%=: Prints a previously defined variable.
	* New directives can be added over time when needed, i.e. IF-THEN-ELSE.
	* Variables live in a global name space, there is no parameter passing.
	* Two pass processing, so that you can use a variable before declaring it or after.
	* Templates and skins work transparently and interchangeably. You could for example define a new skin just for the header & footer and keep the other template files unchanged.
	* __Note:__ The template directive work only for templates, they do not get processed in topic text.


---+++ Examples

Attached is an example of an oops base template =oopsbase.tmpl= and a example oops dialog =oopstest.tmpl= which is based on the base template. This is not the version that will go into the release, it is just a quick hack.

---+++++ Base template oopsbase.tmpl

The first line declares the delimiter variable called "sep", used to separate multiple link items. The variable can be called anywhere by writing =%<nop>TMPL:P{"sep"}%=

__Note:__ Added a dot to escape rendering of variables, i.e. read ==%.WEB%== as ==%<nop>WEB%==.

<pre>
&lt;table border="1" cellspacing="0" cellpadding="1"&gt;
&lt;tr&gt;&lt;td&gt;
&lt;verbatim&gt;
%.TMPL:DEF{"sep"}% | %.TMPL:END%
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt; %.WIKITOOLNAME% . %.WEB% . %.TOPIC% %.TMPL:P{"titleaction"}%&lt;/title&gt;
  &lt;base href="%.SCRIPTURL%/view%.SCRIPTSUFFIX%/%.WEB%/%.TOPIC%"&gt;
  &lt;meta name="robots" content="noindex"&gt;
&lt;/head&gt;
&lt;body bgcolor="#FFFFFF"&gt;
&lt;table width="100%" border="0" cellpadding="3" cellspacing="0"&gt;
  &lt;tr&gt;
	 &lt;td bgcolor="%.WEBBGCOLOR%" rowspan="2" valign="top" width="1%"&gt;
		&lt;a href="%.WIKIHOMEURL%"&gt;
		&lt;img src="%.PUBURLPATH%/wikiHome.gif" border="0"&gt;&lt;/a&gt;
	 &lt;/td&gt;
	 &lt;td&gt;
		&lt;b&gt;%.WIKITOOLNAME% . %.WEB% . &lt;/b&gt;&lt;font size="+2"&gt;
		&lt;B&gt;%.TOPIC%&lt;/b&gt; %.TMPL:P{"titleaction"}%&lt;/font&gt;
	 &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr bgcolor="%.WEBBGCOLOR%"&gt;
	 &lt;td colspan="2"&gt;
		%.TMPL:P{"webaction"}%
	 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
--- ++ %.TMPL:P{"heading"}%
%.TMPL:P{"message"}%
&lt;table width="100%" border="0" cellpadding="3" cellspacing="0"&gt;
  &lt;tr bgcolor="%.WEBBGCOLOR%"&gt;
	 &lt;td valign="top"&gt;
		Topic &lt;b&gt;%TOPIC%&lt;/b&gt; . {
		  %.TMPL:P{"topicaction"}%
		}
	 &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/verbatim&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table &gt;
</pre>


---+++++ Test template oopstest.tmpl

Each oops template basically just defines some variables and includes the base template that does the layout work.

<table border="1" cellspacing="0" cellpadding="1">
<tr><td>
<verbatim>
%.TMPL:DEF{"titleaction"}% (test =titleaction=) %.TMPL:END%
%.TMPL:DEF{"webaction"}% test =webaction= %.TMPL:END%
%.TMPL:DEF{"heading"}%
Test heading %.TMPL:END%
%.TMPL:DEF{"message"}%
Test =message=. Blah blah blah blah blah blah blah blah blah blah blah...

	* Some more blah blah blah blah blah blah blah blah blah blah...
	* Param1: %PARAM1%
	* Param2: %PARAM2%
	* Param3: %PARAM3%
	* Param4: %PARAM4%
%.TMPL:END%
%.TMPL:DEF{"topicaction"}%
Test =topicaction=:
[[%.WEB%.%TOPIC%][OK]] %.TMPL:P{"sep"}%
[[%.TWIKIWEB%.TWikiRegistration][Register]] %.TMPL:END%
%.TMPL:INCLUDE{"oopsbase"}%
</verbatim>
</td></tr>
</table >

---+++++ Sample screen shot of oopstest.tmpl

With URL: ==.../bin/oops/Test/TestTopic2?template=oopstest&param1=WebHome&param2=WebNotify==

| <img src="%ATTACHURLPATH%/testscreen.gif" width="554" height="304" alt="testscreen.gif"> |

---+++ Comments and feedback

	* The itching factor to put this into the upcoming release is to easy the pending converstion of the templates into XHTML format and to have a more flexible solution for templates and skins.
	* Is the terminology OK?
	* Is the spec OK?
	* Are there any other directives that are needed urgently?
	* One drawback by using the directives is that you can only test a template from within TWiki. This is because you don't have a text that has a linear flow when you use TMPL:DEF, TMPL:P and TMPL:INCLUDE.

-- Main.PeterThoeny - 21 Jul 2001 <br>

	* It's probably more readable to enforce variables being defined before use, which would avoid need for slower two-pass processing.
		* [ Main.PeterThoeny ] You need two-pass processing because you need to define the "|" separator in the included template onone side, and on the other side define variables for the included template. The processing happens as regex in memory, so there is no mesurable speed penalty.
	* It would be nice to simplify the syntax a bit, e.g. not using "" around variable names (they don't really need it, unlike filenames), and not using braces - however, this is not a big deal and there is some merit in keeping consistent with the current TWiki syntax.
		* [ Main.PeterThoeny ] The templating system uses the standard internal TWiki function to parse variable attributes. The "" can be skipped (is possible but is not documented).


Please have a look at the latest templates in the TWikiAlphaRelease. There is now one master template called =twiki.tmpl= that all other templates include (well, will include when all done). The idea is to define all common parts of the templates in =twiki.tmpl= and simply use that from all other templates.

| *Template variable:* | *Defines:* |
| %<nop>TMPL:DEF{"sep"}% | %TMPL:END% | "&#124;" separator |
| %<nop>TMPL:DEF{"htmldoctype"}% | Start of all HTML pages |
| %<nop>TMPL:DEF{"standardheader"}% | Standard header (for view, rdiff, ... |
| %<nop>TMPL:DEF{"simpleheader"}% | Simple header with reduced links (for edit, attach, oops,...) |
| %<nop>TMPL:DEF{"standardfooter"}% | Footer, excluding revision part and copyright part |
| %<nop>TMPL:DEF{"oops"}% | Skeleton of oops dialog |

I.e. the =preview.tmpl= template is now simply:
<pre>
%<nop>TMPL:INCLUDE{"twiki"}%
%<nop>TMPL:DEF{"titleaction"}% (oops) %<nop>TMPL:END%
%<nop>TMPL:DEF{"webaction"}% *Attention* %<nop>TMPL:END%
%<nop>TMPL:DEF{"heading"}% Topic is not saved yet %<nop>TMPL:END%
%<nop>TMPL:DEF{"message"}%
  Please go back in your browser and save the topic. %<nop>TMPL:END%
%<nop>TMPL:DEF{"topicaction"}% %<nop>TMPL:END%
%<nop>TMPL:P{"oops"}%
</pre>

With this it should be possible to create a skin that overloads just the =twiki.tmpl=, i.e. a =twiki.print.tmpl= that redefines the header and footer.

-- Main.PeterThoeny - 23 Jul 2001 <br>
-- MikeMannix - 30 Aug 2001 

%META:FILEATTACHMENT{name="testscreen.gif" attr="h" comment="Example of oopstest.tmpl rendered" date="999598142" path="C:\02_TWikiDocs\testscreen.gif" size="9460" user="MikeMannix" version="1.1"}%
