%META:TOPICINFO{author="TWikiContributor" date="1111929255" format="1.0" version="$Rev$"}%
%TOC%
%STARTINCLUDE%
---# TWiki Skins

_Skins overlay regular templates with alternate header/footer layouts; topic text is not affected_

---++ Overview

Skins are customized TWikiTemplates files. You can use skins to change the look of a <nop>%WIKITOOLNAME% topic, for example, the layout of the header and footer. Rendered text between header and footer does __not__ change. You can also use skins to define an alternate view, like a view optimized for printing.

---++ Defining Skins

Skin files are located in the =twiki/templates= directory and are named with the syntax: ==&lt;scriptname&gt;.&lt;skin&gt;.tmpl==. For example, the *Printable* skin for the =view= template is =view.print.tmpl=. Skin files may also be defined in TWiki topics - see TWikiTemplates for details. 

Use the existing TWikiTemplates (like =view.tmpl=) or skin files as a base for your own skin, name it for example =view.myskin.tmpl=.

%X% Two skin names have _reserved_ meanings; =text= skin, and skin names starting with =rss= have _hard-coded meanings. [[HardCodedSkins][See below]].

The following template files are referenced in the TWiki core code, and must be defined in the =templates= directory for a skin to work. Remember that if a skin doesn't define a template, then TWiki will fall back to the default version of the file.

Certain template files are expected to provide certain TMPL:DEFs - these are listed in sub-bullets.
   * =addform=
   * =attachagain=
   * =attachnew=
   * =attachtables=
      * =ATTACH:files:footer=, =ATTACH:files:header=, =ATTACH:files:row=, =ATTACH:versions:footer=, =ATTACH:versions:header=, =ATTACH:versions:row=
   * =changeform=
   * =changes=
   * =edit=
   * =form=
   * =formtables=
      * =FORM:display:footer=, =FORM:display:header=, =FORM:display:row=
   * =login=
      * =LOG_IN=, =LOG_IN_BANNER=, =LOG_OUT=, =LOGGED_IN_BANNER=, =NEW_USER_NOTE=, =UNRECOGNISED_USER=
   * =mirrorlink=
   * =mirrornote=
   * =moveattachment=
   * =oops=
   * =oopsaccessdenied=
      * =no_such_topic=, =no_such_web=, =only_group=, =topic_access=
   * =oopsattention=
      * =already_exists=, =bad_email=, =bad_ver_code=, =bad_wikiname=, =base_web_missing=, =confirm=, =created_web=, =delete_err=, =illegally_named_upload=, =invalid_web_color=, =invalid_web_name=, =in_a_group=, =mandatory_field=, =merge_notice=, =missing_action=, =missing_fields=, =move_err=, =missing_action=, =no_form_def=, =no_users_to_reset=, =notwikiuser=, =oversized_upload=, =password_changed=, =password_mismatch=, =problem_adding=, =remove_user_done=, =rename_err=, =rename_not_wikiword=, =rename_topic_exists=, =rename_web_err=, =rename_web_exists=, =rename_web_prerequisites=, =reset_bad=, =reset_ok=, =save_error=, =send_mail_error=, =thanks=, =topic_exists=, =unrecognized_action=, =web_creation_error=, =web_exists=, =web_missing=, =wrong_password=, =zero_size_upload=
   * =oopsleaseconflict=
      * =active=, =old=
   * =oopsmirror=
   * =oopssaveerr=
   * =preview=
   * =rename=
   * =renameconfirm=
   * =renamedelete=
   * =renameweb=
   * =renamewebconfirm=
   * =renamewebdelete=
   * =searchbookview=
   * =searchformat=
   * =search=
   * =settings=
   * =rdiff=
   * =registernotify=
   * =registernotifyadmin=
   * =view=

---++ Variables in Skins

You can use [[TWikiTemplates#TemplateVariables][template variables]], TWikiVariables, and other predefined variables to compose your skins. Some commonly used variables in skins:

| *Variable:* | *Expanded to:* |
| =%<nop>WEBLOGONAME%= | Filename of web logo |
| =%<nop>WEBLOGOIMG%= | Image URL of web logo |
| =%<nop>WEBLOGOURL%= | Link of web logo |
| =%<nop>WEBLOGOALT%= | Alt text of web logo |
| =%<nop>WIKILOGOURL%= | Link of page logo |
| =%<nop>WIKILOGOIMG%= | Image URL of page logo |
| =%<nop>WIKILOGOALT%= | Alt text of page logo |
| =%<nop>WEBBGCOLOR%= | Web-specific background color, defined in the WebPreferences |
| =%<nop>WIKITOOLNAME%= | The name of your TWiki site |
| =%<nop>SCRIPTURL%= | The script URL of TWiki |
| =%<nop>SCRIPTSUFFIX%= | The script suffix, ex: =.pl=, =.cgi= |
| =%<nop>WEB%= | The name of the current web. __Note:__ It is recommended to URL-encode the variable in form actions with =%<nop>INTURLENCODE{"%<nop>WEB%"}%= for proper handling in an internationalized environment |
| =%<nop>TOPIC%= | The name of the current topic. __Note:__ It is recommended to URL-encode the variable in form actions with =%<nop>INTURLENCODE{"%<nop>TOPIC%"}%= for proper handling in an internationalized environment |
| =%<nop>WEBTOPICLIST%= | Common links of current web, defined in the WebPreferences. It includes a [[#GoBox]] |
| =%<nop>TEXT%= | The topic text, e.g. the content that can be edited |
| =%<nop>META{"form"}%= | [[TWikiForms][TWikiForm]], if any |
| =%<nop>META{"attachments"}%= | FileAttachment table |
| =%<nop>META{"parent"}%= | The topic parent |
| =%<nop>EDITTOPIC%= | Edit link |
| =%<nop>REVTITLE%= | The revision title, if any, ex: =(r1.6)= |
| =%<nop>REVINFO%= | Revision info, ex: =r1.6 - 24 Dec 2002 - 08:12 GMT - %WIKIUSERNAME%= |
| =%<nop>WEBCOPYRIGHT%= | Copyright notice, defined in the WebPreferences |
| =%<nop>BROADCASTMESSAGE%= | Broadcast message at the beginning of your view template, can be used to alert users of scheduled downtimes; is set in TWikiPreferences |

#GoBox
---+++ The "Go" Box and Navigation Box

The =%<nop>WEBTOPICLIST%= includes a "Jump" box to jump to a topic. The box also understands URLs, e.g. you can type http://www.google.com/ to jump to an external web site. The feature is handy if you build a skin that has a select box of frequently used links, like Intranet home, employee database, sales database and such. A little <nop>JavaScript gets into action on the onSelect method of the select tag to fill the selected URL into the "Go" box field, then submits the form.

Here is an example form that has a select box and the "Go" box for illustration purposes. You need to have <nop>JavaScript enabled for this to work:

<form name="sample" action="%SCRIPTURL%/view%SCRIPTSUFFIX%/%INTURLENCODE{"%WEB%/%TOPIC%"}%">
<table border="3"><tr><td>
<select name="sel" onchange="this.form.topic.value=this.options[this.selectedIndex].value; this.form.submit()">
 <option selected="selected" value="">Navigate...</option>
 <option value="http://www.twiki.org/">Intranet home</option>
 <option value="%MAINWEB%.%WIKIUSERSTOPIC%">Employee index</option>
 <option value="%MAINWEB%.%HOMETOPIC%">%MAINWEB% web</option>
 <option value="%TWIKIWEB%.%HOMETOPIC%">%TWIKIWEB% web</option>
 <option value="http://www.google.com/">Google</option>
 <option value="http://www.yahoo.com/">Yahoo!</option>
 </select>
Bare bones header for demo only
</td></tr><tr><td>
%WEBTOPICLIST%
</td></tr></table>
</form> 
 
---++ Using Cascading Style Sheets

Although work is underway at TWiki:Codev.CssClassNames, the regular templates files currently do not use style sheets.  Many skin developers, however, choose to use them; it helps in separating style from content.

Example: To use a style sheet for the broadcast message, add this to =view.myskin.tmpl=:

<verbatim>
<style type="text/css">
.broadcastmessage {
    background: yellow; display:block;
    border-style:solid;border-width: 2px;border-color:red;
}
.broadcastmessage strong {color: red}
</style>
</verbatim>

Then add a div tag to the =%<nop>BROADCASTMESSAGE%= variable located after the =#PageTop= anchor or after the opening form tag:

<verbatim>
<div class="broadcastmessage"> %BROADCASTMESSAGE% </div>
</verbatim>

---++ Attachment Tables
Controlling the look and feel of attachment tables is a little bit more complex than for the rest of a skin. By default the attachment table is a standard TWiki table, and the look is controlled in the same way as other tables. In a very few cases you may want to change the _content_ of the table as well.

The format of standard attachment tables is defined through the use of special _TWiki template macros_ which by default are defined in the =templates/twiki.tmpl= template using the =%TMPL:DEF= macro syntax described in TWikiTemplates. These macros are:
| *Macro* | *Description* |
| =ATTACH:files:header= | Standard title bar |
| =ATTACH:files:row= | Standard row |
| =ATTACH:files:footer= | Footer for all screens |
| =ATTACH:files:header:A= | Title bar for upload screens, with attributes column |
| =ATTACH:files:row:A= | Row for upload screen |
| =ATTACH:files:footer:A= | Footer for all screens |
The format of tables of file versions in the Upload screen are also formattable, using the macros:
| *Macro* | *Description* |
| =ATTACH:versions:header= | Header for versions table on upload screen |
| =ATTACH:versions:row= | Row format for versions table on upload screen |
| =ATTACH:versions:footer= | Footer for versions table on upload screen |

The =ATTACH:row= macros are expanded for each file in the attachment table, using the following special tags:
| *Tag* | *Description* |
| =%A_URL%= | URL that will recover the file |
| =%A_REV%= | Revision of this file e.g. "1.1" |
| =%A_ICON%= | A file icon suitable for representing the attachment content |
| =%A_FILE%= | The name of the file |
| =%A_SIZE%= | The size of the file |
| =%A_DATE%= | The date the file was uploaded |
| =%A_USER%= | The user who uploaded it |
| =%A_COMMENT%= | The comment they put in when uploading it |
| =%A_ATTRS%= | The attributes of the file as seen on the upload screen e.g "h" for a hidden file |

Note: it is easy to change the look and feel for an entire site by editing the =twiki.tmpl= template file. However, to simplify upgrading, you should avoid doing this. Instead, write a skin-specific template file e.g. =attach.myskin.tmpl= and use =%TMPL:INCLUDE{attach.myskin.tmpl}%= to include it in each of your skin files. As long as it it included _after_ twiki.tmpl, your macro definitions will override the defaults defined there.

---++ Packaging and Publishing Skins

See TWiki:Plugins/SkinPackagingHowTo and TWiki:Plugins/SkinDeveloperFAQ

---++ Browsing Installed Skins

You can try all installed skins in TWikiSkinBrowser.

---++ Activating Skins

TWiki uses a _skin search path_, which lets you combine skins additively. The skin path is defined using a combination of TWikiVariables and URL parameters.

TWiki works by asking for a template for a particular function - for example, 'view'. The detail of how templates are searched for is described in TWikiTemplates, but in summary, the templates directory is searched for a file called <code>view.</code><i>skin</i><code>.tmpl</code>, where _skin_ is the name of the skin e.g. =pattern=. If no template is found, then the fallback is to use =view.tmpl=. Each skin on the path is searched for in turn. For example, if you have set the skin path to =local,pattern= then =view.local.tmpl= will be searched for first, then =view.pattern.tmpl= and finally =view.tmpl=.

The basic skin is defined by setting the %<nop>SKIN% TWikiVariable:
   * =Set SKIN = catskin,bearskin=

You can also add a parameter to the URL: ?skin=catskin,bearskin

Setting %<nop>SKIN% (or the =?skin= parameter in the URL) replaces the existing skin path setting. You can also _extend_ the existing skin path as well, using _covers_.

   * =Set COVER = ruskin=

This pushes a different skin to the front of the skin search path (so for our example above, that final skin path will be =ruskin,catskin,bearskin=). There is also an equivalent =cover= URL parameter.

The full skin path is built up as follows: =%<nop>SKIN%= (or =?skin= if it is set), then =%<nop>COVER%= is added, then =?cover=.

---++ Hard Coded Skins

The =text= skin is reserved for TWiki internal use.

Skin names starting with =rss= also have a special meaning; if one or more of the skins in the skin path starts with 'rss' then 8-bit characters will be encoded as XML entities in the output, and the =content-type= header will be forced to =text/xml=.

__Related Topics:__ AdminDocumentationCategory, DeveloperDocumentationCategory
