%META:TOPICINFO{author="TWikiContributor" date="1111929255" format="1.0" version="$Rev$"}%

%TOC%
%STARTINCLUDE%
---# Windows Install Cookbook 

---++ Introduction

This cookbook is intended to get you up and running with TWiki on Windows quickly, with as few problems as possible.  The 'cookbook' approach is simply to restrict the many choices that someone installing TWiki must make, so that a reasonably well-defined procedure can be followed - new users can simply follow the steps, while experts can use this as more of a guideline. 

   * __NOTE__: This cookbook is not 100% complete (e.g. it doesn't cover authentication setup described by existing documentation), but it has been used successfully for several years - it is quite accurate and should get you started if you follow the instructions.  Please provide feedback in TWiki:Codev.WindowsInstallCookbookComments.  
   * __NOTE__: You will get the best results from following this cookbook *exactly*, using the same directories, etc - however, if you really do need to vary things, it should be fairly obvious what to do.


---++ Summary

%N% - See *[[WindowsInstallSummary]]* for a concise summary of the whole cookbook.

---++ Scope

This document covers installation of the TWiki *Dakar* production release on the following environment - if you want to use a different environment, feel free to use this as a guideline only.

| *Component* | *Name, version* | *Comment* |
| Operating System | Windows 2000 or XP | Should also work for Windows NT |
| Web Server | Apache 1.3.33 | Check latest version at http://httpd.apache.org, but *don't* use Apache 2.0 yet |
| Unix tools | Cygwin 1.5.12-1 | Simplest way to get a whole set of required tools - later versions should be fine |
| Perl| Cygwin perl-5.8.5-3 | Comes with Cygwin, Perl 5.8 is now fine |
| RCS | Cygwin rcs-5.7-3 | Comes with Cygwin |

Why this choice of packages?  Because we've tried them, and they work well, without requiring a complicated setup... In particular, Apache is the commonest choice for TWiki on Unix/Linux, Cygwin Perl is very close to Unix Perl, and the Cygwin RCS is regularly updated.   Cygwin also lets you install the Unix tools, Perl and RCS in a single step, saving quite a lot of time.

More recent minor versions should be OK, but they can introduce bugs.  

%N% Major version upgrades, such as Apache 2.0, are *very likely* to cause problems - for example, Apache 2.0 is unable to authenticate users created by the current TWiki user registration script (due to a feature being removed in 2.0, see  TWiki:Support.FailedAuthenticationWithApache2OnWinNT).  Even though the Apache group says that Apache 2.0 is the best version, that's not true for TWiki on Windows at present (and particularly not true for sites using internationalisation - see TWiki:Codev.ApacheTwoBreaksNonUTF8EncodedURLsOnWindows).  Perl 5.8 may also cause minor issues though it's generally OK.  For more information, see TWiki:Codev.IssuesWithApache2dot0 and TWiki:Codev.IssuesWithPerl5dot8.

---+++ Alternatives 
The following Windows operating systems have been tested following the instructions given here:
   * Windows NT, 98 and ME all work fine with minor tweaks
   * Windows XP works but please report any XP installations on TWiki:Codev.TWikiOnWindowsKnownConfigurations, and comment at TWiki:Codev.WindowsInstallCookbookComments.

There are doubtless other combinations of components that may work - in particular:
   * TWiki:Codev.ActiveState Perl involves only minor changes in [[%SCRIPTURL%/configure%SCRIPTSUFFIX%]], and is probably a simpler choice if you need an easy way to install mod_perl (see TWiki:Codev.ModPerl)..  
   * Using a different web server is certainly possible, but the setup required for each webserver varies greatly (see TWiki:Codev.TWikiOnWindows for pages about specific web servers).  You may find it easiest to get a working system with Apache and then switch over to another web server.

Covering the whole range of additional possibilities, particularly web servers, would make this cookbook too complex, and is best handled as a separate activity.  

For improved performance on Windows through using =mod_perl=, you may want to try TWiki:Codev.WindowsModPerlInstallCookbook.

---++ Checking versions

If you already have some of these add-ons installed, here's how to check the versions - this assumes you have TWiki:Codev.CygWin already installed:

<pre>
   $ <i>: Cygwin DLL version is the number in 1.5.x format</i>
   $ uname -r
   $ less c:/<i>your-apache-dir</i>/Announcement
   $ perl -v
   $ rcs -V
</pre>

If you have an older version of any component, do yourself a favour and *upgrade it* as part of the install process.

---++ Pre-requisites and upgrades
You will need to have local administrator rights and be comfortable with Windows administration.

This cookbook is intended for a clean install, i.e. none of these components are already installed.  However, since Cygwin and Apache's installation process is fairly upgrade-friendly, upgrades should work as well - take backups of all your data and config files first, though!

#TextEditing
---+++ Text editing
Editing Cygwin files should be done with an editor that can handle Unix file format (see the Cygwin binary mode section below). The installation process suggests:
   * =nano=, a very simple text editor, installed optionally during Cygwin installation. Always launch =nano= with the -w command-line option to turn off wrapping of long lines.
   * =vim=, a more sophisticated =vi= compatible editor that should be familiar to most Unix users
These both non-GUI editors, but if you prefer to use a GUI editor you can install PFE, a freeware editor that supports Unix format files.  PFE is available on [[http://download.cnet.com/downloads/0-4003619-100-904159.html?tag=st.dl.10001-103-1.lst-7-1.904159][download.com]] and [[http://www.simtel.net/pub/dl/11983.shtml][Simtel]].

Another good TWiki:Codev.OpenSource editor is <nop>SciTE (aka <nop>WSciTE), available at http://www.scintilla.org/SciTE.html.

---++  The Unix/Windows Environment

It's a little known fact that you can use pathnames such as ==c:/apache== almost everywhere in Windows - try it in a File Open dialogue box.  The main exception is the Windows "DOS" command line shell - here, you must use double quotes around forward slashes, e.g. =dir "c:/apache"= will work fine.

The reason this matters is that =='\'== is a special character to Perl and other tools, so it's much easier to use =='/'== everywhere.  

---+++ The Cygwin environment

TWiki:Codev.CygWin is a Unix-like environment for Windows - many of its tools support the =c:/apache= format, but it also provides a more Unixlike syntax, e.g. =/usr/bin/rcs.exe=, because some Unix tools ported onto Cygwin only support the Unix format.

When you launch a Cygwin shell, your existing PATH variable is translated from the Windows format to the Unix format, and the ';' separators in the Windows PATH are changed into ':' separators as required by Unix.  A Cygwin tool (e.g. Cygwin Perl or Cygwin RCS) will always use the Unix PATH format, and will accept Unix format pathnames.

---+++ The Apache environment

Apache runs as a native Windows process and has nothing to do with Cygwin (at least the version used in this cookbook doesn't).  Hence it supports =c:/= pathnames in its config files and the first line of Perl CGI scripts.

If you need to use spaces in file names (not recommended), put double quotes around the file name in the =httpd.conf= file. There have been some security-related bugs in Apache with long pathnames, which are a bit more likely if you use spaces, so it's best to just avoid long names and using spaces.

---+++ The Perl environment

Once Perl has been launched by Apache, it is in Cygwin mode, and so is everything it launches, including =ls=, =egrep=, and the RCS tools that it (typically) launches with the =bash= shell.

You _cannot_ use spaces in file names.

---++ Installing Components

Enough background, let's get on with the installation.
 
Before we start, it's worth highlighting that:

   * When working with Apache, Cygwin and Cygwin Perl, you should use UNIX format paths i.e. forward slashes. For example, =c:/twiki/pub=
   * Other perl implementations, such as Active State Perl, may have other requirements, though in most cases forward slashes are likely to work best.

---+++ Install Apache
Apache 1.3.x is recommended. Apache 2 really doesn't work very well on the Windows platform.

_The first couple of steps can be shortcut by opening the self-installing executable on the Apache website that installs Apache 1.3.x. The painful details below are mainly helpful when detecting where things are going wrong._

---++++ Download Apache
   * Check at http://httpd.apache.org/ for any security announcements
   * Check the latest 1.3.x version number on [[http://www.apache.org/dist/httpd/Announcement.html][this page]]
   * Find a local mirror using http://www.apache.org/dyn/closer.cgi - choose httpd, then binaries, then win32
   * The file to download is ==apache_1.3.X-win32-x86-no_src.msi== where 'X' is 20 or higher 
      * Note that this is a Microsoft Installer format file (.MSI)

   * __NOTE__: If you are using Windows NT, download the .MSI installer (==instmsi.exe==) from the [[http://httpd.apache.org/dist/httpd/binaries/win32/][Apache Win32 download page]] - this enables you to install .MSI files.  You may need to update the .MSI Installer if you have an old version under NT.
   * __NOTE__: The Apache package itself requires a download of around 2 MB, and up to 10 MB of free disk space once installed

---++++ Install Apache
   * Double-click the .MSI file to run the installer
   * Specify ==c:\== as the installation directory - this actually installs Apache into ==c:\apache== (if you specify =c:\apache=, it installs into =c:\apache\Apache=).  _Putting Apache into =c:\Program Files= is not recommended for easy editing of Apache config files from Cygwin._  
   * On Windows NT/2000/XP you can choose to run Apache as a service or as a normal program - see the Apache docs for details.  
      * __NOTE__: Needs a bit more detail here... See the excellent documents about [[http://httpd.apache.org/docs/windows.html][Installing Apache on Windows]] and [[http://httpd.apache.org/docs/win_service.html][Running Apache as a Windows NT/2000/XP service]].

---++++ Test Apache
   * If necessary, start apache, by selecting 'Start' from the 'Start->Programs->Apache...->Control Apache Server' menu.
   * Point your browser at http://yourdomain.com/ to see the Apache intro page.

Congratulations, you now have a working web server! 

To restart Apache after changing its config, type:

   * =apache -k restart= for standalone Apache process running in another window
   * =apache -k restart -n apache= for Apache running as a Win2000 service (-n gives name of service)

Another useful command is =apache -k stop=.

---+++ Install Cygwin

Head to http://cygwin.com, and click the <img src="%ATTACHURLPATH%/cygwin-icon.gif" alt="cygwin-icon.gif"  width="21" height="21"  /> __Install or update now!__ link.  Save the =setup.exe= in a directory, e.g.  =c:\download\cygwin-dist=. 

Now run the Cygwin =setup.exe= file - this will also install Perl and RCS in one fell swoop.
   * Choose Internet install
   * On first page, accept the defaults (be sure that the __default text file type is Unix__ to avoid problems with attachment uploads, and specify 'install for all users')
   * Select =c:\download\cygwin-dist= as the local package directory, and suitable proxy settings, then pick a local mirror site
   * In the package list screen, hit the *View* button until you get an alphabetical list that says *Full* to the right of the button.
   * Leave the radio button on *Curr* (Current)
      * The Current column shows what's installed on your system (if anything)
   * For each package, make sure the *New* column in the installer has a version number under it. If it says 'Skip' or 'Keep' (meaning it's already installed), single-click that word until a version number is shown.  
   * Make sure you select the following packages - :
      * =bash= 
      * =binutils= 
      * =diffutils=
      * =gcc=
      * =grep=
      * =gzip=
      * =make=
      * =nano= (or =vim= if you prefer the vi editor)
      * =ncftp=
      * =pcre=
      * =perl= (5.8.5-3 or higher)
      * =rcs=  (5.7-3 or higher)
      * =tar=
      * =textutils=
      * =unzip=
      * =w32api=
      * =wget= (optional, useful for Perl install and TWiki:Codev.ReadWriteOfflineWiki)
      * NOTE: Do *not* include =lynx= if you are upgrading from an older Cygwin installation (to avoid annoying DLL messages) - if you want Lynx, read the [[http://cygwin.com/faq/faq.html#SEC32][Cygwin FAQ entry]] and upgrade =libncurses5=.
   * Hit Next to do the installation.  
      * __NOTE__: The mandatory packages require a download of about 12 MB - about half of this is Perl, which would be necessary even without Cygwin, and most of the rest is =gcc=, which is required for simple installation of Perl modules that use the C language.  A default installation of Cygwin 1.5.10, plus required packages, needs around 150 MB of free disk space - if you are tight on disk space or Internet bandwidth, de-select all but the mandatory packages, but if not, there is no harm in downloading more.
      * __NOTE__: The installer keeps a local copy of downloaded files, so it's easy to re-install without re-downloading.  
   * Let the installer create the shortcuts suggested
   * You can always come back and re-run the installer again later if you missed anything.

Environment setup:

   * Set the =HOME= environment variable to =c:\cygwin\home\YOURUSER=, where =YOURUSER= is your userid, e.g. =jsmith= or =administrator=.
      * On Windows NT, XP and 2000: Go into Control Panel, double-click the System icon, and select Advanced, then click Environment Variables.  Under User Variables, click _New..._.  Now type =HOME= (must be upper case) as the variable name, and =c:\cygwin\home\YOURUSER= as the value, and hit OK.
      * On Windows 98 and ME - add to AUTOEXEC.BAT and reboot
   * You can also  set =TEMP= to =c:\temp= at this point, if you prefer this to editing the Cygwin =~/.profile= file.  (=HOME= can't be set in the =~/.profile= file.)
   * Create the =c:\cygwin\home\YOURUSER= directory

---++++ Test Cygwin
   * Launch the desktop icon - this runs the =bash= shell, which has command line editing features
      * Use the cursor up key to recall previous commands - normal PC editing keys can then be used to edit a command
      * TIP: When typing a directory or file name, hit the TAB key after the first few letters of the name - =bash= will 'complete' the name.  If =bash= beeps at you, hit TAB again to see the files/directories that match the name so far, and type a bit more before hitting TAB.  This saves a lot of time!
   * Type =rcs -V= - you should see the RCS version, 5.7
   * Type =perl -v= - you should see cygwin mentioned in the first line, and the Perl version, 5.6.1
   * Type =grep home /etc/passwd= - you should see some output.

The [[http://cygwin.com/cygwin-ug-net/cygwin-ug-net.html][Cygwin User Guide]] is well worth reading for some background on how Cygwin works.

---++++ Configure Cygwin for binary mode
   * __This is very important - omitting this step leads to a partially working system that corrupts RCS files__ - without this, Cygwin tools (including Perl and RCS) will add unwanted carriage returns (Ctrl/M, '\r') to files in an attempt to translate between the Windows and Unix text file formats (Unix text files only use line feeds ('\n').
      * This has been a great time sink, causing numerous subtle problems - see TWiki:Codev.CookbookLineEndingProblems
   * Stay in the Cygwin (bash) shell, and type the following (use only forward slashes, i.e. '/'):
<pre>
   $ <b>mkdir /twiki /c c:/twiki</b>
   $ <b>mount -b -s c:/twiki /twiki</b>
   $ <b>mount -b -s c:/ /c</b>
   $ <b>mount -b -c /cygdrive</b>
   $ <b>mount</b>
   Device              Directory           Type         Flags
   C:\cygwin\bin       /usr/bin            system       binmode
   C:\cygwin\lib       /usr/lib            system       binmode
   C:\cygwin           /                   system       binmode
   c:\twiki            /twiki              system       binmode
   c:                  /c                  system       binmode
</pre>
   * This configures =/twiki= (known as a 'mount point') to map onto =c:/twiki= and for that directory tree to always be in binary mode, and does the same for =/c=, mapping it onto =c:/=. The last-but-one command sets binary as the default for any unmounted drives (e.g. =z:/=, aka =/cygdrive/z=).
   * It is *very important* that all lines in the output of =mount= say 'binmode' under Flags
      * If the lines for =C:\cygwin= directories do not, you should uninstall and then re-install Cygwin to ensure that binary attachment uploads will work.
   * You can now refer to files using Unix paths, e.g. =/twiki/bin/view= or =/c/apache/Announcement= - see the [[http://www.cygwin.com/cygwin-ug-net/using.html][Cygwin documentation]] for more details on this.
   * Now test this, still using the Cygwin shell:
      * Type ==cd /twiki==
      * Type ==echo hi >t== 
      * Type ==cat -v t== - you should see ==hi== as the output
      * If you see filename errors, your *mounts did not work* for some reason - check your typing
      * If you see ==hi^M== as output, *your /twiki directory is not in binary mode*
      * Clean up by doing =rm t=

This setup is written to the Windows registry, so there's no need to put these commands into a =.profile= file.  For more information on binary vs text mode, see this [[http://cygwin.com/cygwin-ug-net/using-textbinary.html][User Guide section]] and this [[http://cygwin.com/faq/faq.html#SEC54][FAQ entry]].

---+++ Configure Apache

The setup given here is fairly simple, in that it allows only TWiki to be served by the web server.  For more complex setups, you can investigate the Alias and <nop>ScriptAlias commands that are left commented out in this configuration. 

Using a suitable text editor (see #TextEditing, above) edit =c:/apache/conf/httpd.conf= as follows - this tells Apache where TWiki lives, and removes the need to tinker with the Windows environment settings.
   * Note the trailing '/' characters in various places - they are important!

   * Create the =c:\temp= directory, by typing =mkdir c:\temp= in a DOS command line window
   * Edit the following lines, some of which already exist in the file:

<verbatim>
# Change this to point to the Apache administrator (e.g. you)
ServerAdmin you@yourdomain.com

# Replaces DocumentRoot "C:/apache/htdocs"
DocumentRoot "C:/twiki"

# Replaces <Directory "C:/apache/htdocs">
<Directory "C:/twiki">

</verbatim>

   * Add the following lines - the Alias and <nop>ScriptAlias lines can be omitted in this setup

<verbatim>
# Alias /twiki/ "C:/twiki/"
# ScriptAlias /twiki/bin/ "C:/twiki/bin/"
<Directory  "C:/twiki/bin/">
    AllowOverride All
    Allow From All
    Options  ExecCGI
    SetHandler cgi-script
</Directory>

# Environment setup required to run Apache as service or as a
# standalone process.
<IfModule mod_env.c>
   # Adjust TZ for your server timezone, e.g. EST5EDT - put the non-daylight-savings
   # timezone code first (e.g. EST or GMT), followed by the number of hours that it's behind GMT 
   # during non-daylight-savings time (use '-5' for timezones in advance of GMT).
   SetEnv TZ GMT0BST
   SetEnv RCSINIT -x,v/
   # Adjust TEMP and TMP for your server and create directories if necessary
   SetEnv TEMP c:/temp
   SetEnv TMP c:/temp
   SetEnv LOGNAME system
   SetEnv HOME c:/twiki
</IfModule>
</verbatim>

Add an <nop>AddHandler line to the ==&lt;IfModule mod_mime.c>== section of =httpd.conf= - this removes the need to rename all the TWiki CGI scripts later in the installation.  
   * Note the trailing '.' on the <nop>AddHandler line.
<verbatim>
#
# Document types
#
<IfModule mod_mime.c>
    # TWiki setup - avoid renaming scripts
    AddHandler cgi-script .
...
</verbatim>

---+++ Configure Cygwin

Open the windows explorer, right click your cygwin directory (c:/path/to/cygwin) and choose "Properties".
Select the "Security" flag and set the permissions as follows:

   1 uncheck 'inherit permissions', slap the 'copy existing' button when prompted
   1 for the 'Everyone' group, uncheck Write access and Full Control
   1 Add the groups CREATOR OWNER, SYSTEM and give them Full Control
   1 Add the users Administrator, Your_Name and give them Full Control

---+++ Install Perl modules

Some additional Perl modules are needed, above and beyond the standard modules installed with Cygwin.  Fortunately, there is an automated tool that makes it easy to do this - it's called =cpan=, and goes to the Perl module archive site, http://www.cpan.org/, to download all required modules, and then build and install them.

__Note:__ if you are unable to get =cpan= working in your environment, don't panic; you can still install the modules manually. In this case, follow the instructions in [[#CPANTheHardWay][CPAN: The Manual Way]].

First of all, you need to get the =cpan= tool configured and working - this is only necessary once.  From the Cygwin shell, type the following (putting the =export= command in =~/.profile= is recommended to make this setting persistent).  Without the TEMP variable, some modules may fail to install on Windows 2000 or XP and higher.
<pre>
$ <b>export TEMP=/c/temp</b>
$ <b>cpan</b>
</pre>
<i>Lots of questions about configuration and preferences - just hit Enter until you 
get to the questions about mirror sites, but answer the questions about FTP proxies etc
 if you are behind a proxy-based firewall.  The CPAN tool will fetch a series of files, 
some quite large, as part of this setup process, so be patient...</i>

__NOTE__: If you are behind a non-proxy-based firewall that requires the use of passive FTP, the initial downloads of files using Net::FTP may appear to hang - just wait 5 or more minutes, however, and the CPAN tool should eventually hit on =ncftpget=, which is part of Cygwin and does work OK.  If this doesn't work and you are behind a typical NAT-based firewall, try doing the following at the Cygwin shell before running =cpan= - this forces Net::FTP to use passive FTP, letting it get through such firewalls:
<pre>
$ <b>export FTP_PASSIVE=1</b>
</pre>
If this works, add this line to your =~/.profile= file for future use.

Once some initial files are downloaded, you are asked to select your continent and country, and then mirror sites - just type the number of the mirror sites you want to use (pick a few in case one is down):
<pre>
...
(28) Turkey
(29) Ukraine
(30) United Kingdom

Select your country (or several nearby countries) [] 30

(1) ftp://cpan.teleglobe.net/pub/CPAN
(2) ftp://ftp.clockerz.net/pub/CPAN/
(3) ftp://ftp.demon.co.uk/pub/CPAN/
(4) ftp://ftp.flirble.org/pub/languages/perl/CPAN/
(5) ftp://ftp.mirror.ac.uk/sites/ftp.funet.fi/pub/languages/perl/CPAN/
(6) ftp://ftp.plig.org/pub/CPAN/
(7) ftp://mirror.uklinux.net/pub/CPAN/
(8) ftp://sunsite.doc.ic.ac.uk/packages/CPAN/
(9) ftp://usit.shef.ac.uk/pub/packages/CPAN/
Select as many URLs as you like,
put them on one line, separated by blanks [] 4 7 8

Enter another URL or RETURN to quit: []
New set of picks:
  ftp://ftp.flirble.org/pub/languages/perl/CPAN/
  ftp://mirror.uklinux.net/pub/CPAN/
  ftp://sunsite.doc.ic.ac.uk/packages/CPAN/

</pre>

Eventually, you'll get to the =cpan= installer's shell prompt, where you need to install a few modules - the tool will do all the work for you.  
   * __NOTE__: You will need to have previously installed the Cygwin =make= and =gcc= packages, which are required by the CPAN installer (=gcc= is required for modules that include C language code) - you can install them now by launching Cygwin's =setup.exe= from =c:/download/cygwin-dist= (no need to exit the CPAN installer).

<pre>
cpan shell -- CPAN exploration and modules installation (v1.59_54)
cpan> <b>install Net::SMTP</b>
<i>May already be installed - if it is, try 'force install', since it's useful to be able to set
firewall and passive FTP configuration when using Net::FTP.  <b>Make sure you answer 'Y' to the question 
about whether you want to configure this package.</b></i>
cpan> <b>install Digest::SHA1</b>
<i>Lots of output about how CPAN finds, builds and installs the module - watch for 
any errors, though it should work fine if you have installed the Cygwin packages listed above (particularly 'gcc' and 'make').</i>
cpan> <b>install MIME::Base64</b>
<i>May already be installed.</i>

</pre>

#CPANTheHardWay
---++++ CPAN: The Manual Way
If you find that =cpan= doesn't work for you, perhaps because you are behind an uncooperative corporate firewall, you may have to fall back on installing modules manually. In this case, you need to read the [[http://www.cpan.org/modules/INSTALL.html CPAN INSTALL page]] and visit the [[http://www.cpan.org/ CPAN search site]] to search for each module you require. Usually installation simply involves downloading the module distribution into a temporary directory and unpacking it (a =.tar.gz= or =.tgz= file is unpacked using =tar zxvf <i>file</i>=). Then do the following:
<verbatim>
$ perl Makefile.PL
$ make
$ make test
$ make install
</verbatim>
The =make test= step should *not* be skipped - for example, one known problem is with the =Digest::SHA1= module on Windows NT, which does not pass its tests and does not work. This causes problems with password encoding. In this event you can use another encoding scheme or switch to unencoded passwords. There may be other problems on the various Windows configurations, and you can save yourself a lot of time by running the tests.

---+++ Install TWiki

Finally you are ready to install TWiki! Do this by following the instructions in TWikiInstallationGuide. The webserver should already be configured to run =configure=, but *before you do so you will have to edit the "shebang" lines* in the scripts in =bin=. This is required so the Apache server knows what interpreter (perl) to use with the scripts.
   * You *must* use the Cygwin shell to do this (unless you are a Perl expert) - *don't use* the Windows command shell, cmd.exe (aka DOS Prompt)      
   * Then do the following, which quickly edits the 19 or so files, using Perl - the important lines are in bold.
   * Type the Perl line *very carefully*

<pre>
$ <b>cd /twiki/bin</b>

$ ls
attach   geturl         oops     rdiff     save        testenv  viewfile
changes  installpasswd  passwd   register  search      upload
edit     mailnotify     preview  rename    statistics  view

$ <b>mkdir .backup </b>
$ <b>cp * .backup</b>

$ head -1 view
#!/usr/bin/perl -wT

$ <b>perl -pi~ -e 's;#!/usr/bin/perl;#!c:/cygwin/bin/perl;' *[a-z]</b>

$ <b>head -1 view</b>
#!c:/cygwin/bin/perl -wT

$ ls
attach    geturl          oops      rdiff      save         testenv   viewfile~
attach~   geturl~         oops~     rdiff~     save~        testenv~  view~
changes   installpasswd   passwd    register   search       upload
changes~  installpasswd~  passwd~   register~  search~      upload~
edit      mailnotify      preview   rename     statistics   view
edit~     mailnotify~     preview~  rename~    statistics~  viewfile

</pre>
Note also that to set file permissions you have to use the cygwin 'chmod' command; for example,
<verbatim>
$ chmod -R twiki/775 *
</verbatim>

---++ Testing your TWiki installation

It is important to test your TWiki installation before you release it to other users or put any significant data into it.

Here are the main things to test:

   * Page viewing (=view= script) - click around a few pages and make sure the links are OK
   * RCS diffs (=rdiff= script) - click on the Diffs link and on the '>' links at bottom of page
   * Edit a page, and register as a new user - tests page creation, use of =register= script to create a new user entry in =/twiki/data/.htpasswd= (the Apache password file), ability to send email via Net::SMTP, and whether =SMTPMAILHOST= was set correctly in TWikiPreferences (if it is unset it will not use Net::SMTP and will almost inevitably fail silently).
      * If you get a failure to register or send email, check the Apache error log, and that all CPAN modules were installed correctly in Step 6, _Installing required Perl modules_.
      * Try typing =tail -30 /c/apache/logs/error_log= to see last 30 errors from Apache
   * Edit a page - check revision increased and set to current date/time
   * Edit the same page using another browser or PC, logging in as a different user - check there's a lock message (which you can override) and no double lines
   * Check the Apache =error_log= file to see if there are any RCS errors so far
   * Index - tests whether =ls= and =grep= are working
   * Search - more tests for whether =ls= and =grep= are working
   * Attachments - tests access to =/twiki/pub= directory.
      * Try a binary attachment upload and check the number of bytes in the file has not changed - if it has, see the *Install Cygwin* section's note on the default text file type.
   * Check the Apache =error_log= file again

---+++ Troubleshooting 

If anything doesn't work, go back and check the configuration of the Apache =httpd.conf= file, and =[[%SCRIPTURL%/configure%SCRIPTSUFFIX%][configure]]=.  Have a look at the Apache error log, =c:/apache/logs/error_log=, and the TWiki error log, =/twiki/data/log*.txt=, and if necessary enable debugging on selected scripts (the commands are right at the top of each script) - the results go into =/twiki/data/debug.txt=.  There is also a =/twiki/data/warning.txt= file that contains less serious messages.

See TWiki:Codev.TWikiPatches in case there are patches (i.e. specific code changes) for particular problems that may affect you (e.g. TWiki:Codev.ChangePasswordOnWin2K).

If you find that the Index feature doesn't work, or topic name searches fail, you should check you have set =$egrepCmd= and =$fgrepCmd= correctly, as mentioned above.

---+++ Permissions

TWiki:Codev.CygWin has several models for how it does security:

   * By default, it only implements the Unix 'write' and 'execute' permissions bits - the former is controlled by the Windows Read-Only attribute, while the latter is automatically assigned to files named *.exe or *.com, and to files whose first line is a shebang (i.e. =#!/bin/something=).  This is what has been used for this cookbook.
   * You can enable the 'ntea' or 'ntsec' models, which will increase security but are also likely to introduce permission problems.

I have not had any problems with TWiki permissions on Windows, unlike Linux/Unix, which is probably because I'm using the default security model for Cygwin.  If you use the other models, you may still be OK if you have local admin rights, and Apache is running as the SYSTEM user (which it uses if started as a service).  If you do have trouble in this area, see the TWikiInstallationGuide's advice, some of which will apply to TWiki:Codev.CygWin, and log any issues in TWiki:Codev.WindowsInstallCookbookComments.

---++ Next Steps

See the TWikiInstallationGuide for other setup. In particular, you'll probably want to refer to the [[TWikiInstallationGuide#Enabling_Authentication_of_Users][section on basic authentication]] - remember to use =c:/twiki= type filenames (i.e. Windows format) since you are using Apache for Windows.  

---+++ Improved authentication 

You may want to investigate TWiki:Codev.WindowsInstallModNTLM, which describes how to add an Apache module so that TWiki:Codev.InternetExplorer users are automatically authenticated based on their Windows domain login - this avoids TWiki:Codev.GettingTheUsernameWrong and TWiki:Codev.ForgettingPasswords, which are usually very common among TWiki users.

As of the TWiki:Codev.TWikiRelease01Sep2004, there is built in support for several apache based authentication modes. The TWikiInstallationGuide has step-by-step instructions. 

---+++ Improved performance

See TWiki:Codev.WindowsModPerlInstallCookbook and TWiki:Codev.ModPerl for information on installing TWiki under Apache's =mod_perl= - this is somewhat more complex and follows a different model, so it's best to get some experience with TWiki, Apache and Perl first.

%META:FILEATTACHMENT{name="cygwin-icon.gif" attr="h" comment="Cygwin icon" date="1092612100" path="C:\Data\Temp\cygwin-icon.gif" size="132" user="TWikiContributor" version="1.1"}%
