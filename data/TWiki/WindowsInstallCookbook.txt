%META:TOPICINFO{author="PeterThoeny" date="1043918229" format="1.0" version="1.1"}%
%TOC%
%STARTINCLUDE%
---# Windows Install Cookbook 

---++ Introduction

This cookbook is intended to get you up and running with TWiki on Windows quickly, with as few problems as possible.  The 'cookbook' approach is simply to restrict the many choices that someone installing TWiki must make, so that a reasonably well-defined procedure can be followed - new users can simply follow the steps, while experts can use this as more of a guideline. Please read TWiki:Codev.WindowsModPerlInstallCookbook in case you use mod_perl.

There is a huge volume of existing material on TWiki about installing on Windows, and I'm indebted to the many contributors for this - the aim of this cookbook is to synthesise the many tips into a recipe that works.

	* __NOTE__: This cookbook is probably incomplete (e.g. it doesn't cover authentication setup), but it has now been successfully tried out by a few people - it is quite accurate and should get you started if you follow the instructions. Please consider it *beta* quality, and provide feedback in TWiki:Codev.WindowsInstallCookbookComments.
	* __NOTE__: You will get the best results from following this cookbook *exactly*, using the same directories etc - however, if you really do need to vary things, it should be fairly obvious what to do.

-- Main.RichardDonkin - 24 Feb 2002

---++ Recent updates

	* 30 Nov 2002 - added =binutils= to list of Cygwin packages, and added warning not to use Apache 2.0
	* 20 Nov 2002 - update to avoid TWiki:Support.InstallDigestSHA1Fails when installing Digest::SHA1 on Windows 2000
	* 12 Nov 2002 - setting =SMTPMAILHOST= for user registration and notification
	* 03 Sep 2002 - linked to TWiki:Codev.WindowsModPerlInstallCookbook
	* 20 Jul 2002 - added flags to =grep= commands in =TWiki.cfg=
	* 27 Jun 2002 - more updates to list of required Cygwin packages
	* 20 Jun 2002 - added creation of =c:/twiki= directory
	* 17 Jun 2002 - updates to list of required Cygwin packages
	* 15 Jun 2002 - various notes on Cygwin installation and troubleshooting: use of 'Unix' as default text file type (i.e. for mounting =c:/cygwin= directories) is essential for binary attachment uploads to work properly
	* 27 Apr 2002 - update to settings for =egrep= and =fgrep= on some Cygwin versions (fix from TWiki:Main.DavidLeBlanc)
	* 21 Apr 2002 - updates on download sizes and free disk space requirements, improved post-installation [[#Testing_your_TWiki_installation][testing]], and brief coverage of  TWiki:Codev.WindowsInstallModNTLM to avoid TWiki:Codev.ForgettingPasswords
	* 18 Apr 2002 - updates on Apache installation, setting TZ variable, and creation of =c:\temp=, based on comments by TWiki:Main.MaryDeMarco
	* 3 Apr 2002 - added =pcre= to list of Cygwin packages (required by =grep=), fixed bug in Apache config (Apache doesn't allow '#' comments on same line as config)
	* 19 Mar 2002 - comment about Windows 98
	* 18 Mar 2002 - fix for =register= script committed to TWiki:Codev.TWikiAlphaRelease - most users can ignore this for now, but the edits in step 5 will eventually go away
	* 14 Mar 2002 - minor fix to section on Apache environment
	* 13 Mar 2002 - added a link to another Windows text editor
	* 4 Mar 2002 - changed status to beta, notes about using spaces in file names, pointer on TWiki authentication setup, overview of Cygwin permissions and security issues
	* 3 Mar 2002 - minor update to include =uname -a= command to check Cygwin DLL version, and delete Apache config's <nop>PassEnv line
	* 27 Feb 2002 - various improvements to Cygwin and Perl Net::SMTP installation sections, based on comments in TWiki:Codev.WindowsInstallCookbookComments by TWiki:Main.MartinWittmann.  Also linked to a Windows editor that understands Unix/Cygwin file formats.
	* 25 Feb 2002 - clarified changes required to =register=, fixed minor typo in Cygwin binary mode section, after beta testing by TWiki:Main.JerryWard (thanks!)

---++ Scope

This document covers installation of the TWiki *Dec 2001* release in the following environment - if you want to use a different environment, feel free to use this as a guideline only.

| *Component* | *Name, version* | *Comment* |
| Operating System | Windows 2000 | Should also work for Windows NT |
| Web Server | Apache 1.3.26 | Windows-specific security holes fixed in this build <br />(check latest version at http://httpd.apache.org, but *don't* use Apache 2.0 yet) |
| Unix tools | Cygwin 1.3.9 | Simplest way to get a whole set of required tools |
| Perl| Cygwin perl-5.6.1-2 | Comes with Cygwin |
| RCS | Cygwin rcs-5.7-2 | Comes with Cygwin, includes a file corruption bugfix |

Why this choice of packages?  Because I've tried them, and they work well, without requiring a complicated setup... In particular, Apache is the commonest choice for TWiki on Unix/Linux, Cygwin Perl is very close to Unix Perl, and the Cygwin RCS is regularly updated, with a recent TWiki-relevant bug fix in Feb 2002.	Cygwin also lets you install the Unix tools, Perl and RCS in a single step, saving quite a lot of time.

More recent minor versions should be OK, but they can introduce bugs.  

%N% Major version upgrades, such as Apache 2.0 and Perl 5.8, are very likely to cause problems - for example, Apache 2.0 is unable to authenticate (see TWiki:Support.FailedAuthenticationWithApache2OnWinNT) users created by the current TWiki user registration script (due to a feature being removed in 2.0), and Perl 5.8 may introduce issues due to its Unicode features.  Even though the Apache group says that Apache 2.0 is the best version, that's not true for TWiki.

---+++ Alternatives 

There are doubtless other combinations of components that may work - in particular:

	* TWiki:Codev.ActiveState Perl involves only minor changes to =TWiki.cfg=, and is probably a simpler choice if you need an easy way to install mod_perl (see TWiki:Codev.ModPerl).  TWiki:Codev.ActiveState Perl can be substituted without too much hassle, and in fact the same =TWiki.cfg= can be used for both TWiki:Codev.ActiveState and Cygwin Perl.  
	* Using a different web server is certainly possible, but the setup required for each webserver varies greatly (see TWiki:Codev.TWikiOnWindows for pages about specific web servers).  You may find it easiest to get a working system with Apache and then switch over to another web server.
	* Windows NT works fine.
	* Windows XP should work in theory, but see the Apache site for details of XP-related bugs, and other packages' sites for any peculiarities of XP.  Please report any XP installations on TWiki:Codev.TWikiOnWindowsKnownConfigurations, and comment at TWiki:Codev.WindowsInstallCookbookComments.
	* Windows 98 is reported to work for at least one person - see TWiki:Support.TwikiOnWindowsBinaryAttachments.

Covering the whole range of additional possibilities, particularly web servers, would make this cookbook too complex, and is best handled as a separate activity.

---++ Checking versions

If you already have some of these add-ons installed, here's how to check the versions - this assumes you have TWiki:Codev.CygWin already installed:

<pre>
	$ <i>: Cygwin DLL version is the number in 1.3.x format</i>
	$ uname -r
	$ less c:/<i>your-apache-dir</i>/Announcement
	$ perl -v
	$ rcs -V
</pre>


If you have an older version of any component, do yourself a favour and *upgrade it* as part of the install process.

---++ Pre-requisites and upgrades

You will need to have local administrator rights and to be comfortable with Windows administration.

This cookbook is intended for a clean install, i.e. none of these components are already installed.  However, since Cygwin and Apache's installation process is fairly upgrade-friendly, upgrades should work as well - take backups of all your data and config files first, though!

---+++ Text editing

Editing Cygwin files is best done with an editor that can handle Unix file format (see the Cygwin binary mode section below) - the installation process includes =nano=, a non-GUI editor, but if you prefer to use a GUI editor, you should first install PFE, a freeware editor that supports Unix format files.  PFE is available on [[http://download.cnet.com/downloads/0-4003619-100-904159.html?tag=st.dl.10001-103-1.lst-7-1.904159][download.com]] and [[http://www.simtel.net/pub/dl/11983.shtml][Simtel]].

Another good TWiki:Codev.OpenSource editor is <nop>SciTE (aka <nop>WSciTE), available at http://www.scintilla.org/SciTE.html.

---++  The Unix/Windows Environment

It's a little known fact that you can use pathnames such as ==c:/apache== almost everywhere in Windows - try it in a File Open dialogue box.  The main exception is the Win2000 =cmd.exe= command line shell - here, you must use double quotes around forward slashes, e.g. =dir "c:/apache"= will work fine.

The reason this matters is that =='\'== is a special character to Perl and other tools, so it's much easier to use =='/'== everywhere.  

---+++ The Cygwin environment

TWiki:Codev.CygWin is a Unix-like environment for Windows - many of its tools support the =c:/apache= format, but it also provides a more Unixlike syntax, e.g. =/usr/bin/rcs.exe=, because some Unix tools ported onto Cygwin only support the Unix format.

When you launch a Cygwin shell, your existing PATH variable is translated from the Windows format to the Unix format, and the ';' separators in the Windows PATH are changed into ':' separators as required by Unix.  A Cygwin tool (e.g. Cygwin Perl or Cygwin RCS) will always use the Unix PATH format, and will accept Unix format pathnames.

---+++ The Apache environment

Apache runs as a native Windows process and has nothing to do with Cygwin (at least the version used in this cookbook doesn't).  Hence it supports c:/ pathnames in its config files and the first line of Perl CGI scripts.

If you need to use spaces in file names (not recommended), put double quotes around the file name in the =httpd.conf= file. There have been some security-related bugs in Apache with long pathnames, which are a bit more likely if you use spaces, so it's best to just avoid long names and using spaces.

---+++ The Perl environment

Once Perl has been launched by Apache, it is in Cygwin mode, and so is everything it launches, including =ls=, =egrep=, and RCS tools that it (typically) launches with the =bash= shell.

If you need to use spaces in file names (not recommended), you _may_ be able to put double quotes around the file name in the =TWiki.cfg= file - however, it's not clear whether all the TWiki code would work with this.


---++ Installing Components

Enough background, let's get on with the installation.
 
---+++ TWiki (part 1)

Head to http://twiki.org, click the download link, and fill in the form to request a URL for download. You'll get an automated email, which should arrive by the time you need it.

---+++ Apache

*1. Download Apache*
	* Check at http://httpd.apache.org/ for any security announcements
	* Check the latest 1.3.x version number on [[http://www.apache.org/dist/httpd/Announcement.html][this page]]
	* Find a local mirror using http://www.apache.org/dyn/closer.cgi - choose httpd, then binaries, then win32
	* The file to download is ==apache_1.3.X-win32-x86-no_src.msi== where 'X' is 20 or higher 
		* Note that this is a Microsoft Installer format file (.MSI) - this is supported by Windows 2000.

  
	* __NOTE__: If you are using Windows NT, download the .MSI installer (==instmsi.exe==) from the [[http://httpd.apache.org/dist/httpd/binaries/win32/][Apache Win32 download page]] - this enables you to install .MSI files.  You may need to update the .MSI Installer if you have an old version under NT.
	* __NOTE__: The Apache package itself requires a download of around 2 MB, and up to 10 MB of free disk space once installed.

*2. Install Apache*
	* Double-click the .MSI file to run the installer
	* Specify ==c:\== as the installation directory - this actually installs Apache into ==c:\apache== (if you specify =c:\apache=, it installs into =c:\apache\Apache=).  _Putting Apache into =c:\Program Files= is not recommended for easy editing of Apache config files from Cygwin._  
	* You can choose to run Apache as a Win2000 service or as a normal program - see the Apache docs for details.  
		* __NOTE__: Needs a bit more detail here... See the excellent documents about [[http://httpd.apache.org/docs/windows.html][Installing Apache on Windows]] and [[http://httpd.apache.org/docs/win_service.html][Running Apache as a Windows NT/2000 service]].

*3. Test Apache*
	* If necessary, start apache, either as a Win2000 service (using Admin Tools | Computer Management, or by typing =apache -k start -n apache=) or standalone (by typing =apache -k start=)
	* Point your browser at http://yourdomain.com/ to see the Apache intro page.

Congratulations, you now have a working web server! 

To restart Apache after changing its config, type:

	* =apache -k restart= for standalone Apache process running in another window
	* =apache -k restart -n apache= for Apache running as a Win2000 service (-n gives name of service)

Another useful command is =apache -k stop=.

---+++ Cygwin, Unix tools, Perl and RCS

*4. Install Cygwin*

Head to http://cygwin.com, and click the __Install Cygwin Now__ link.  Save the =setup.exe= in a directory, e.g.  =c:\download\cygwin-dist=. 

Now run the Cygwin =setup.exe= file - this will also install Perl and RCS in one fell swoop.
	* Choose Internet install
	* On first page, accept the defaults (be sure that the __default text file type is Unix__ to avoid problems with attachment uploads, and specify 'install for all users')
	* Select =c:\download\cygwin-dist= as the local package directory, and suitable proxy settings, then pick a local mirror site
	* In the package list screen, hit the *View* button until you get an alphabetical list that says *Full* to the right of the button.
	* Leave the radio button on *Curr* (Current)
		* The Current column shows what's installed on your system (if anything)
	* For each package, make sure the *New* column in the installer has a version number under it. If it says 'Skip' or 'Keep' (meaning it's already installed), single-click that word until a version number is shown.  Make sure you select the following packages:
		* =bash=
		* =binutils=
		* =diffutils=
		* =gcc=
		* =grep=
		* =gzip=
		* =make=
		* =nano=
		* =ncftp=
		* =pcre=
		* =perl= (5.6.1-2 or higher)
		* =rcs=  (5.7-2 or higher)
		* =tar=
		* =textutils=
		* =unzip=
		* =w32api=
		* =wget= (optional, useful for Perl install and TWiki:Codev.ReadWriteOfflineWiki)
		* NOTE: Do *not* include =lynx= if you are upgrading from an older Cygwin installation (to avoid annoying DLL messages) - if you want Lynx, read the [[http://cygwin.com/faq/faq.html#SEC32][Cygwin FAQ entry]] and upgrade =libncurses5=.
	* Hit Next to do the installation.  
		* __NOTE__: The mandatory packages require a download of about 12 MB - about half of this is Perl, which would be necessary even without Cygwin, and most of the rest is =gcc=, which is required for simple installation of Perl modules that use the C language.  Something like 20 to 30 MB of free disk space should be enough for Cygwin, but I didn't test this (try a =du -k /= after a new install and let me know the last figure).
		* __NOTE__: The installer keeps a local copy of downloaded files, so it's easy to re-install without re-downloading.  
	* Let the installer create the shortcuts suggested

*5. Test Cygwin*
	* Launch the desktop icon - this runs the =bash= shell, which has command line editing features
		* Use the cursor up key to recall previous commands - normal PC editing keys can then be used to edit a command
		* TIP: When typing a directory or file name, hit the TAB key after the first few letters of the name - =bash= will 'complete' the name.  If =bash= beeps at you, hit TAB again to see the files/directories that match the name so far, and type a bit more before hitting TAB.  This saves a lot of time!
	* Type =rcs -V= - you should see the RCS version, 5.7
	* Type =perl -v= - you should see cygwin mentioned in the first line, and the Perl version, 5.6.1
	* Type =grep home /etc/passwd= - you should see some output.

The [[http://cygwin.com/cygwin-ug-net/cygwin-ug-net.html][Cygwin User Guide]] is well worth reading for some background on how Cygwin works.

*6. Configure Cygwin for binary mode*
	* __This is very important - omitting this step leads to a partially working system that corrupts RCS files__ - without this, Cygwin tools (including Perl and RCS) will add unwanted carriage returns (Ctrl/M, '\r') to files in an attempt to translate between the Windows and Unix text file formats (Unix text files only use line feeds ('\n').
		* This has been a great time sink, causing numerous subtle problems - see TWiki:Codev.CookbookLineEndingProblems
	* Stay in the Cygwin (bash) shell, and type the following (use only forward slashes, i.e. '/'):
<pre>
	$ <b>mkdir /twiki /c c:/twiki</b>
	$ <b>mount -b -s c:/twiki /twiki</b>
	$ <b>mount -b -s c:/ /c</b>
	$ <b>mount -b -c /cygdrive</b>
	$ <b>mount</b>
	Device				  Directory			  Type			Flags
	C:\cygwin\bin		 /usr/bin				system		 binmode
	C:\cygwin\lib		 /usr/lib				system		 binmode
	C:\cygwin			  /						 system		 binmode
	c:\twiki				/twiki				  system		 binmode
	c:						/c						system		 binmode
</pre>
	* This configures =/twiki= (known as a 'mount point') to map onto =c:/twiki= and for that directory tree to always be in binary mode, and does the same for =/c=, mapping it onto =c:/=. The last-but-one command sets binary as the default for any unmounted drives (e.g. =z:/=, aka =/cygdrive/z=).
	* It is *very important* that all lines in the output of =mount= say 'binmode' under Flags
		* If the lines for =C:\cygwin= directories do not, you should uninstall and then re-install Cygwin to ensure that binary attachment uploads will work.
	* You can now refer to files using Unix paths, e.g. =/twiki/bin/view= or =/c/apache/Announcement= - see the [[http://www.cygwin.com/cygwin-ug-net/using.html][Cygwin documentation]] for more details on this.
	* Now test this, still using the Cygwin shell:
		* Type ==cd /twiki==
		* Type ==echo hi >t== 
		* Type ==cat -v t== - you should see ==hi== as the output
		* If you see filename errors, your *mounts did not work* for some reason - check your typing
		* If you see ==hi^M== as output, *your /twiki directory is not in binary mode*
		* Clean up by doing =rm t=

This setup is written to the Windows registry, so there's no need to put these commands into a =.profile= file.  For more information on binary vs text mode, see this [[http://cygwin.com/cygwin-ug-net/using-textbinary.html][User Guide section]] and this [[http://cygwin.com/faq/faq.html#SEC54][FAQ entry]].

---+++ TWiki (part 2)

*7. Download TWiki*

Download the latest TWiki release (this cookbook is tested with the ==Dec 2001== release) from the URL that %MAINWEB%.PeterThoeny sent you, and save it in the =c:/twiki= directory.

*8. Install TWiki*

Unzip the ZIP file under =c:/twiki= using [[http://www.winzip.com/][<nop>WinZip]], or by going into Cygwin and doing the following - you can hit the =TAB= key to complete filenames after you've typed the first part:
<pre>
	$ <b>cd /twiki</b>
	$ <b>unzip TWiki20011201.zip</b>
</pre>

---++ Configuring components

Now that all the components are installed, you need to configure them.

---+++ Configuring Apache

The setup given here is fairly simple, in that it allows only TWiki to be served by the web server.  For more complex setups, you can investigate the Alias and <nop>ScriptAlias commands that are left commented out in this configuration. 

	* __NOTE__: This needs reviewing for security holes and to ensure nothing is missed, though this config does work.

*1. Configure Apache (part 1)*

Using a suitable text editor (e.g. Cygwin's ='nano'=, or the Windows [[#Text_editing][PFE editor]], unless you already know ='vi'=), edit =c:/apache/conf/httpd.conf= as follows - this tells Apache where TWiki lives, and removes the need to tinker with the Windows 2000 environment settings.
	* If you are using nano, *always* launch it with =nano -w filename= - this turns off wrapping of long lines.
	* Note the trailing '/' characters in various places - they are important!

	* Create the =c:\temp= directory, by typing =mkdir c:\temp= in a DOS command line window
	* Edit the following lines, some of which already exist in the file:

<verbatim>
# Change this to point to the Apache administrator (e.g. you)
ServerAdmin you@yourdomain.com

# Replaces DocumentRoot "C:/apache/htdocs"
DocumentRoot "C:/twiki"

# Replaces <Directory "C:/apache/htdocs">
<Directory "C:/twiki">

</verbatim>

	* Add the following lines - the Alias and <nop>ScriptAlias lines can be omitted in this setup

<verbatim>
# Alias /twiki/ "C:/twiki/"
# ScriptAlias /twiki/bin/ "C:/twiki/bin/"
<Directory  "C:/twiki/bin/">
	 # RD: Changed None to All in next line, to enable .htaccess
	 AllowOverride All
	 Allow From All
	 Options  ExecCGI
	 SetHandler cgi-script
</Directory>

# Environment setup required to run Apache as service or as a
# standalone process.
<IfModule mod_env.c>
	# Adjust TZ for your server timezone, e.g. EST5EDT - put the non-daylight-savings
	# timezone code first (e.g. EST or GMT), followed by the number of hours that it's behind GMT 
	# during non-daylight-savings time (use '-5' for timezones in advance of GMT).
	SetEnv TZ GMT0BST
	SetEnv RCSINIT -x,v/
	# Adjust TEMP and TMP for your server and create directories if necessary
	SetEnv TEMP c:/temp
	SetEnv TMP c:/temp
	SetEnv LOGNAME system
	SetEnv HOME c:/twiki
</IfModule>
</verbatim>

*2. Configure Apache (part 2)*

Add an <nop>AddHandler line to the ==&lt;IfModule mod_mime.c>== section of =httpd.conf= - this removes the need to rename all the TWiki CGI scripts later in the installation.  
	* Note the trailing '.' on the <nop>AddHandler line.
<pre>
#
# Document types
#
&lt;IfModule mod_mime.c>
	 # TWiki setup - avoid renaming scripts
	 <b>AddHandler cgi-script .</b>
&lt;/IfModule>
</pre>

---+++ Configuring TWiki

*3. Configure TWiki*

Edit the TWiki config file, =c:/twiki/lib/TWiki.cfg= (or in Cygwin terms, =/twiki/lib/TWiki.cfg=) as follows:

	* __NOTE__: It should be possible to use =c:/twiki= format pathnames for Cygwin, given the above binmode setup, but I have not tested this fully - a Cygwin Perl test script does generate binary mode files in this configuration, so it should work with RCS as well (really need a small RCS file corruption test case).  Watch out for RCS file corruption carefully if you do try =c:/twiki= pathnames with Cygwin, and do report your experiences... 
	* __NOTE__: Some recent versions of Cygwin (e.g. 1.3.10) seem to create 'symbolic links' from =fgrep= and =egrep= to =grep=, requiring the settings for these commands to point directly to =grep= (with suitable flags to provide =fgrep= and =egrep= behaviour).

<pre>
# variables that need to be changed when installing on a new server:
# ==================================================================
#						 %WIKIHOMEURL% : link of TWiki icon in upper left corner :
$wikiHomeUrl		= <b>"http://yourdomain.com/bin/view"</b>;
#						 Host of TWiki URL :	 (Example "http://myhost.com:123")
$defaultUrlHost	= <b>"http://yourdomain.com"</b>;
#						 %SCRIPTURLPATH% : cgi-bin path of TWiki URL:
$scriptUrlPath	 = <b>"/bin"</b>;
#						 %PUBURLPATH% : Public data path of TWiki URL (root of attachments) :
$pubUrlPath		 = <b>"/pub"</b>;

# NOTE: Next three settings should be valid absolute pathnames using Cygwin; if using
# TWiki:Codev.ActiveState Perl, use z:/twiki format pathnames if your TWiki directory is not on C:.

#						 Public data directory, must match $pubUrlPath :
$pubDir			  = <b>"/twiki/pub"</b>;
#						 Template directory :
$templateDir		= <b>"/twiki/templates"</b>;
#						 Data (topic files) root directory :
$dataDir			 = <b>"/twiki/data"</b>;

....

#						 Set ENV{'PATH'} explicitly for taint checks ( #!perl -T option ) :
#						 (Note: PATH environment variable is not changed if set to "")

# On Windows, $safeEnvPath needs only one component, the directory where RCS is installed
# - used by 'rcsdiff' to run 'co' program, so PATH must be correct.

# Unix/Linux setting:
# $safeEnvPath		= "/bin:/usr/bin";

# Using Cygwin perl, so can use Unix-like paths, with ':' as separator.
# Note that /usr/bin and /bin are identical due to default /usr/bin mount
# in Cygwin.  Must NOT use 'c:/foo' type paths, as ':' is taken as separator
# meaning that 'c' is interpreted as a pathname, giving Perl taint error.
$safeEnvPath		= <b>"/bin"</b>;

# If using ActiveState perl, use Windows paths instead
# $safeEnvPath		= "c:/cygwin/bin";

...

#						 RCS directory (find out by 'which rcs') :
$rcsDir			  = <b>"c:/cygwin/bin"</b>;

...

#						 Unix egrep command :
$egrepCmd			= <b>"/bin/grep -E"</b>;
#						 Unix fgrep command :
$fgrepCmd			= <b>"/bin/grep -F"</b>;
</pre>

For the cookbook install using Cygwin Perl, there's no more =TWiki.cfg= editing to be done, so you can get onto the next section.  

	* For TWiki:Codev.ActiveState Perl, you need to make these additional edits further down the file - this is the only place where backslashes are needed.  (See TWiki:Codev.CookbookActivePerlSetup for some extra Perl setup that should remove the need for these edits.)

<verbatim>
#						 NOTE: When using ActiveState Perl, you must specify
#						 a full Windows-style pathname, using '\\' for backslashes,
#						 for the ls, egrep and fgrep commands, because Cygwin's shell
#						 is not used - forward slashes are OK in Windows everywhere
#						 except in the cmd.exe shell. Drive letters are OK - e.g.
#						 'c:\\foo\\ls' will work.  When using Cygwin perl, just
#						 use the default '/bin/ls' type settings.
#
#						 Unix ls command :
$lsCmd				= "c:\\cygwin\\bin\\ls";
#						 Unix egrep command :
$egrepCmd			= "c:\\cygwin\\bin\\grep";
#						 Unix fgrep command :
$fgrepCmd			= "c:\\cygwin\\bin\\grep";
</verbatim>



---++ Editing the CGI scripts

*4. Editing the Shebang lines*

Now to edit the curiously named 'shebang lines' at the top of the TWiki CGI scripts...  
	* You *must* use the Cygwin shell to do this (unless you are a Perl expert) - *don't use* the Windows command shell, cmd.exe (aka DOS Prompt)		
	* Then do the following, which quickly edits the 19 or so files, using Perl - the important lines are in bold.
	* Type the Perl line *very carefully*
		* If you do mis-type the ==perl== line, you can restore from the =.backup= directory and re-run the command, as it will only edit the original files, not the backups with '~' suffixes.

<pre>
$ <b>cd /twiki/bin</b>

$ ls
attach	geturl			oops	  rdiff	  save		  testenv  viewfile
changes  installpasswd  passwd	register  search		upload
edit	  mailnotify	  preview  rename	 statistics  view

$ <b>mkdir .backup </b>
$ <b>cp * .backup</b>

$ head -1 view
#!/usr/bin/perl -wT

$ <b>perl -pi~ -e 's;#!/usr/bin/perl;#!c:/cygwin/bin/perl;' *[a-z]</b>

$ <b>head -1 view</b>
#!c:/cygwin/bin/perl -wT

$ ls
attach	 geturl			 oops		rdiff		save			testenv	viewfile~
attach~	geturl~			oops~	  rdiff~	  save~		  testenv~  view~
changes	installpasswd	passwd	 register	search		 upload
changes~  installpasswd~  passwd~	register~  search~		upload~
edit		mailnotify		preview	rename	  statistics	view
edit~	  mailnotify~	  preview~  rename~	 statistics~  viewfile

</pre>

If for some reason the edit goes wrong, just type =cp .backup/* .= (while within the =bin= directory) to restore the original distribution files.  Use =ls -a= to see the =.backup= directory, and =ls -a .backup= to view its contents. 

Optional step: you can do ='rm <nop>*~'= to clean out the backups made by Perl, but that's not essential as all the original files cannot be executed.  If you do this, *type the command very carefully*, as a space after the '*' will wipe out all files in this directory!

*5. Minor changes to TWiki scripts*

As an interlude, you now need to make some minor edits to files in the =c:/twiki/bin= directory, using a suitable editor (remember to use =nano -w filename= if you prefer =nano= to =vi= - or just use the Windows [[#Pre_requisites_and_upgrades][PFE editor]]).

	* Edit the =register= script in =/twiki/bin= - change line 200 to read as follows (insert the ==MIME::Base64::== part):

<pre>
			return $user . ':{SHA}' . <b>MIME::Base64::</b>encode_base64(Digest::SHA1::sha1($passwd));
</pre>

	* If you are using TWiki:Codev.ActiveState Perl, you also need to update =testenv=, see TWiki:Codev.CookbookActivePerlTestenv

---+++ Perl module installation

*6. Installing required Perl modules*

Some additional Perl modules are needed for the =register= script to work properly.  Fortunately, there is an automated tool that makes it easy to do this - it's called =cpan=, and goes to the Perl module archive site, http://www.cpan.org/, to download all required modules, and then build and install them.  Here's what you need to do:

First of all, you need to get the =cpan= tool configured and working - this is only necessary once.  From the Cygwin shell, type the following (putting the =export= command in =~/.profile= is recommended to make this setting persistent).  Without the TEMP variable, some modules may fail to install on Windows 2000 and higher.
<pre>
$ <b>export TEMP=/c/temp</b>
$ <b>cpan</b>
<i>Lots of questions about configuration and preferences - just hit Enter until you 
get to the questions about mirror sites, but answer the questions about FTP proxies etc
 if you are behind a proxy-based firewall.  The CPAN tool will fetch a series of files, 
some quite large, as part of this setup process, so be patient...</i>

</pre>

__NOTE__: If you are behind a non-proxy-based firewall that requires the use of passive FTP, the initial downloads of files using Net::FTP may appear to hang - just wait 5 or more minutes, however, and the CPAN tool should eventually hit on =ncftpget=, which is part of Cygwin and does work OK.  If this doesn't work and you are behind a typical NAT-based firewall, try doing the following at the Cygwin shell before running =cpan= - this forces Net::FTP to use passive FTP, letting it get through such firewalls:
<pre>
$ <b>export FTP_PASSIVE=1</b>
</pre>
If this works, add this line to your =~/.profile= file for future use.

Once some initial files are downloaded, you are asked to select your continent and country, and then mirror sites - just type the number of the mirror sites you want to use (pick a few in case one is down):
<pre>
...
(28) Turkey
(29) Ukraine
(30) United Kingdom

Select your country (or several nearby countries) [] 30

(1) ftp://cpan.teleglobe.net/pub/CPAN
(2) ftp://ftp.clockerz.net/pub/CPAN/
(3) ftp://ftp.demon.co.uk/pub/CPAN/
(4) ftp://ftp.flirble.org/pub/languages/perl/CPAN/
(5) ftp://ftp.mirror.ac.uk/sites/ftp.funet.fi/pub/languages/perl/CPAN/
(6) ftp://ftp.plig.org/pub/CPAN/
(7) ftp://mirror.uklinux.net/pub/CPAN/
(8) ftp://sunsite.doc.ic.ac.uk/packages/CPAN/
(9) ftp://usit.shef.ac.uk/pub/packages/CPAN/
Select as many URLs as you like,
put them on one line, separated by blanks [] 4 7 8

Enter another URL or RETURN to quit: []
New set of picks:
  ftp://ftp.flirble.org/pub/languages/perl/CPAN/
  ftp://mirror.uklinux.net/pub/CPAN/
  ftp://sunsite.doc.ic.ac.uk/packages/CPAN/

</pre>

Eventually, you'll get to the CPAN tool's shell prompt, where you need to install a few modules - the tool will do all the work for you.  
	* __NOTE__: You will need to have previously installed the Cygwin =make= and =gcc= packages, which are required by the CPAN installer (=gcc= is required for modules that include C language code) - you can install them now by launching Cygwin's =setup.exe= from =c:/download/cygwin-dist= (no need to exit the CPAN installer).

<pre>
cpan shell -- CPAN exploration and modules installation (v1.59_54)
cpan> <b>install Net::SMTP</b>
<i>May already be installed - if it is, try 'force install', since it's useful to be able to set
firewall and passive FTP configuration when using Net::FTP.  <b>Make sure you answer 'Y' to the question 
about whether you want to configure this package.</b></i>
cpan> <b>install Digest::SHA1</b>
<i>Lots of output about how CPAN finds, builds and installs the module - watch for 
any errors, though it should work fine if you have installed the Cygwin packages listed above (particularly 'gcc' and 'make').</i>
cpan> <b>install MIME::Base64</b>
<i>May already be installed.</i>

</pre>

---+++ Re-locking RCS files

*7. Re-locking files*

First, some testing: in your browser, go to http://yourdomain.com/bin/testenv - this provides a lot of detail, including warnings.  Write down the Apache server's userid that is given by this script - typically either 'system' or 'administrator' - I'll assume 'system' from now on.
	* If the =testenv= script doesn't work, go back and check the configuration of the Apache =httpd.conf= file, and =TWiki.cfg=.  Have a look at the Apache error log, =c:/apache/logs/error_log=, and the TWiki error log, =/twiki/data/log*.txt=.

This 'system' user must own the locks on the RCS files, which are shipped with the lock held by 'nobody'.  The reason this matters is that no revisions will be tracked by RCS unless the Apache userid matches that of the RCS file locks.

You can re-lock files using =rcs -u= and =rcs -l=, but it's a painfully manual process.  Instead, just use Perl again to mass-edit all the RCS files, as follows:
	* __NOTE__: The 'NR <= 10' part of the Perl command ensures that it only operates on the first 10 lines, to avoid editing the body of RCS files for topics that happen to include the text 'nobody:' (like this one...)


<pre>
$ <b>cd /twiki/data</b>

$ : Make a backup of all files
$ <b>tar czvf all-files.tar.gz */*</b>

$ : Test edit a single file to check your typing
$ <b>perl -pi~~~ -e 'NR <= 10 && s/nobody:/system:/ ' Main/WebIndex.txt,v</b>

$ <b>diff Main/WebIndex.txt,v Main/WebIndex.txt,v~~~</b>
5c5
<		 system:1.2; strict<nop>;
---
>		 nobody:1.2; strict<nop>;

$ : Now edit all the RCS files at once - use cursor-up to recall previous command
$ <b>perl -pi~~~ -e 'NR <= 10 && s/nobody:/system:/ ' */*,v</b>

$ : Check for any remaining files not edited
$ <b>grep 'strict;$' */*,v | grep -v system</b>

$ : Clean up - type this <b>very carefully</b> 
$ <b>rm */*~~~</b>
</pre>

	* *If something goes wrong:* to restore your existing files from the backup, just type =tar xzvf all-files.tar.gz= and all your files, both .txt and .txt,v, will be back as they were before the edits.

You have now re-locked all the RCS files and are ready to start using TWiki!  Of course, testing that it works is always a good idea, so that's next.


---+++ Email setup

*8. Email setup for notification and registration*

You need to set the =SMTPMAILHOST= to an SMTP email host that is reachable and currently working.  Otherwise you'll get a confusing message from TWiki when registering new users or running =mailnotify= (for WebNotify), along the lines of:

<pre>
	Software Error: Can't call method "mail" on an undefined value at ../lib/TWiki/Net.pm line 187.
</pre>

There are other settings to be made in TWikiPreferences, e.g. the =WIKIWEBMASTER= and (probably) the =SMTPSENDERHOST= (normally your mail server or TWiki server).  See the TWikiInstallationGuide for more details, what's listed here is just enough to let you run the basic tests.

---++ Testing your TWiki installation

Do try and exercise your TWiki in test mode before you release it to other users or put any significant data into it.

Here are the main things to test:

	* testenv - use =<nop>http://yourdomain.com/bin/testenv= and check for warnings
	* Page viewing (=view= script) - click around a few pages and make sure the links are OK
	* RCS diffs (=rdiff= script) - click on the Diffs link and on the '>' links at bottom of page
	* Edit a page, and register as a new user - tests page creation, use of =register= script to create a new user entry in =/twiki/data/.htpasswd= (the Apache password file), ability to send email via Net::SMTP, and whether =SMTPMAILHOST= was set correctly in TWikiPreferences.
		* If you get a failure to register or send email, check the Apache error log, and that all CPAN modules were installed correctly in Step 6, _Installing required Perl modules_.
		* Try typing =tail -30 /c/apache/logs/error_log= to see last 30 errors from Apache
	* Edit a page - check revision increased and set to current date/time
	* Edit the same page using another browser or PC, logging in as a different user - check there's a lock message (which you can override) and no double lines
	* Check the Apache =error_log= file to see if there are any RCS errors so far
	* Index - tests whether =ls= and =grep= are working
	* Search - more tests for whether =ls= and =grep= are working
	* Attachments - tests access to =/twiki/pub= directory.
		* Try a binary attachment upload and check the number of bytes in the file has not changed - if it has, see the *Install Cygwin* section's note on the default text file type.
	* Check the Apache =error_log= file again

---+++ Troubleshooting 

If anything doesn't work, go back and check the configuration of the Apache =httpd.conf= file, and =TWiki.cfg=.  Have a look at the Apache error log, =c:/apache/logs/error_log=, and the TWiki error log, =/twiki/data/log*.txt=, and if necessary enable debugging on selected scripts (the commands are right at the top of each script) - the results go into =/twiki/data/debug.txt=.  There is also a =/twiki/data/warning.txt= file that contains less serious messages.

See TWiki:Codev.TWikiPatches in case there are patches (i.e. specific code changes) for particular problems that may affect you (e.g. TWiki:Codev.ChangePasswordOnWin2K).

If you find that the Index feature doesn't work, or topic name searches fail, you should check you have set =$egrepCmd= and =$fgrepCmd= correctly, as mentioned above.

---+++ Permissions

TWiki:Codev.CygWin has several models for how it does security:

	* By default, it only implements the Unix 'write' and 'execute' permissions bits - the former is controlled by the Windows Read-Only attribute, while the latter is automatically assigned to files named *.exe or *.com, and to files whose first line is a shebang (i.e. =#!/bin/something=).  This is what has been used for this cookbook.
	* You can enable the 'ntea' or 'ntsec' models, which will increase security but are also likely to introduce permission problems.

I have not had any problems with TWiki permissions on Windows, unlike Linux/Unix, which is probably because I'm using the default security model for Cygwin.  If you use the other models, you may still be OK if you have local admin rights, and Apache is running as the SYSTEM user (which it uses if started as a service).  If you do have trouble in this area, see the TWikiInstallationGuide's advice, some of which will apply to TWiki:Codev.CygWin, and log any issues in TWiki:Codev.WindowsInstallCookbookComments.

---++ Next Steps

See the TWikiInstallationGuide for other setup. In particular, you'll probably want to refer to the [[TWikiInstallationGuide#Enabling_Authentication_of_Users][section on basic authentication]] - remember to use =c:/twiki= type filenames (i.e. Windows format) since you are using Apache for Windows.  

---+++ Improved authentication 

You may want to investigate TWiki:Codev.WindowsInstallModNTLM, which describes how to add an Apache module so that TWiki:Codev.InternetExplorer users are automatically authenticated based on their Windows domain login - this avoids TWiki:Codev.GettingTheUsernameWrong and TWiki:Codev.ForgettingPasswords, which are usually very common among TWiki users.

---+++ Improved performance

See TWiki:Codev.WindowsModPerlInstallCookbook and TWiki:Codev.ModPerl for information on installing TWiki under Apache's =mod_perl= - this is somewhat more complex and follows a different model, so it's best to get some experience with TWiki, Apache and Perl first.

---++ Format of filenames

In your TWiki on Windows installation, it's worth remembering that:

	* Apache configuration files (e.g. the ==.htaccess== file and ==c:/apache/conf/httpd.conf==) always use Windows format paths, with forward slashes, e.g. ==c:/twiki==
	* The same is true for the first line of the TWiki Perl scripts (since this line is interpreted by Apache), e.g. ==c:/cygwin/bin/perl==
	* All other lines in the Perl scripts use Unix format paths, e.g. ==/twiki== (using Cygwin Perl as per this cookbook)
		* If you are using TWiki:Codev.ActivePerl, that will use Windows format paths, e.g. ==c:/twiki==	
	* Depending on the Perl version used (Cygwin or TWiki:Codev.ActivePerl), the TWiki.cfg file uses a mixture of Unix and Cygwin format paths - stick to the format used in the installation step for TWiki.cfg
	* RCS always uses Unix format paths, e.g. ==/twiki==


---++ Credits

Material in this cookbook is heavily based on the enormous number of contributions in TWiki:Codev.TWikiOnWindowsArchive and related topics - too many people to thank, but have a look at the contributor list to TWiki:Codev.TWikiOnWindowsArchive to get an idea!  

People who've tested or reviewed this document and provided valuable feedback include:

	* TWiki:Main.BerndSchiffer
	* TWiki:Main.ChrisKeith
	* TWiki:Main.DavideBaroncelli
	* TWiki:Main.DavidLeBlanc
	* TWiki:Main.JerryWard
	* TWiki:Main.MartinWittmann
	* TWiki:Main.MaryDeMarco
	* TWiki:Main.MattWilkie
	* TWiki:Main.MikeBytnar
	* TWiki:Main.RossC
	* TWiki:Main.VictorGoh
	* TWiki:Main.WolframJahn

---
%X% Comments welcome at TWiki:Codev.WindowsInstallCookbookComments

-- Main.PeterThoeny - 30 Jan 2003
