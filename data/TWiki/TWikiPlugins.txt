%META:TOPICINFO{author="MikeMannix" date="998854083" format="1.0" version="1.5"}%
%TOC%
%STARTINCLUDE%
---## TWiki Plugins

---+++ About Plugins

<nop>TWikiPlugins allow you to add new features to TWiki without changing the core program. Using a plug-in approach means that you can:

	* add virtually unlimited features while keeping the main TWiki program compact and efficient;
	* heavily customize an installation and still do clean updates to new versions of TWiki;
	* rapidly develop new TWiki functions in Perl using the Plugin API.

Everything to do with TWiki Plugins - including demos, new releases, downloads, and discussion - is available at TWiki.org, in the <b> [[http://twiki.org/cgi-bin/view/Plugins][TWiki.org Plugins web]]</b>.

#InstallPlugin
---+++ Installing Plugins

Each <nop>TWikiPlugin comes with full documentation: step-by-step installation instructions, a detailed description of any special requirements, version details, and a working example for testing. 

Most Plugins can be installed in three easy steps, with no programming skills required:
	1 *Download* the zip file containing the Plugin, documentation, and any other required files, from TWiki:Plugins. 
	1 *Distribute* the files to their proper locations - unzip the zip archive in your TWiki installation directory - if have a standard TWiki installation, this will distribute automatically. Otherwise, place the files according to the directory paths listed on the Plugin top in TWiki:Plugins.
	1 *Check* the demo example on the Plugin topic: if it's working, the installation was fine!

Some Plugins need certain Perl modules to be pre-installed on the host system. Plugins may also use other resources, like graphics, other modules, applications, templates. In these cases, detailed instructions are in the Plugin documentation.

<nop>TWikiPlugin documentation pages are located at TWiki.org, in TWiki:Plugins web. Each Plugin has an doc topic (ex: ==SomePlugin==) and a separate development page.
	* *Doc page:* Read all available info about the Plugin; download the attached distribution files.
	* *Dev page:* Post feature requests, bug reports and general dev comments; topic title ends in ==Dev== (ex: ==SomePluginDev==).
	* *User support:* Post installation, how to use type questions (and answers, if you have them) in the TWiki:Support web.

---+++ Pre-Installed Plugins

TWiki comes with three Plugins as part of the standard installation.

	* *<nop>DefaultPlugin* handles some legacy TWiki variables that may be present in long-established sites. This option can be controlled from %TWIKIWEB%.TWikiPreferences. (Perl programmers can also [[#Customize_the_DefaultPlugin][add rules]] for simple custom processing.)

	* *<nop>EmptyPlug* is a fully functional Plugin module, minus any active code; it does nothing but serve as a template on demand. 

	* *InterwikiPlugin* is included but can be disabled or removed. Use it for quick linking to frequently linked to remote sites. Ex: ==TWiki:Plugins== expands to TWiki:Plugins - on TWiki.org. You can add your own shortcuts and URLs to the existing directory of Wiki-related sites.

---+++ Managing Installed Plugins

Ideally, after you've [[#InstallPlugin][installed a Plugin]], just read the instructions and you're set. In fact, some Plugins require additional settings or offer extra options that you can modify on Preferences pages. You may want to make a Plugin available only in certain webs, or temporarily disable it. And having to list all available Plugins will probably come up. You can handle all of these with simple procedures.

---++++ Set Preferences for Individual Plugins

Installed Plugins can be *toggled on or off*, site-wide or by web, through TWiki.TWikiPreferences and individual WebPreferences:

	* All Plugin modules present in the ==lib/TWiki/Plugins== directory are activated automatically unless disabled by the ==DISABLEDPLUGINS== Preferences variable in <nop>TWikiPreferences. You can optionally list the installed Plugins in the ==INSTALLEDPLUGINS== Preferences variable. This is useful to define the sequence of Plugin execution, or to specify other webs than the %WIKITOOLNAME% web for the Plugin topics. Settings in TWiki.TWikiPreferences are:
		* ==Set INSTALLEDPLUGINS = <nop>DefaultPlugin, ...== 
		* ==Set DISABLEDPLUGINS = <nop>EmptyPlugin, ...==

*Plugin execution order* in TWiki is determined by searching Plugin topics in a specific sequence: First, full ==web.topicname== name, if specified in ==INSTALLEDPLUGINS==; next, the %TWIKIWEB% web is searched; and finally, the current web.

*Plugin-specific settings* are done in individual Plugin topics. Two settings are standard for each Plugin:
	1 One line description, used to form the bullets describing the Plugins in the %TWIKIWEB%.TextFormattingRules topic:
		* ==Set SHORTDESCRIPTION = Blah blah woof woof.==
	1 Debug Plugin, output can be seen in ==data/debug.txt==. Set to 0=off or 1=on:
		* ==Set DEBUG = 0==
	* The settings can be retrieved as Preferences variables like ==%&lt;pluginname&gt;_&lt;var&gt;%==, ex: ==%<nop>DEFAULTPLUGIN_SHORTDESCRIPTION%== shows the description of the <nop>DefaultPlugin.

---++++ List Active Plugins Automatically  

Plugin status variables let you list all active Plugins wherever needed. There are two list formats:
	* The ==%<nop>ACTIVATEDPLUGINS%== variable lists activated Plugins by name. (This variable is displayed in TWiki.TWikiPreferences for debugging use.)
	* The ==%<nop>PLUGINDESCRIPTIONS%== variable displays a bullet list with a one-line description of each active Plugins. This variable is based on the ==%&lt;plugin&gt;_SHORTDESCRIPTION%== Preferences variables of individual topics and is shown in TWiki.TextFormattingRules.

<blockquote style="background-color:#f0f0f0">
<span style="color:#0000ff"> *DEMO: Active Plugin Variables* </span>

==%<nop>ACTIVATEDPLUGINS%== <br>
On this TWiki site, the active Plugins are: %ACTIVATEDPLUGINS%.

==%<no>PLUGINDESCRIPTIONS%== <br>
You can use any of these active TWiki Plugins:
%PLUGINDESCRIPTIONS%
</blockquote>

*TIP! To test new Plugins* on your installation before making them public, you may want to use one of these two approaches:

	* *Method 1:* Create a Production and a Test installation of TWiki. The ==twiki/data==, ==twiki/templates== and ==twiki/pub== directories are shared, and the ==twiki/bin== and ==twiki/lib== directories are separate. Do all tests of Plugins and other new features in the Test installation. When everything works, copy the modified files over to the Production installation. This way, you can update a live TWiki installation and users won't even notice.

	* *Method 2:* List the Plugin under test in the DISABLEDPLUGINS variable in TWiki.TWikiPreferences. Redefine the DISABLEDPLUGINS variable in the test web and do the testing there.

#CreatePlugins
---+++ Creating New Plugins

With a reasonable knowledge of the Perl scripting language, you can create new Plugins or modify and extend existing ones. Basic plug-in architecture uses an Application Programming Interface (API), a set of software instructions that allow external code to interact with the main program. The [[#PluginAPI][TWiki Plugin API]] Plugins by providing a programming interface for TWiki.

---++++ Anatomy of a Plugin

A basic TWiki Plugin consists of two elements:

	* a Perl module, ex: ==YourPlugin.pm==
	* a documentation topic, ex: ==YourPlugin.txt==

The Perl module can be a block of code that connects with TWiki alone, or it can include other elements, like other Perl modules (including other Plugins), graphics, TWiki templates, external applications (ex: a Java applet), or just about anything else it can call.

The Plugin API handles the details of connecting your Perl module with main TWiki code. When you're familiar with the [[#PluginAPI][Plugin API]], you're ready to develop Plugins.

#PluginAPI
---++++ TWiki Plugin API

The Application Programming Interface (API) for <nop>TWikiPlugins provides the specifications for hooking into the core TWiki code from your external Perl Plugin module. The Plugin API is new to the Production version of TWiki with the <nop>TWikiReleaseSpring2001.

The ==lib/TWiki/Func.pm== implements ALL official Plugin functions. Plugins should ONLY use functions published in this module. 

<span style="color:#ff0000"><b>DevALERT:</b></span> If you use functions not in ==Func.pm==, you run the risk of creating security holes. Also, your Plugin will likely break and require updating when you upgrade to a new version of TWiki.

In addition to TWiki core functions, Plugins can use *predefined hooks*, or *call backs*, listed in the ==lib/TWiki/Plugins/EmptyPlugin.pm== module.

	* All but the initPlugin are disabled. To enable a call back, remove ==DISABLE_== from the function name.

	* For improve performance, enable only the functions you really need. NOTE: ==outsidePREHandler== and ==insidePREHandler== are particularly expensive. 

---++++ Customize the <nop>DefaultPlugin

	* *<nop>DefaultPlugin* can handle some outdated TWiki variables, found, for example, in sites recently updated from an old version. Settings are in %TWIKIWEB%.TWikiPreferences. You can also add your own simple custom processing rules here, though in all but very simple cases, writing a new Plugin is preferable.

---++++ Create a Plugin Module in Perl

Copy file ([[http://twiki.org/lib/TWiki/Plugins/EmptyPlugin.pm][<code>EmptyPlugin.pm</code>]] to ==&lt;name&gt;Plugin.pm== ==EmptyPlugin.pm== contains no executable code, so it does nothing, but it's ready to be used. Customize it. Refer to the [[#PluginAPI][Plugin API]] specs for more information.

#CreatePluginTopic
---++++ Create a Plugin Documentation Topic

The Plugin documentation topic contains usage instructions and version details. It serves the Plugin files as %TWIKIWEB%.FileAttachments for downloading. (The doc topic is also included _in_ the [[#CreatePluginPackage][distribution package]].) To create a documentation topic:

	1. *Copy* the Plugin topic template from http://TWiki.org/cgi-bin/view/TWiki/EmptyPlugin. To copy the text, go to the page and:
		* click Edit
		* select all in the Edit box & copy 
		* Cancel the edit
		* paste & save as a text file or new topic on your site
	2. *Customize* the template for your Plugin; you'll probably want to post a working version on your local TWiki site.
	3. *Save* your topic as a text file, for use in [[#CreatePluginPackage][packaging]] and [[#PublishPlugin][publishing]] your Plugin.

<blockquote style="background-color:#f0f0f0">
<span style="color:#0000ff"><b>OUTLINE:</b> Doc Topic Contents </span><br>
Check [[http://TWiki.org/cgi-bin/view/TWiki/EmptyPlugin][EmptyPlugin]] on TWiki.org for the latest Plugin doc topic template. Here's a quick overview of what's covered:

*Syntax Rules:* __explanation coming up__

*<nop>YourPlugin Settings:* Description and settings for your custom Plugin %VARIABLES%, and those required by TWiki.

Plugins Preferences work exactly like %TWIKIWEB%.TWikiPreferences and WebPreferences: six (6) spaces and then:
		* Set EXAMPLE = got it! 

*How-to Instructions:* Step-by-step set-up guide, user help, whatever it takes to install and run, goes here.

*Test Example:* Include an example of the Plugin in action: if it works, the installation was a success!

*Plugin Info:* Version, credits, history, requirements - entered in a form, displayed as a table. Both are automatically generated when you create or edit a page in the TWiki:Plugins web.
</blockquote>

#CreatePluginPackage
---++++ Package a Plugin for Distribution

A minimum Plugin release consists of a Perl module with a TWiki.WikiName that ends in ==Plugin==, ex: ==YourPlugin.pm==, and a documentation page with the same name(==YourPlugin.txt==).

	1. Distribute your Plugin files in a directory structure that mirrors TWiki. If your Plugin uses additional files, include them ALL:
		* ==lib/TWiki/Plugins/YourPlugin.pm==
		* ==data/TWiki/YourPlugin.txt==
		* ==pub/TWiki/YourPlugin/uparrow.gif== [a required graphic]
	2. Create a zip archive with the Plugin name (==YourPlugin.zip==) and add the entire directory structure from Step 1. Your archive should look like this:
		* ==lib/TWiki/Plugins/YourPlugin.pm==
		* ==data/TWiki/YourPlugin.txt==
		* ==pub/TWiki/YourPlugin/uparrow.gif==

#PublishPlugin
---++++ Publish a Plugin for General Use

You can release your tested, packaged Plugin to the TWiki community through the TWiki:Plugins web, where all Plugins submitted to TWiki.org are available for download and further development discussion. Publish your Plugin in three steps:

	1. *Post* the Plugin documentation topic in the TWiki:Plugins web:
		* create a new topic using the Plugin name, ex: ==YourPlugin.txt==;
		* paste in the topic text from [[#CreatePluginTopic][How to Create the Plugin Documentation Topic]] and Save.
	1. *Attach* the distribution zip file to the topic, ex: ==YourPlugin.zip==.
	1. *Link* from the doc page to a new, blank page named after the Plugin, and ending in ==Dev==, ex: ==YourPluginDev==. This is the discussion page for future development. (User support for Plugins is handled in TWiki:Support.)

-- Main.MikeMannix - 26 Aug 2001
