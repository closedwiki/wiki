%META:TOPICINFO{author="TWikiContributor" date="1111929255" format="1.0" version="$Rev$"}%
%TOC%
%STARTINCLUDE%
---# TWiki Plugins

_Plug-in enhanced feature add-ons, with a Plugin API for developers_

---++ Overview

You can add Plugins to extend TWiki functionality, without altering the core code. A plug-in approach lets you:

	* add virtually unlimited features while keeping the main TWiki code compact and efficient;
	* heavily customize an installation and still do clean updates to new versions of TWiki;
	* rapidly develop new TWiki functions in Perl using the Plugin API.

Everything to do with TWiki Plugins - demos, new releases, downloads, development, general discussion - is available at TWiki.org, in the <b> TWiki:Plugins </b> web.

TWiki plugins are developed and contributed by interested members of the community. Plugins are provided on an 'as is' basis; they are not a part of TWiki, but are independently developed and maintained.

#InstallPlugin
---++ Installing Plugins

Each <nop>TWikiPlugin comes with its own documentation: step-by-step installation instructions, a detailed description of any special requirements, version details, and a working example for testing. Many plugins have an install script that automates these steps for you.

*Special Requests:* Some Plugins need certain Perl modules to be preinstalled on the host system. Plugins may also use other resources, like graphics, other modules, applications, templates. You should be able to find detailed instructions are in the Plugin documentation.

Each Plugin has a standard release page, located in the TWiki:Plugins web at TWiki.org. There's usually a number of other related pages, such as a developers page, and an appraisal page.

#PreTesting
---+++ On-Site Pretesting

The recommended approach to testing new Plugins before making them public is to create a second local twiki installation, and test the plugin there. You can allow selected users access to the test area. Once you are satisifed that it won't compromise your main installation, you can install it there as well.

InstalledPlugins shows which Plugins are: 1) installed, 2) loading properly and 3) what TWiki:Codev.PluginHandlers they invoke. Any failures are shown in the Errors section. The %<nop>FAILEDPLUGINS% TWikiVariable can be used to debug failures. You may also want to check your webserver error log and the various TWiki log files.

---+++ A Note on Plugin Performance

The performance of the system depends to some extent on the number of Plugins installed and on the Plugin implementation. Some Plugins impose no measurable performance decrease, some do. You can only really tell by installing the plugin and running experiments yourself. The Apache =ab= utility is very useful for doing this.

If you need to install an "expensive" Plugin, and you need its functionality only in one web, you can place the Plugin topic into that web. TWiki will initialize the Plugin only if the Plugin topic is found (which won't be the case for other webs.)

---+++ Listing Active Plugins

Plugin status variables let you list all active Plugins wherever needed.

---++++ =%<nop>ACTIVATEDPLUGINS%=
On this TWiki site, the enabled Plugins are: %ACTIVATEDPLUGINS%.

---++++ =%<nop>PLUGINDESCRIPTIONS%=
%PLUGINDESCRIPTIONS%

---++++ =%<nop>FAILEDPLUGINS%=
%FAILEDPLUGINS%

#PluginAPI
---++ The TWiki Plugin API

The Application Programming Interface (API) for <nop>TWikiPlugins provides the specifications for hooking into the core TWiki code from your external Perl Plugin module.

---+++ Available Core Functions

The TWikiFuncDotPm module (=lib/TWiki/Func.pm=) describes ALL the interfaces available to Plugins. Plugins should ONLY use the interfaces described in this module.

%X% If you use other core functions not described in =Func.pm=, you run the risk of creating security holes. Also, your Plugin will likely break and require updating when you upgrade to a new version of TWiki.

---+++ Predefined Hooks

In addition to TWiki core functions, Plugins can use *predefined hooks*, or *call backs*, as described in the =lib/TWiki/Plugins/EmptyPlugin.pm= module.

	* All but the initPlugin are disabled. To enable a call back, remove =DISABLE_= from the function name.

TWiki:Codev/StepByStepRenderingOrder helps you decide which rendering handler to use.

---+++ Hints on Writing Fast Plugins

	* Delay initialization as late as possible. For example, if your plugin is a simple syntax processor, you might delay loading extra Perl modules until yu actually see the syntax in the text.
	* For example, use an =eval= block like this:%BR%
	  =eval { require IPC::Run }= %BR%
	  =return "&lt;font color=\"red\"&gt;SamplePlugin: Can't load required modules ($@)&lt;/font&gt;" if $@;=
	* You can use a flag to avoid running the initialization twice

#CreatePlugins
---++ Creating Plugins

With a reasonable knowledge of the Perl scripting language, you can create new Plugins or modify and extend existing ones. Basic plug-in architecture uses an Application Programming Interface (API), a set of software instructions that allow external code to interact with the main program. The [[#PluginAPI][TWiki Plugin API]] Plugins by providing a programming interface for TWiki.

---+++ Anatomy of a Plugin

A basic TWiki Plugin consists of two elements:

	* a Perl module, ex: =MyFirstPlugin.pm=
	* a documentation topic, ex: =MyFirstPlugin.txt=

The Perl module can be a block of code that connects with TWiki alone, or it can include other elements, like other Perl modules (including other Plugins), graphics, TWiki templates, external applications (ex: a Java applet), or just about anything else it can call.
In particular, files that should be web-accessible (graphics, Java applets ...) are best placed as attachments of the =MyFirstPlugin= topic. Other needed Perl code is best placed in a =lib/TWiki/Plugins/MyFirstPlugin/= directory.

The Plugin API handles the details of connecting your Perl module with main TWiki code. When you're familiar with the [[#PluginAPI][Plugin API]], you're ready to develop Plugins.

---+++ Creating the Perl Module 

Copy file =lib/TWiki/Plugins/EmptyPlugin.pm= to =&lt;name&gt;Plugin.pm=. The =EmptyPlugin.pm= module contains mostly empty functions, so it does nothing, but it's ready to be used. Customize it. Refer to the [[#PluginAPI][Plugin API]] specs for more information.

#CreatePluginTopic
---+++ Writing the Documentation Topic

The Plugin documentation topic contains usage instructions and version details. It serves the Plugin files as %TWIKIWEB%.FileAttachments for downloading. (The doc topic is also included _in_ the [[#CreatePluginPackage][distribution package]].) To create a documentation topic:

	1. *Copy* the Plugin topic template from TWiki.org. To copy the text, go to TWiki:Plugins/PluginPackage and:
		* enter the Plugin name in the "How to Create a Plugin" section
		* click Create
		* select all in the Edit box &amp; copy 
		* Cancel the edit
		* go back to your site to the %TWIKIWEB% web
		* In the GoBox enter your Plugin name, for example =MyFirstPlugin=, press enter and create the new topic
		* paste &amp; save new Plugin topic on your site
	2. *Customize* your Plugin topic.
		* In case you plan to publish your Plugin at TWiki.org, use Interwiki names for author names, like TWiki:Main/%WIKINAME%. 
	3. *Save* your topic, for use in [[#CreatePluginPackage][packaging]] and [[#PublishPlugin][publishing]] your Plugin.

<blockquote style="background-color:#f5f5f5">
*OUTLINE: Doc Topic Contents* <br />
Check the Plugins web on TWiki.org for the latest Plugin doc topic template. Here's a quick overview of what's covered:

*Syntax Rules:* &lt;<i>Describe any special text formatting that will be rendered.</i>&gt;" 

*Example:* &lt;<i>Include an example of the Plugin in action. Possibly include a static HTML version of the example to compare if the installation was a success!</i>&gt;"

*Plugin Settings:* &lt;<i>Description and settings for custom Plugin %<nop>VARIABLES%, and those required by TWiki.</i>&gt;"

	* *Plugins Preferences* &lt;<i>If user settings are needed, explain... Entering values works exactly like %TWIKIWEB%.TWikiPreferences and WebPreferences: six (6) spaces and then:</i>&gt;"
		* *Set &lt;<i>EXAMPLE = value added</i>&gt;*

*Plugin Installation Instructions:* &lt;<i>Step-by-step set-up guide, user help, whatever it takes to install and run, goes here.</i>&gt;"

*Plugin Info:* &lt;<i>Version, credits, history, requirements - entered in a form, displayed as a table. Both are automatically generated when you create or edit a page in the TWiki:Plugins web.</i>&gt;"
</blockquote>

#CreatePluginPackage
---+++ Packaging for Distribution

The TWiki:Plugins.BuildContrib is a powerful build environment that is used by the TWiki project to build TWiki itself, as well as many of the plugins. You don't *have* to use it, but it is highly recommended!

If you don't want (or can't) use the !BuildContrib, then a minimum Plugin release consists of a Perl module with a WikiName that ends in =Plugin=, ex: =MyFirstPlugin.pm=, and a documentation page with the same name(=MyFirstPlugin.txt=).

	1. Distribute the Plugin files in a directory structure that mirrors TWiki. If your Plugin uses additional files, include them ALL:
		* =lib/TWiki/Plugins/MyFirstPlugin.pm=
		* =data/TWiki/MyFirstPlugin.txt=
		* =pub/TWiki/MyFirstPlugin/uparrow.gif= [a required graphic]
	2. Create a zip archive with the Plugin name (=MyFirstPlugin.zip=) and add the entire directory structure from Step 1. The archive should look like this:
		* =lib/TWiki/Plugins/MyFirstPlugin.pm=
		* =data/TWiki/MyFirstPlugin.txt=
		* =pub/TWiki/MyFirstPlugin/uparrow.gif=

#PublishPlugin
---+++ Publishing for Public Use

You can release your tested, packaged Plugin to the TWiki community through the TWiki:Plugins web. All Plugins submitted to TWiki.org are available for download and further development in TWiki:Plugins/PluginPackage.

Publish your plugin by following these steps:
   1. *Post* the Plugin documentation topic in the TWiki:Plugins/PluginPack
age:
      * enter the Plugin name in the "How to Create a Plugin" section,
 for example =MyFirstPlugin=
      * paste in the topic text from [[#CreatePluginTopic][Creating Pl
ugin Documentation]] and save
   1. *Attach* the distribution zip file to the topic, ex: =MyFirstPlugin.z
ip=
   1. *Link* from the doc page to a new, blank page named after the Plugin,
 and ending in =Dev=, ex: =MyFirstPluginDev=. This is the discussion page for fu
ture development. (User support for Plugins is handled in TWiki:Support.)
   1. *Put* the Plugin into the CVS repository, see TWiki:Plugins/ReadmeFir
st (optional)

%N% Once you have done the above steps once, you can use the !BuildContrib to upload updates to your plugin.

#RecommendedStorageOfPluginData
---++ Where to store Plugin Internal Data

Plugins that need to store data should use the functions in the FuncDotPm interface. These functions support saving and loading of:
   * Topics
   * Attachments

You can also create a plugin "work area" using the =getWorkArea= function, which gives you a persistant directory where you can store data files. 

__Related Topics:__ DeveloperDocumentationCategory, AdminDocumentationCategory
