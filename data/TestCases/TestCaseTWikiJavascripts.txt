%META:TOPICINFO{author="TWikiContributor" date="1111930902" format="1.0" version="$Rev: 7490 $"}%

---+!! Unit tests for !TWikiJavascripts

These tests require TWiki:Plugins.JSUnitContrib to run.

*[[%PUBURL%/%TWIKIWEB%/JSUnitContrib/testRunner.html?testpage=%SCRIPTURL{"view"}%/%BASEWEB%/%TOPIC%][Run tests]]*

<script language="javascript" src="%PUBURL%/%TWIKIWEB%/JSUnitContrib/app/jsUnitCore.js"></script>
<script language="javascript" src="%PUBURL%/%TWIKIWEB%/TWikiJavascripts/twikilib.js"></script>

%TOC%

---++ twiki.Array
<script language="javascript" src="%PUBURL%/%TWIKIWEB%/TWikiJavascripts/twikiArray.js"></script>

---+++ twiki.Array.remove

<script language="javascript">
/*<![CDATA[*/
    function testRemoveWithValidArgs() {
    	var list = ["a", "b", "c"];
    	twiki.Array.remove(list, "b");
        assertEquals("Remove object 1 from list", "ac", list.join(""));
        twiki.Array.remove(list, "a");
        assertEquals("Remove object 2 from list", "c", list.join(""));
        twiki.Array.remove(list, "c");
        assertEquals("Remove object 3 from list", "", list.join(""));
    }
    function testRemoveWithInvalidArgs() {
    	var list = ["a", "b", "c"];
        assertNull("A null argument should result in null", twiki.Array.remove(list, null));
        twiki.Array.remove(list, null);
        assertEquals("A null argument should result in no objects removed", "abc", list.join(""));
    }
    function testRemoveWithUndefinedValue() {
    	var list = ["a", "b", "c"];
        assertNull("An undefined argument should result in null", twiki.Array.remove(list, JSUNIT_UNDEFINED_VALUE));
    }
/*]]>*/
</script>

---+++ twiki.Array.convertArgumentsToArray

<script language="javascript">
/*<![CDATA[*/
	function returnArguments() {
		return arguments;
	}
    function testConvertArgumentsToArrayWithValidArgs() {
    	var args = returnArguments("a", "b", "c");
    	var argsArray = twiki.Array.convertArgumentsToArray(args);
    	assertEquals("Convert valid arguments", "abc", argsArray.join(""));
    	var argsArray = twiki.Array.convertArgumentsToArray(args,1);
    	assertEquals("Convert valid arguments with starting point", "bc", argsArray.join(""));
    }
    function testConvertArgumentsToArrayWithInValidArgs() {
    	{
			var args = returnArguments();
			var list = twiki.Array.convertArgumentsToArray(args);
			assertNull("Empty args list should result in null", list);
		}
		{
			var args = returnArguments("a", "b", "c");
			var list = twiki.Array.convertArgumentsToArray(args,3);
			assertNull("Start beyond bounds should result in null", list);
		}
		{
	    	assertNull("No args should result in null", twiki.Array.convertArgumentsToArray());
    	}
    	{
			var args = returnArguments("a", "b", "c");
			var list = twiki.Array.convertArgumentsToArray(args,"a");
			assertNull("String input as start should result in null", list);
		}
    }

/*]]>*/
</script>

---++ twiki.Form
<script language="javascript" src="%PUBURL%/%TWIKIWEB%/TWikiJavascripts/twikiForm.js"></script>

<form id="testForm%TOPIC%" name="testForm%TOPIC%">

<!-- text input -->
<input type="text" name="testInput%TOPIC%" value="TESTTEXT" size="40" disabled=true />

<!-- text input -->
<input type="password" name="testPwd%TOPIC%" value="secret" size="40" disabled=true />

<!-- radio buttons -->
<input type="radio" name="testRadio%TOPIC%" value="text" checked="checked" disabled=true /><label for="textbody">Text body</label><br />
<input type="radio" name="testRadio%TOPIC%" value="topic" disabled=true /><label for="topictitle">Topic title</label><br />
<input type="radio" name="testRadio%TOPIC%" value="all" disabled=true /><label for="both">Both body and title</label>

<!-- checkboxes -->
<input type="checkbox" name="testCbNoSearch%TOPIC%" checked="checked" disabled=true /><label for="nosearch">Search string</label><br />
<input type="checkbox" name="testCbNoSummary%TOPIC%" checked="checked" disabled=true /><label for="nosummary">Summaries</label><br />
<input type="checkbox" name="nototal" disabled=true /><label for="nototal">Total matches</label>

<!-- hidden field -->
<input type=hidden name="testHidden%TOPIC%" value="classic" disabled=true  />

<!-- textarea -->
<textarea name="testTextArea%TOPIC%" disabled=true >COMMENTSTEXT</textarea>

<!-- select dropdown -->
<select name="testSelect%TOPIC%" disabled=true >
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
<option value="fiat" selected="selected">Fiat</option>
<option value="audi">Audi</option>
</select>

<!-- select multile -->
<select name="testSelectMultiple%TOPIC%" size="5" multiple disabled=true > 
<option>[New Genre]</option> 
<option selected="selected">Industrial</option> 
<option selected="selected">Rock</option> 
</select>

</form>

---+++ twiki.Form.formData2QueryString

<script language="javascript">
/*<![CDATA[*/

    function testFormData2QueryStringWithValidArgs() {
    	{
			var queryString = twiki.Form.formData2QueryString(
				document.getElementById('testForm%TOPIC%')
			);
			assertEquals("Form values not collapsed", "testInput%TOPIC%=TESTTEXT;testPwd%TOPIC%=secret;testRadio%TOPIC%=text;testCbNoSearch%TOPIC%=on;testCbNoSummary%TOPIC%=on;testHidden%TOPIC%=classic;testTextArea%TOPIC%=COMMENTSTEXT;testSelect%TOPIC%=fiat;testSelectMultiple%TOPIC%=Industrial;testSelectMultiple%TOPIC%=Rock", queryString);
		}
		{
			var queryString = twiki.Form.formData2QueryString(
				document.getElementById('testForm%TOPIC%'),
				{collapseMulti:false}
			);
			assertEquals("Form values; collapsed false", "testInput%TOPIC%=TESTTEXT;testPwd%TOPIC%=secret;testRadio%TOPIC%=text;testCbNoSearch%TOPIC%=on;testCbNoSummary%TOPIC%=on;testHidden%TOPIC%=classic;testTextArea%TOPIC%=COMMENTSTEXT;testSelect%TOPIC%=fiat;testSelectMultiple%TOPIC%=Industrial;testSelectMultiple%TOPIC%=Rock", queryString);
		}
		{
			var queryString = twiki.Form.formData2QueryString(
				document.getElementById('testForm%TOPIC%'),
				{collapseMulti:true}
			);
			assertEquals("Form values collapsed", "testInput%TOPIC%=TESTTEXT;testPwd%TOPIC%=secret;testRadio%TOPIC%=text;testCbNoSearch%TOPIC%=on;testCbNoSummary%TOPIC%=on;testHidden%TOPIC%=classic;testTextArea%TOPIC%=COMMENTSTEXT;testSelect%TOPIC%=fiat;testSelectMultiple%TOPIC%=Industrial,Rock", queryString);
		}
    }

	function testFormData2QueryStringWithInvalidArgs() {
    	{
    		var formElem = document.getElementById('doesNotExist');
			var queryString = twiki.Form.formData2QueryString(formElem);
			assertNull("Non-existing form should return null", queryString);
		}
		{
			var queryString = twiki.Form.formData2QueryString(
				document.getElementById('testForm%TOPIC%'),
				{bla:true}
			);
			assertEquals("Non-existing options should do nothing", "testInput%TOPIC%=TESTTEXT;testPwd%TOPIC%=secret;testRadio%TOPIC%=text;testCbNoSearch%TOPIC%=on;testCbNoSummary%TOPIC%=on;testHidden%TOPIC%=classic;testTextArea%TOPIC%=COMMENTSTEXT;testSelect%TOPIC%=fiat;testSelectMultiple%TOPIC%=Industrial;testSelectMultiple%TOPIC%=Rock", queryString);
		}
    }

/*]]>*/
</script>

---++ twiki.HTML

<script language="javascript" src="%PUBURL%/%TWIKIWEB%/TWikiJavascripts/twikiHTML.js"></script>


---+++ twiki.HTML.setHtmlOfElementWithId

<div id="testSetHtmlOfElementWithId"></div>

<script language="javascript">
/*<![CDATA[*/
    function testSetHtmlOfElementWithIdWithValidArgs() {
    	var html = "<span style=\"color:blue;\">Blue text<\/span>";
		var elem = twiki.HTML.setHtmlOfElementWithId(
			"testSetHtmlOfElementWithId",
			html
		);
		
		var result = twiki.HTML.getHtmlOfElementWithId("testSetHtmlOfElementWithId");
    	assertEquals(
    		"Result setHtmlOfElementWithId",
    		html.toLowerCase(),
    		result.toLowerCase()
    	);
    	
    	assertEquals(
    		"Result setHtmlOfElementWithId element",
    		document.getElementById('testSetHtmlOfElementWithId'),
    		elem
    	);
	}
	
	function testSetHtmlOfElementWithIdWithInvalidArgs() {
		var html = "<span style=\"color:blue;\">Blue text<\/span>";
		var newElem = twiki.HTML.setHtmlOfElementWithId(
			"doesNotExist",
			html
		);
		assertNull("testSetHtmlOfElementWithIdWithInvalidArgs - Non-existing element should return null", newElem);
	}
	
 /*]]>*/
</script>

---+++ twiki.HTML.setHtmlOfElement

<div id="setHtmlOfElement"></div>

<script language="javascript">
/*<![CDATA[*/
    function testSetHtmlOfElementWithValidArgs() {
    	var html = "<span style=\"color:blue;\">Blue text<\/span>";
    	var elem = document.getElementById("setHtmlOfElement");
		var newElem = twiki.HTML.setHtmlOfElement(
			elem,
			html
		);
		
		var result = twiki.HTML.getHtmlOfElementWithId("setHtmlOfElement");
    	assertEquals(
    		"Result setHtmlOfElement",
    		html.toLowerCase(),
    		result.toLowerCase()
    	);
    	
    	assertEquals(
    		"Result setHtmlOfElement element",
    		document.getElementById('setHtmlOfElement'),
    		newElem
    	);

	}
	
	function testSetHtmlOfElementWithInvalidArgs() {
		var html = "<span style=\"color:blue;\">Blue text<\/span>";
		var newElem = twiki.HTML.setHtmlOfElement(
			null,
			html
		);
		assertNull("testSetHtmlOfElementWithInvalidArgs - Non-existing element should return null", newElem);
	}

 /*]]>*/
</script>

---+++ twiki.HTML.getHtmlOfElementWithId

<div id="testgetHtmlOfElementIdContainer">***HtmlOfElementWithId***</div>

<script language="javascript">
/*<![CDATA[*/
    function testGetHtmlOfElementWithIdWithValidArgs() {
    	var result = twiki.HTML.getHtmlOfElementWithId("testgetHtmlOfElementIdContainer");
    	assertEquals(
    		"Result html of element with id",
    		'***HtmlOfElementWithId***',
    		result
    	);
    }
/*]]>*/
</script>

---+++ twiki.HTML.getHtmlOfElement

<div id="testgetHtmlOfElementContainer">+++HtmlOfElement+++</div>

<script language="javascript">
/*<![CDATA[*/
    function testGetHtmlOfElementWithIdWithValidArgs() {
    	var result = twiki.HTML.getHtmlOfElementWithId("testgetHtmlOfElementContainer");
    	assertEquals(
    		"Result html of element",
    		'+++HtmlOfElement+++',
    		result
    	);
    }
/*]]>*/
</script>


---+++ twiki.HTML.clearElementWithId

<div id="testclearElementWithIdContainer">***clearElementWithId text***</div>

<script language="javascript">
/*<![CDATA[*/
    function testClearElementWithIdWithValidArgs() {
    	var elem = twiki.HTML.clearElementWithId("testclearElementWithIdContainer");
    	
    	var result = twiki.HTML.getHtmlOfElementWithId("testclearElementWithIdContainer");
    	assertEquals(
    		"Result html of clear element with id",
    		'',
    		result
    	);
    	
    	assertEquals(
    		"Result clearElementWithId element",
    		document.getElementById('testclearElementWithIdContainer'),
    		elem
    	);
    }
/*]]>*/
</script>

---+++ twiki.HTML.clearElement

<div id="testclearElementContainer">***clearElement text***</div>

<script language="javascript">
/*<![CDATA[*/
    function testClearElementWithValidArgs() {
    	var elem = document.getElementById("testclearElementContainer");
    	var newElem = twiki.HTML.clearElement(elem);
    	
    	var result = twiki.HTML.getHtmlOfElementWithId("testclearElementContainer");
    	assertEquals(
    		"Result html of clear element",
    		'',
    		result
    	);
    	
    	assertEquals(
    		"Result clearElement element",
    		document.getElementById('testclearElementContainer'),
    		newElem
    	);
    }
/*]]>*/
</script>



---+++ twiki.HTML.insertAfterElement

<div id="testInsertAfter">insert after this div...</div>

<script language="javascript">
/*<![CDATA[*/
    function testInsertAfterWithValidArgs() {
    	var html = "<strong>RESULT INSERT AFTER</strong>";
    	var newElem = twiki.HTML.insertAfterElement(
    		document.getElementById('testInsertAfter'),
    		'div',
    		html,
    		{
    			"id":"testInsertAfterResult",
    			"style":"color:red"
    		}
    	);
    	var result = twiki.HTML.getHtmlOfElementWithId("testInsertAfterResult");
    	assertEquals(
    		"Result insert after",
    		html.toLowerCase(),
    		result.toLowerCase()
    	);
    	
    	assertEquals(
    		"Resulting element insert after",
    		document.getElementById('testInsertAfterResult'),
    		newElem
    	);
    }
    
    function testInsertAfterWithInvalidArgs() {
    	var newElem = twiki.HTML.insertAfterElement(
    		document.getElementById('doesNotExist')
    	);
    	assertNull("testInsertAfterWithValidArgs - Non-existing element should return null", newElem);
    }
 /*]]>*/
</script>

---+++ twiki.HTML.insertBeforeElement

<div id="testInsertBefore">insert before this div...</div>

<script language="javascript">
/*<![CDATA[*/
    function testInsertBeforeWithValidArgs() {
    	var html = '<strong>RESULT INSERT BEFORE</strong>';
    	var newElem = twiki.HTML.insertBeforeElement(
    		document.getElementById('testInsertBefore'),
    		'div',
    		html,
    		{
    			"id":"testInsertBeforeResult"
    		}
    	);
    	var result = twiki.HTML.getHtmlOfElementWithId("testInsertBeforeResult");
    	assertEquals(
    		"Result insert before",
    		html.toLowerCase(),
    		result.toLowerCase()
    	);
    	
    	assertEquals(
    		"Resulting element insert before",
    		document.getElementById('testInsertBeforeResult'),
    		newElem
    	);
    }
    
    function testInsertBeforeWithInvalidArgs() {
    	var newElem = twiki.HTML.insertBeforeElement(
    		document.getElementById('doesNotExist')
    	);
    	assertNull("testInsertBeforeWithInvalidArgs - Non-existing element should return null", newElem);
    }
/*]]>*/
</script>

---+++ twiki.HTML.replaceElement

<div id="testReplace">replace this div...</div>

<script language="javascript">
/*<![CDATA[*/
    function testReplaceWithValidArgs() {
    	var html = '<strong>RESULT REPLACE</strong>';
    	var newElem = twiki.HTML.replaceElement(
    		document.getElementById('testReplace'),
    		'div',
    		html,
    		{
    			id:'resultReplaced'
    		}
    		
    	);
    	var result = twiki.HTML.getHtmlOfElementWithId("resultReplaced");
    	assertEquals(
    		"Result replaced",
    		html.toLowerCase(),
    		result.toLowerCase()
    	);
    	
    	assertEquals(
    		"Resulting element replaced",
    		document.getElementById('resultReplaced'),
    		newElem
    	);
    }
    
    function testReplaceWithInvalidArgs() {
    	var newElem = twiki.HTML.replaceElement(
    		document.getElementById('doesNotExist')
    	);
    	assertNull("testReplaceWithInvalidArgs - Non-existing element should return null", newElem);
    }
/*]]>*/
</script>

---+++ twiki.HTML.setNodeAttributesInList

<div id="setNodeAttributesInListContainer">
<ul>
	<li>Item 1</li>
	<li>Item 2</li>
	<li>Item 3</li>
</ul>
</div>

<script language="javascript">
/*<![CDATA[*/
    function testSetNodeAttributesInListWithValidArgs() {
    	var elem = document.getElementById("setNodeAttributesInListContainer");
    	var nodeList = elem.getElementsByTagName('ul')
    	var attributes = {
    		"class":"twikiSmall twikiGrayText",
    		"style":
    			{
    				"font-size":"20px",
    				"background-color":"#444"
    			}
    	};
    	twiki.HTML.setNodeAttributesInList(nodeList, attributes);
    	
    	// test first element
    	var elem = nodeList[0];
    	assertEquals("testSetNodeAttributesInListWithValidArgs class",
    		"twikiSmall twikiGrayText",
    		elem.getAttribute("class"));
    	assertEquals("testSetNodeAttributesInListWithValidArgs style.color",
    		"20px",
    		elem.style["font-size"]);
    	
    }

/*]]>*/
</script>