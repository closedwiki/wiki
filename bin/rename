#!c:/apps/perl/bin/perl 
#-d:ptkdb 
sub BEGIN {$ENV{PTKDB_STOP_TAG_COLOR} = "yellow" } 
#
# TWiki WikiClone (see TWiki.pm for $wikiversion and other info)
#
# Copyright (C) 2001 Peter Thoeny, Peter@Thoeny.com
# Copyright (C) 2001 Sven Dowideit, svenud@ozemail.com.au
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details, published at
# http://www.gnu.org/copyleft/gpl.html
#

use CGI::Carp qw( fatalsToBrowser );
use CGI;
use lib ( '.' );
use lib ( '../lib' );
use TWiki;

use strict;

use vars qw($query);

&main();


sub main
{
    $query= new CGI;
    my $thePathInfo = $query->path_info(); 
    my $theRemoteUser = $query->remote_user();
    my $theOldWeb = $query->param( 'oldWeb' );
    my $theOldTopic = $query->param( 'oldTopic' );
    my $newWeb = $query->param( 'newWeb' );
    my $newTopic = $query->param( 'newTopic' );
    my $theUrl = $query->url;
    my $lockFailure = "";
    my $breakLock = $query->param( 'breaklock' );
    my $theAttachment = $query->param( 'attachment' );
    my $confirm = $query->param( 'confirm' );
    
    if( ! $theAttachment ) {
        $theAttachment = "";
    }
    
    TWiki::writeDebug( "rename: theAttachment = $theAttachment" );

    if( ! $newWeb ) {
       # Get selection
       $newWeb = $query->param( 'webselection' );
    }
    
    my ( $topic, $webName, $scriptUrlPath, $userName, $dataDir ) = 
        &TWiki::initialize( $thePathInfo, $theRemoteUser, $theOldTopic, $theUrl, $query ); # DRKW difference to core

    my $wikiUserName = &TWiki::userToWikiName( $userName );

    my $oldWeb = $theOldWeb;
    my $oldTopic = $theOldTopic;
    if ( ! $oldWeb ) {
       $oldWeb = $webName;
    }
    if( ! $oldTopic ) {
       $oldTopic = $topic;
    }
    
    # justChangeRefs will be true when some topics that had links to $oldTopic
    # still need updating, previous update being prevented by a lock.
    my $justChangeRefs = $query->param( 'changeRefs' );
    if( ! $justChangeRefs ) {
       $justChangeRefs = "";
    }

    if ( ! $justChangeRefs ) {
       if( ! checkPermissions( $oldWeb, $oldTopic, $wikiUserName ) ) {
          # FIXME below error indicated by true return
           return;
       }
       
       TWiki::writeDebug( "rename: about to checkLocks" );
       
       # FIXME no point old and new topics being same (if in same WEB)
    }
    TWiki::writeDebug( "rename: permission okay" );

    # Has user selected new name yet? FIXME are there too many checks above?
    if( ! $newTopic || $confirm ) {
       newTopicScreen( $oldWeb, $oldTopic, $newWeb, $newTopic, $theAttachment, $confirm );
       return;    
    } 
    
    if( ! $justChangeRefs ) {
        if( ! getLocks( $oldWeb, $oldTopic, $newWeb, $newTopic, $theAttachment, $breakLock ) ) {
              return;
        }
    }
         

        
    my $fileName = &TWiki::Store::getFileName($oldWeb, $oldTopic);
    my $newName = &TWiki::Store::getFileName($newWeb, $newTopic);
    
    TWiki::writeDebug( "rename: about to check exists" );

    if( ! $justChangeRefs ) {
        # Check all is okay before we proceed.
        if( checkExist( $oldWeb, $oldTopic, $newWeb, $newTopic, $theAttachment, $fileName, $newName ) ) {
           return;
        }
    }
    
    TWiki::writeDebug( "rename: checkExist okay" );

    # FIXME should warn if newname is not a wiki name
    # FIXME to do after move?
    TWiki::writeDebug( "rename: about to find referring pages" );
    if( ! $theAttachment ) {
        my @refs = findReferingPages( $oldWeb, $oldTopic );
        my ( $lockFailues, $problems ) = 
            updateReferingPages( $oldWeb, $oldTopic, $newWeb, $newTopic, @refs );
    }

    if( ! $justChangeRefs ) {
       if( $theAttachment ) {
	  my $moveError = 
	     &TWiki::Store::moveAttachment( $oldWeb, $oldTopic, $newWeb, $newTopic, $theAttachment );
	  # FIXME change to doing as one call
	  if( $moveError ) {
	      TWiki::writeHeader( $query );
              my $tmpl = &TWiki::Store::readTemplate( "oopsgeneral" );
	      $tmpl = &TWiki::handleCommonTags( $tmpl, $newTopic );
	      $tmpl =~ s/%SUMMARY%/problem moving attachment/go;
	      $tmpl =~ s/%DETAIL%/$moveError/go;
              print $tmpl;
              return;
          }
       } else {
	  my $renameError = &TWiki::Store::renameTopic( $oldWeb, $oldTopic, $newWeb, $newTopic, "relink" );
	  if( $renameError ) {
	      TWiki::writeHeader( $query );
	      my $tmpl = &TWiki::Store::readTemplate( "oopsgeneral" );
	      $tmpl = &TWiki::handleCommonTags( $tmpl, $newTopic );
	      $tmpl =~ s/%SUMMARY%/problem renaming topic/go;
	      $tmpl =~ s/%DETAIL%/$renameError/go;
	      print $tmpl;
	      return;
           }
       } 
    }

    TWiki::writeDebug( "rename: nearly done" );
    my $new_url = "";
    if( $lockFailure ) {
       moreRefsToChange( $oldWeb, $oldTopic, $newWeb, $newTopic );
       TWiki::writeDebug( "rename: are locks" );
       return;
    } else {
       #redirect to new topic
       TWiki::writeDebug("Dealt with locks moving to new page");
       $new_url = &TWiki::getViewUrl( $newWeb, $newTopic );
    }

    TWiki::redirect( $query, $new_url );
    return;
}


#==================================
# List of webs to form drop-down.
sub dropListOfWebs
{
   my ($web) = @_;

   my @webs = &TWiki::Store::getAllWebs();

   my $html = "<SELECT NAME=\"webselection\">\n";
   foreach ( @webs ) {
      my $selected = ($_ eq $web) ? "SELECTED" : "";
      $html .= "   <OPTION $selected VALUE=\"$_\">$_</OPTION>\n"; 
   }
   $html .= "</SELECT>\n";

   return $html;
}


#=========================
sub findReferingPages
{
    my @result = ();
    
    # Go through parameters finding all topics for change
    my @types = qw\local global\;
    foreach my $type ( @types ) {
	my $count = 1;
	while( $query->param( "TOPIC$type$count" ) ) {
	   my $checked = $query->param( "RENAME$type$count" );
	   TWiki::writeDebug("rename: $count $type $checked");
	   if ($checked) {
	      push @result, $type;
	      push @result, $query->param( "TOPIC$type$count" );
	      TWiki::writeDebug("rename: $count $type @result");
	   }
	   $count++;
	}
    }
    return @result;
}


#==================================
sub updateReferingPages
{
    my ( $oldWeb, $oldTopic, $newWeb, $newTopic, @refs ) = @_;

    ##TWiki::writeDebug("rename refering pages @refs");
    my $lockFailure = 0;

    my $result = "";
    my $preTopic = '^|[\*\s\[][\(-\s]*';
    my $postTopic = '$|[^A-Za-z0-9_]';

    while ( @refs ) {
       my $type = shift @refs;
       my $item = shift @refs;
       my($itemWeb, $itemTopic) = TWiki::Store::getWebTopic($item);
       TWiki::writeDebug("link to change in $item, $itemWeb, $itemTopic");
       if ( &TWiki::Store::topicIsLockedBy( $itemWeb, $itemTopic ) ) {
          $lockFailure = 1;
          TWiki::writeDebug("rename lock failure $itemWeb.$itemTopic");
       } else {
          my $resultText = "";
          $result .= ":$item: , "; 
          #open each file, replace $topic with $newTopic
          if ( &TWiki::Store::topicExists($itemWeb, $itemTopic) ) { 
	     my( $scantext, @meta ) = &TWiki::Store::readWebTopicNew($itemWeb, $itemTopic);
	     my $insidePRE = 0;
	     my $insideVERBATIM = 0;
             my $noAutoLink = 0;
	     foreach( split( /\n/, $scantext ) ) {
		# This code is in far too many places
		m|<pre>|i  && ( $insidePRE = 1 );
		m|</pre>|i && ( $insidePRE = 0 );
		if( m|<verbatim>|i ) {
		    $insideVERBATIM = 1;
		}
		if( m|</verbatim>|i ) {
		    $insideVERBATIM = 0;
		}
		m|<noautolink>|i   && ( $noAutoLink = 1 );
		m|</noautolink>|i  && ( $noAutoLink = 0 );

		if( ! ( $insidePRE || $insideVERBATIM || $noAutoLink ) ) {
		    if( $type eq "global" ) {
			my $insertWeb = ($itemWeb eq $newWeb) ? "" : "$newWeb.";
			s/($preTopic)\Q$oldWeb.$oldTopic\E($postTopic)/$1$insertWeb$newTopic$2/g;
		    } else {
			# Only replace bare topic (i.e. not preceeded by web) if web of referring
			# topic is in original Web of topic that's being moved
			if( $oldWeb eq $itemWeb ) {
			    my $insertWeb = ($oldWeb eq $newWeb) ? "" : "$newWeb.";
			    s/($preTopic)\Q$oldTopic\E($postTopic)/$1$insertWeb$newTopic$2/g;
			}
		    }
		}
	        $resultText .= "$_\n";
	     }
	     &TWiki::Store::saveTopicNew( $itemWeb, $itemTopic, $resultText, \@meta, "", "unlock", "dontNotify", "" );
          } else {
	    $result .= ";$item does not exist;"; # FIXME is this needed?
          }
       }
    }
    return ( $lockFailure, $result );
}


#=============================
# return "" if problem, otherwise return text of oldTopic
sub checkPermissions
{
    my( $oldWeb, $oldTopic, $wikiUserName ) = @_;
   
    my $ret = "";
   
    if( &TWiki::Store::topicExists( $oldWeb, $oldTopic ) ) {
	$ret = &TWiki::Store::readWebTopic( $oldWeb, $oldTopic );
    }
    
    if( ! &TWiki::Access::checkAccessPermission( "change", $wikiUserName, $ret, $oldTopic, $oldWeb ) ) {
       # user has not permission to change the topic
       my $url = &TWiki::getOopsUrl( $oldWeb, $oldTopic, "oopsaccesschange" );
       TWiki::redirect( $query, $url );
       $ret = "";
    }
    
    return $ret;
}


#==========================================
# Check that various web and topics exist or don't exist as required
sub checkExist
{
   my( $oldWeb, $oldTopic, $newWeb, $newTopic, $theAttachment, $oldFileName, $newFileName ) = @_;
   
   my $ret = "";
   my $tmpl = "";
   
   # Does old WEB exist?
   if( ! &TWiki::Store::webExists( $oldWeb ) ) {
      TWiki::writeHeader( $query ); 
      $tmpl = &TWiki::Store::readTemplate( "noweb" );
      $tmpl = &TWiki::handleCommonTags( $tmpl, $oldTopic );
      print $tmpl;
      $ret = "problem";
   }

   # Does new WEB exist?
   if( ! &TWiki::Store::webExists( $newWeb ) ) {
      TWiki::writeHeader( $query );
      $tmpl= &TWiki::Store::readTemplate( "noweb" );
      $tmpl = &TWiki::handleCommonTags( $tmpl, $newTopic );
      print $tmpl;
      $ret = "problem";
   }

   # Does old attachment exist?
   if( ! -e $oldFileName) {
      TWiki::writeHeader( $query );
      $tmpl= &TWiki::Store::readTemplate( "oopsmissing" );
      $tmpl = &TWiki::handleCommonTags( $tmpl, $oldTopic );
      print $tmpl;
      $ret = "problem"; 
   }

   # Check new topic doesn't exist (opposite if we've moving an attachment)
   if( -e $newFileName && ! $theAttachment ) {
      # Unless moving an attachment, new topic should not already exist
      TWiki::writeHeader( $query );
      # FIXME - should this use oopsexists rather than oopsgeneral?
      $tmpl = &TWiki::Store::readTemplate( "oopsgeneral" );
      ##TWiki::writeDebug( "rename: tmpl = $tmpl" );
      $tmpl =~ s/%SUMMARY%/Topic $newTopic already exists/go;
      $tmpl =~ s|%DETAIL%|Topic $newTopic already exists in Web $newWeb, press <I>Back</I> and try a new name|go;
      # FIXME - could offer number addition to topic name that doesn't exist?
      $tmpl = &TWiki::handleCommonTags( $tmpl, $newTopic );
      print $tmpl;
      ##TWiki::writeDebug( "rename: topic already exists" );
      # FIXME error doesn't appear on user screen.
      $ret = "problem";    
   }    
   if( $theAttachment && ! -e $newFileName ) {
      TWiki::writeHeader( $query );
      $tmpl= &TWiki::Store::readTemplate( "oopsmissing" );
      $tmpl = &TWiki::handleCommonTags( $tmpl, $newTopic, $newWeb );
      print $tmpl;
      $ret = "problem"; 
   }
   
   return $ret;
}


#============================
#Return "" if can't get lock, otherwise "okay"
sub getLocks
{
    my( $oldWeb, $oldTopic, $newWeb, $newTopic, $theAttachment, $breakLock ) = @_;
    
    my( $oldLockUser, $oldLockTime, $newLockUser, $newLockTime );
    
    if( ! $breakLock ) {
	# Check for lock - at present the lock can't be broken
	( $oldLockUser, $oldLockTime ) = &TWiki::Store::topicIsLockedBy( $oldWeb, $oldTopic );
	if( $oldLockUser ) {
	   $oldLockUser = &TWiki::userToWikiName( $oldLockUser );
	   use integer;
	   $oldLockTime = ( $oldLockTime / 60 ) + 1; # convert to minutes
	}

	if( $theAttachment ) {
	    ( $newLockUser, $newLockTime ) = &TWiki::Store::topicIsLockedBy( $newWeb, $newTopic );
	    if( $newLockUser ) {
	       $newLockUser = &TWiki::userToWikiName( $newLockUser );
	       use integer;
	       $newLockTime = ( $newLockTime / 60 ) + 1; # convert to minutes
	       my $editLock = $TWiki::editLockTime / 60;
	    }
	}
    }
    
    if( $oldLockUser || $newLockUser ) {
       my $tmpl = &TWiki::Store::readTemplate( "oopslockedrename" );
       my $editLock = $TWiki::editLockTime / 60;
       if( $oldLockUser ) {
           $tmpl =~ s/%OLD_LOCK%/Source topic $oldWeb.$oldTopic is locked by $oldLockUser, lock expires in $oldLockTime minutes.<BR>/go;
       } else {
           $tmpl =~ s/%OLD_LOCK%//go;
       }
       if( $newLockUser ) {
           $tmpl =~ s/%NEW_LOCK%/Destination topic $newWeb.$newTopic is locked by $newLockUser, lock expires in $newLockTime minutes.<BR>/go;
       } else {
           $tmpl =~ s/%NEW_LOCK%//go;
       }
       $tmpl =~ s/%NEW_WEB%/$newWeb/go;
       $tmpl =~ s/%NEW_TOPIC%/$newTopic/go;
       $tmpl =~ s/%ATTACHMENT%/$theAttachment/go;
       $tmpl = &TWiki::handleCommonTags( $tmpl, $oldTopic, $oldWeb );
       $tmpl = &TWiki::getRenderedVersion( $tmpl, $oldWeb );
       TWiki::writeHeader( $query );
       print $tmpl;
       return "";
    } else {
       &TWiki::Store::lockTopicNew( $oldWeb, $oldTopic );
       if( $theAttachment ) {
            &TWiki::Store::lockTopicNew( $newWeb, $newTopic );
       }
    }
    
    return "okay";
}


#============================
# Display screen so user can decide on new web and topic.
sub newTopicScreen
{
   my( $oldWeb, $oldTopic, $newWeb, $newTopic, $theAttachment, $confirm ) = @_;
   
   my $tmpl = "";
   
   if( ! $newTopic ) {
       $newTopic = $oldTopic;
   }
   
   TWiki::writeHeader( $query );
   if( $theAttachment ) {
     $tmpl = &TWiki::Store::readTemplate( "moveattachment" );
     $tmpl =~ s/%FILENAME%/$theAttachment/go;
   } else {
     $tmpl= &TWiki::Store::readTemplate( "rename" );
   }
   $tmpl =~ s/%OLD_TOPIC%/$oldTopic/go;
   $tmpl =~ s/%OLD_WEB%/$oldWeb/go;
   if( $confirm ) {
       $tmpl =~ s/%WEB_SELECTION%/$newWeb/go;
       my $tmp = "$newTopic\n<input type=\"hidden\" name=\"newTopic\" value=\"$newTopic\">";
       $tmpl =~ s/%NEW_TOPIC%/$tmp/go;
       $tmpl =~ s/%NEW_WEB%/$newWeb/go;
   } else {
       $tmpl =~ s/%WEB_SELECTION%/&dropListOfWebs( $oldWeb )/geo;
       my $tmp = "<input type=\"text\" name=\"newTopic\" size=\"16\" value=\"$newTopic\">";
       $tmpl =~ s/%NEW_TOPIC%/$tmp/go;
       $tmpl =~ s/%NEW_WEB%//go;
   }
   $tmpl =~ s/%CHANGE_REFS%//go;
   $tmpl = &TWiki::handleCommonTags( $tmpl, "" );
   print $tmpl;
 }
 
 sub moreRefsToChange
 {
    my( $oldWeb, $oldTopic, $newWeb, $newTopic ) = @_;
    
    TWiki::writeDebug("lock failure in rename");
    TWiki::writeHeader( $query );
    my $tmpl = &TWiki::Store::readTemplate( "oopsneednewtopic" );
    $tmpl =~ s/%OLD_TOPIC%/$oldTopic/go;
    $tmpl =~ s/%OLD_WEB%/$oldWeb/go;
    $tmpl =~ s/%NEW_WEB%/$newWeb/go;
    $tmpl =~ s/%NEW_TOPIC%/$newTopic/go;
    $tmpl =~ s/%WEB_SELECTION%/$newWeb/go;
    $tmpl =~ s/%CHANGE_REFS%/ON/go; # Still locks to deal with
    $tmpl = &TWiki::handleCommonTags( $tmpl, "" );
    print $tmpl;
 }

