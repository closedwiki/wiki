#!/usr/bin/perl -w
#
# TWiki WikiClone (see wiki.pm for $wikiversion and other info)
#
# Copyright (C) 2000 Peter Thoeny, peter@thoeny.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details, published at
# http://www.gnu.org/copyleft/gpl.html
#
# DESCRIPTION: Test utility to see if CGI is running and enabled
# for the bin directory, and check a variety of TWiki, Perl and RCS
# setup.

# Compile-time use of modules
use lib ( '.' );
use lib ( '../lib' );

use Config; 		# Perl's configuration details

# use strict;		# Recommended for mod_perl, enable for Perl 5.6.1 only
			# Doesn't work well here, due to 'do "TWiki.cfg"'
# use diagnostics;	# Debug only

package TWiki;


# Check whether basic CGI modules exist (some broken installations of
# Perl don't have this, even though they are standard modules), and warn user
my @basicMods = qw( CGI CGI::Carp );
my $modMissing = 0;
my $mod;
foreach $mod (@basicMods) {
    eval "use $mod";
    if ($@) {
	unless ($modMissing) {
	    print "Content-type: text/html\n\n";
	    print "<html><head><title>Perl Module(s) missing</title></head>\n";
	    print "<body>\n";
	    print "<h1>Perl Module(s) missing</h1>\n";
	}
        $modMissing = 1;
	print "<p><b><font color=\"red\">Warning:</font></b> ";
	print "Essential module <b>$mod</b> not installed - please check your Perl\n";
	print "installation, including the setting of <b>\@INC</b>, and re-install Perl if necessary.</p>\n";
    }
}
# Display @INC and give up, if any critical modules missing
if ($modMissing) {
    print "<p><b>\@INC setting:</b><br /><tt> ";
    print join "<br />\n", @INC;
    print "</tt></p>\n";
    print "</body>\n</html>\n";
    exit;
}

# Run-time use of CGI modules
require CGI;
require CGI::Carp;
import CGI::Carp qw( fatalsToBrowser );


&main();

sub main
{

my $perlverRequired = 5.00503;		# Oldest supported version of Perl
my $perlverRequiredString = '5.005_03';
my $perlverRecommended = '5.6.1';

my $rcsverRequired = 5.7;

my @requiredMods = ( @basicMods,  
	'File::Copy'
    ); 
my @requiredModsWindows = ( 
	'Digest::SHA1', 
	'MIME::Base64', 
	'Net::SMTP',
   );

open(STDERR,'>&STDOUT'); # redirect error to browser
$| = 1;                  # no buffering - FIXME: mod_perl issue?

my $query = new CGI;


print "Content-type: text/html\n\n";
print <<EOM;
<html>
<head><title>Test the CGI environment</title></head>
<body>
<h1>Test the CGI environment for TWiki</h1>
Read the <a href="http://TWiki.org/cgi-bin/view/TWiki/TWikiInstallationNotes">TWikiInstallationNotes</a> for more information on TWiki installation.
<h3>Environment variables:</h3>
<table>
EOM
my $key;
for $key ( sort keys %ENV ) {
    print "<tr><th align=\"right\">$key</th><td>$ENV{$key}</td></tr>\n";
}
print <<EOM;
</table>
<h3>CGI Setup:</h3>
<table>
EOM


# Read the TWiki configuration early - includes OS detection
do "TWiki.cfg";

# Get Perl version - output looks neater with new variable
my $perlvernum = $];
my $perlver;
if (defined $^V) {
    $perlver = $^V;             # New in Perl 5.6.1, one byte per part
    $perlver = ord(substr($perlver,0)) . "." . ord(substr($perlver,1))
                                       . "." . ord(substr($perlver,2));
} else {
    $perlver = $perlvernum
}

 

# Detect OS in more detail, in order to get type of Perl on Windows
my $opsys ='';
my ($perltype, @lines);
my $rcsver;
unless ($opsys = $^O) {
    require Config;
    $opsys = $Config::Config{'osname'};
}
if ($opsys eq 'cygwin') {
    $perltype = 'Cygwin';

    # Get Cygwin perl-x.x package version number
    my $pkg = `/bin/grep 'inst=[^ ]*/'perl-5 /setup.log.full 2>/dev/null`; 
    if ($?) { 
        $pkg = " [Can't identify package - no grep command installed]";
	$perlver .= $pkg
    } else {
	# Grab the last line in case of upgrades
	@lines = split /\n/, $pkg;
	$pkg = $lines[ (scalar @lines) - 1 ];
	$pkg =~ s!^.*perl/perl-!!;
	$pkg =~ s!\.tar.*!!;
	$perlver = $pkg;	# Use package version number, more detailed
    }
	
    # Get Cygwin rcs-x.x package version number
    $pkg = `/bin/grep 'inst=[^ ]*/'rcs-5 /setup.log.full 2>/dev/null`; 
    if ($?) { 
        $pkg = " [Can't identify package - no grep command installed]";
	$rcsver = $pkg
    } else {
	# Grab the last line in case of upgrades
	@lines = split /\n/, $pkg;
	$pkg = $lines[ (scalar @lines) - 1 ];
	$pkg =~ s!^.*rcs/rcs-!!;
	$pkg =~ s!\.tar.*!!;
	$rcsver = $pkg;		# Use package version number, more detailed
    }

} elsif ($opsys=~/win/i && $opsys !~ /darwin/i ) {
    $perltype = 'ActiveState';
    $perlver .= ", build " . Win32::BuildNumber();	# ActivePerl only
} else {
    $perltype = 'generic';
}

# Detect executable name suffix, e.g. .exe on Windows or '' on Unix
my $exeSuffix='';
if ( $Config::Config{'_exe'}) { 
    $exeSuffix = $Config::Config{'_exe'};
}


my $thePathInfo = $query->path_info(); 
# my $theRemoteUser = $query->remote_user();
my $theTopic = $query->param( 'topic' );
my $theUrl = $query->url;

# Detect whether mod_perl was loaded into Apache
my $LOAD_MOD_PERL = ( exists $ENV{'SERVER_SOFTWARE'} && 
			  ( $ENV{'SERVER_SOFTWARE'} =~ /mod_perl/ )) && 
					"loaded" || "not loaded";

# Detect whether we are actually running under mod_perl
# FIXME: just test for MOD_PERL, which is enough
my $USE_MOD_PERL = ((exists $ENV{'GATEWAY_INTERFACE'}
                  and $ENV{'GATEWAY_INTERFACE'} eq "CGI-Perl/1.1")
                   or exists $ENV{'MOD_PERL'} ) && 
		   "Used" || 
		   "Not used";


print "<tr><th align=\"right\">Operating system:</th><td>" . ucfirst(lc($OS)) . "</td></tr>\n";
print "<tr><th align=\"right\">Perl version:</th><td>$perlver";
print " ($perltype)" if $perltype ne 'generic';
print "</td></tr>\n";
if( $perlvernum < $perlverRequired ) {
    print "<tr><th></th><td><b><font color=\"red\">Warning:</font></b> ";
    print "This version of Perl is old - upgrade to at least Perl $perlverRequiredString\n";
    print "and preferably to Perl $perlverRecommended.\n";
    print "</td></tr>\n";
}

# Add to list of required modules if on Windows (FIXME: also needed for 
# most non-Unix OSes)
if ( $OS eq 'WINDOWS') {
    push @requiredMods,  @requiredModsWindows;
}

# Check that each of the required Perl modules can be loaded, and
# print its version number.
print "<tr><th align=\"right\">Perl modules:</th><td>";
foreach $mod (@requiredMods) {
    eval "use $mod";
    print "<tr><th></th><td>\n";
    if ($@) {
	print "<b><font color=\"red\">Warning:</font></b> ";
	print "'$mod' not installed - check TWiki documentation to see if this is required.\n";
	print "</td></tr>\n";
    } else {
	my $mod_version = $ {"$ {mod}::VERSION"};
        print "$mod ($mod_version)";
	print "</td></tr>\n";
    }
    print "</td></tr>\n";
}

print "<tr><th align=\"right\">PATH_INFO:<a name=\"PATH_INFO\"></th><td>$thePathInfo</td></tr>\n";
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b>";
print "For a URL such as '$theUrl/foo/bar', ";
print "the correct PATH_INFO is '/foo/bar', without any prefixed path ";
print "components. <a href=\"$theUrl/foo/bar#PATH_INFO\">Test</a> this.";
print "</td></tr>\n";
print "<tr><th align=\"right\">mod_perl:</th><td>$USE_MOD_PERL for this script (mod_perl $LOAD_MOD_PERL)</td></tr>\n";


# Get userid (ActiveState or other Perl), should work on all Perl systems 
my $usr = lc( getlogin || getpwuid($<) );
# 
# Get group info
my $grp = "";
if ( $perltype eq 'Cygwin' ) {
    foreach( split( " ", $( ) ) {
	my $onegrp = getgrgid( $_ );
	$grp .= " " . lc($onegrp);
    }
} elsif ( $perltype eq 'ActiveState' ) {
    # Try to use Cygwin's 'id' command - may be on the path, since Cygwin
    # is probably installed to supply ls, egrep, etc - if it isn't, give up.
    # Run command without stderr output, to avoid CGI giving error.
    # Get names of primary and other groups.
    $grp = lc(qx(sh -c '( id -un ; id -gn) 2>/dev/null' 2>nul ));
    if ($?) { 
        $grp = "[Can't identify groups - no Cygwin 'id' or 'sh' command on path]";
    }
}

print "<tr><th align=\"right\">User:</th><td>$usr</td></tr>\n";
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
print "Your CGI scripts are executing as this user.";
print "</td></tr>\n";
if( $usr ne "nobody" ) {
    print "<tr><th></th><td><b><font color=\"red\">Warning:</font></b> ";
    print "Since your CGI script is not running as user <tt>nobody</tt>, ";
    print "you need to change the locks in the *,v RCS files of the TWiki ";
    print "distribution from <tt>nobody</tt> to <tt>$usr</tt>.\n";
    print "Otherwise, changes to topics will not be logged by RCS.\n";
    print "</td></tr>\n";
}
print "<tr><th align=\"right\">Member of group(s):</th><td>";
print "$grp";
print "</table>\n";



print "<h3>Test of <tt>TWiki.cfg</tt> Configuration:</h3>\n";

# TWiki.cfg read earlier
print "<table>\n";


print "<tr><th align=\"right\">\$wikiHomeUrl:</th><td>$wikiHomeUrl</td></tr>\n";
my $junk1 = $wikiHomeUrl; 	# Avoid warning
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
print "This is the link of the TWiki icon in the upper left corner.";
print "</td></tr>\n";

print "<tr><th align=\"right\">\$defaultUrlHost:</th><td>$defaultUrlHost</td></tr>\n";
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
print "This must be the protocol and host part (with optional port number) of ";
print "the TWiki URL.";
print "</td></tr>\n";
my $val = $ENV{"HTTP_HOST"};
if( ! ( $defaultUrlHost =~ /$val/ ) ) {
    print "<tr><th></th><td><b><font color=\"red\">Warning:</font></b> ";
    print "This does not match </b>HTTP_HOST</b>";
    print "</td></tr>\n";
}

print "<tr><th align=\"right\">\$scriptUrlPath:</th><td>$scriptUrlPath</td></tr>\n";
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
print "This must be the URI of the TWiki cgi-bin directory.";
print "</td></tr>\n";
$val = $ENV{"REQUEST_URI"};
if( ! ( $val =~ /^$scriptUrlPath/ ) ) {
    print "<tr><th></th><td><b><font color=\"red\">Warning:</font></b> ";
    print "This does not match </b>REQUEST_URI</b>";
    print "</td></tr>\n";
}

print "<tr><th align=\"right\">\$pubUrlPath:</th><td>$pubUrlPath</td></tr>\n";
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
print "This must be the URI of the public directory.";
print "This is not set correctly if the ";
print "$pubUrlPath/wikiHome.gif image below is broken:<br />";
print "<img src=\"$pubUrlPath/wikiHome.gif\" />";
print "</td></tr>\n";

print "<tr><th align=\"right\">\$pubDir:</th><td>$pubDir</td></tr>\n";
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
print "This is the public directory, as seen from the file system. ";
print "It must correspond to <b>\$pubUrlPath</b>.";
print "</td></tr>\n";
if( ! ( -e "$pubDir/wikiHome.gif" ) ) {
    print "<tr><th></th><td><b><font color=\"red\">Error:</font></b> ";
    print "Directory does not exist or file <tt>wikiHome.gif</tt> does not exist in this directory.";
    print "</td></tr>\n";
} elsif( ! ( testFileIsWritable( "$pubDir/testenv.test" ) ) ) {
    # directory is not writable
    print "<tr><th></th><td><b><font color=\"red\">Error:</font></b> ";
    print "This directory is not writable by <b>$usr</b> user.";
    print "</td></tr>\n";
}

print "<tr><th align=\"right\">\$templateDir:</th><td>$templateDir</td></tr>\n";
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
print "This is the TWiki template directory, as seen from the file system. ";
print "</td></tr>\n";
if( ! ( -e "$templateDir/view.tmpl" ) ) {
    print "<tr><th></th><td><b><font color=\"red\">Error:</font></b> ";
    print "Directory does not exist or file <tt>view.tmpl</tt> does not exist in this directory.";
    print "</td></tr>\n";
} elsif( testFileIsWritable( "$templateDir/testenv.test" ) ) {
    # directory is writable
    print "<tr><th></th><td><b><font color=\"red\">Warning:</font></b> ";
    print "Security issue: This directory should not be writable by the <b>$usr</b> user.";
    print "</td></tr>\n";
}

print "<tr><th align=\"right\">\$dataDir:</th><td>$dataDir</td></tr>\n";
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
print "This is the data directory where TWiki stores all topics.";
print "</td></tr>\n";
if( ! ( -e "$dataDir" ) ) {
    print "<tr><th></th><td><b><font color=\"red\">Error:</font></b> ";
    print "Directory does not exist.";
    print "</td></tr>\n";
} elsif( ! ( testFileIsWritable( "$dataDir/testenv.test" ) ) ) {
    # directory is not writable
    print "<tr><th></th><td><b><font color=\"red\">Error:</font></b> ";
    print "This directory must be writable by the <b>$usr</b> user.";
    print "</td></tr>\n";
}

print "<tr><th align=\"right\">\$mailProgram:</th><td>$mailProgram</td></tr>\n";
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
print "This is the mail program TWiki uses to send mail.";
print "</td></tr>\n";
$val = $mailProgram;
$val =~ s/([^\s]*).*/$1/go;
if( ! ( -e $val ) ) {
    print "<tr><th></th><td><b><font color=\"red\">Warning:</font></b> ";
    print "Mail program <tt>$val</tt> not found. Check the path.";
    print "</td></tr>\n";
}

print "<tr><th align=\"right\">\$rcsDir:</th><td>$rcsDir</td></tr>\n";
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
print "This is the directory where RCS is located.";
print "</td></tr>\n";
if( ! ( -e "$rcsDir/ci$exeSuffix" ) ) {
    print "<tr><th></th><td><b><font color=\"red\">Warning:</font></b> ";
    print "RCS program <tt>$rcsDir/ci$exeSuffix</tt> not found. Check the path.";
    print "</td></tr>\n";
} else {
    my $rcsvernum = `$rcsDir/ci$exeSuffix -V`;
    $rcsvernum = (split(/\s+/, $rcsvernum))[2];
    
    print "<tr><th align=\"right\">RCS Version:</th><td>$rcsvernum";
    print "&nbsp;&nbsp;(Cygwin package <tt>rcs-$rcsver</tt>)" if defined($rcsver);
    print "</td></tr>\n";
    print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
    print "This is the version of RCS which will be used.";
    print "</td></tr>\n";
    
    if( $rcsvernum < $rcsverRequired ) {
	print "<tr><th></th><td><b><font color=\"red\">Warning:</font></b> ";
	print "RCS program is too old, upgrade to version $rcsverRequired or higher.";
	print "</td></tr>\n";
    }

}

# FIXME check that diff command is in path, required by ci

print "<tr><th align=\"right\">\$lsCmd:</th><td>$lsCmd</td></tr>\n";
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
print "This is the file list program TWiki uses to list topics.";
print "</td></tr>\n";
$val = $lsCmd . $exeSuffix;
$val =~ s/([^\s]*).*/$1/go;
if( ! ( -e $val ) ) {
    print "<tr><th></th><td><b><font color=\"red\">Warning:</font></b> ";
    print "List program <tt>$val</tt> not found. Check the path.";
    print "</td></tr>\n";
}

print "<tr><th align=\"right\">\$egrepCmd:</th><td>$egrepCmd</td></tr>\n";
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
print "This is a program TWiki uses for search.";
print "</td></tr>\n";
$val = $egrepCmd . $exeSuffix;
$val =~ s/([^\s]*).*/$1/go;
if( ! ( -e $val ) ) {
    print "<tr><th></th><td><b><font color=\"red\">Warning:</font></b> ";
    print "Search program <tt>$val</tt> not found. Check the path.";
    print "</td></tr>\n";
}

print "<tr><th align=\"right\">\$fgrepCmd:</th><td>$fgrepCmd</td></tr>\n";
print "<tr><th></th><td><b><font color=\"green\">Note:</font></b> ";
print "This is a program TWiki uses for search.";
print "</td></tr>\n";
$val = $fgrepCmd . $exeSuffix;
$val =~ s/([^\s]*).*/$1/go;
if( ! ( -e $val ) ) {
    print "<tr><th></th><td><b><font color=\"red\">Warning:</font></b> ";
    print "Search program <tt>$val</tt> not found. Check the path.";
    print "</td></tr>\n";
}

print "</table>\n";

print <<EOM;
</pre>
</body>
</html>
EOM
exit;

}

# =========================
sub testFileIsWritable
{
    my( $name ) = @_;
    my $txt1 = "test 1 2 3";
    deleteTestFile( $name );
    writeTestFile( $name, $txt1 );
    my $txt2 = readTestFile( $name );
    deleteTestFile( $name );
    my $identical = ( $txt2 eq $txt1 );
    return $identical;
}

# =========================
sub readTestFile
{
    my( $name ) = @_;
    my $data = "";
    undef $/; # set to read to EOF
    open( IN_FILE, "<$name" ) || return "";
    $data = <IN_FILE>;
    $/ = "\n";
    close( IN_FILE );
    return $data;
}

# =========================
sub writeTestFile
{
    my( $name, $text ) = @_;
    if( open( FILE, ">$name" ) ) {
        print FILE $text;
        close( FILE);
    }
}

# =========================
sub deleteTestFile
{
    my( $name ) = @_;
    if( -e $name ) {
        unlink $name;
    }
}

