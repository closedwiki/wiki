#!/usr/bin/perl -wT
#
# TWiki WikiClone (see wiki.pm for $wikiversion and other info)
#
# Copyright (C) 1999 Peter Thoeny, peter@thoeny.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details, published at 
# http://www.gnu.org/copyleft/gpl.html

use CGI::Carp qw(fatalsToBrowser);
use CGI;
use lib ( '.' );
use lib ( '../lib' );
use TWiki;

use strict;

&main();

sub changeSpecialChars
{
    my( $text ) = @_;
    
    $text =~ s/&/%_A_%/go;
    $text =~ s/\"/%_Q_%/go;
    $text =~ s/>/%_G_%/go;
    $text =~ s/</%_L_%/go;
    # PTh 10 Apr 2001: Fix for Codev.OperaBrowserDoublesEndOfLines
    $text =~ s/\r\r\n/%_N_%/go;
    # PTh 21 Jun 2000: Fix for Codev.KfmBrowserSupportForEditing
    $text =~ s/\r\n/%_N_%/go;
    $text =~ s/\n\r/%_N_%/go;
    $text =~ s/\r/%_N_%/go;
    $text =~ s/\n/%_N_%/go;
    
    return $text;
}


sub main
{
    my $query = new CGI;
    my $thePathInfo = $query->path_info(); 
    my $theRemoteUser = $query->remote_user();
    my $theTopic = $query->param( 'topic' );
    my $theUrl = $query->url;
    my( $topic, $webName, $dummy, $userName ) = 
       &TWiki::initialize( $thePathInfo, $theRemoteUser, $theTopic, $theUrl, $query );
    $dummy = "";  # to suppress warning

    my $tmpl = ""; 
    my $text = "";
    my $ptext = "";
    my $meta = "";
    my $formFields = "";
    my $wikiUserName = &TWiki::userToWikiName( $userName );

    if( ! &TWiki::Store::webExists( $webName ) ) {
        my $url = &TWiki::getOopsUrl( $webName, $topic, "oopsnoweb" );
        TWiki::redirect( $query, $url );
        return;
    }

    my( $mirrorSiteName, $mirrorViewURL ) = &TWiki::readOnlyMirrorWeb( $webName );
    if( $mirrorSiteName ) {
        my $url = &TWiki::getOopsUrl( $webName, $topic, "oopsmirror", $mirrorSiteName, $mirrorViewURL );
        TWiki::redirect( $query, $url );
        return;
    }

    # reset lock time, this is to prevent contention in case of a long edit session
    &TWiki::Store::lockTopic( $topic );

    my $skin = $query->param( "skin" ) || &TWiki::Prefs::getPreferencesValue( "SKIN" );

    # Is user looking to change the form used?  Sits oddly in preivew, but would be okay if this was
    # called postedit
    my $changeform = $query->param( 'submitChangeForm' ) || "";
    if( $changeform ) {
        my $tmpl = &TWiki::Store::readTemplate( "changeform", $skin );
        &TWiki::writeHeader( $query );
        $tmpl = &TWiki::handleCommonTags( $tmpl, $topic );
        $tmpl = &TWiki::getRenderedVersion( $tmpl );
        my $text = $query->param( 'text' );
        $text = changeSpecialChars( $text );
        $tmpl =~ s/%TEXT%/$text/go;

        my $listForms = TWiki::Prefs::getPreferencesValue( "WEBFORMS", "$webName" );
	my @forms = split( /,\s*/, $listForms );	    
	unshift @forms, "";
	my( $metat, $tmp ) = &TWiki::Store::readTopic( $webName, $topic );
	my $formName = $query->param( 'formtemplate' ) || "";
	if( ! $formName ) {
	    my %form = $metat->findOne( "FORM" );
	    $formName = $form{"name"};
	}
	    
	my $formList = "";
	foreach my $form ( @forms ) {
	   my $selected = ( $form eq $formName ) ? "checked" : "";
	   $formList .= "\n<br>" if( $formList );
	   my $show = $form ? $form : "&lt;none&gt;";
	   my $value = $form ? $form : "none";
	   $formList .= "<input type=\"radio\" name=\"formtemplate\" value=\"$value\" $selected>&nbsp;$show";
	}
        $tmpl =~ s/%FORMLIST%/$formList/go;
        
        my $parent = $query->param( 'parent' ) || "";
        $tmpl =~ s/%PARENT%/$parent/go;
    
        $tmpl =~ s|</*nop/*>||goi;
        
        print $tmpl;
        return;
    }

    # get view template, standard view or a view with a different skin
    $tmpl = &TWiki::Store::readTemplate( "preview", $skin );
    my $dontNotify = $query->param( "dontnotify" ) || "";
    $tmpl =~ s/%DONTNOTIFY%/$dontNotify/go;
    my $saveCmd = $query->param( "cmd" ) || "";
    if( $saveCmd ) {
        if( ! &TWiki::Access::userIsInGroup( $wikiUserName, $TWiki::superAdminGroup ) ) {
            # user has no permission to execute undocumented cmd=... parameter
            my $url = &TWiki::getOopsUrl( $webName, $topic, "oopsaccessgroup", "$TWiki::mainWebname.$TWiki::superAdminGroup" );
            TWiki::redirect( $query, $url );
            return;
        }
        $tmpl =~ s/\(preview\)/\(preview cmd=$saveCmd\)/go;
    }
    $tmpl =~ s/%CMD%/$saveCmd/go;
    
    if( $saveCmd ne "repRev" ) {
        my $dummy = "";
        ( $meta, $dummy ) = &TWiki::Store::readTopic( $webName, $topic );
        
	# parent setting
	my $theParent = $query->param( 'parent' ) || "";
	if( $theParent ) {
	    $tmpl =~ s/%TOPICPARENT%/$theParent/go;
	    $meta->put( "TOPICPARENT", ( "name" => $theParent ) );
	}
	$tmpl =~ s/%TOPICPARENT%/$theParent/;

        
	my $formTemplate = $query->param( "formtemplate" );
	if( $formTemplate ) {
	   # FIXME temporary because potentially shared fields
	   my @args = ( name => $formTemplate );
	   $meta->remove( "FORM" );
	   if( $formTemplate ne "none" ) {
	       $meta->put( "FORM", @args );
	   } else {
	       $meta->remove( "FORM" );
	   }
	   $tmpl =~ s/%FORMTEMPLATE%/$formTemplate/go;
	} else {
	   $tmpl =~ s/%FORMTEMPLATE%//go;
	}

        # get the edited text and combine text, form and attachments for preview
        &TWiki::Form::fieldVars2Meta( $webName, $query, $meta );
        $text = $query->param( "text" );
        if( ! $text ) {
            # empty topic not allowed
            my $url = &TWiki::getOopsUrl( $webName, $topic, "oopsempty" );
            print $query->redirect( $url );
            return;
        }
        $ptext = $text;
        
	if( $meta->count( "FORM" ) ) {
	   $formFields = &TWiki::Form::getFieldParams( $meta );
	}
    } else {
        $text = $query->param( "text" ); # text to save
        ( $meta, $ptext ) = &TWiki::Store::_extractMetaData( $webName, $topic, $text );
    }

    $ptext =~ s/ {3}/\t/go;
    $ptext = &TWiki::handleCommonTags( $ptext, $topic );
    $ptext = &TWiki::getRenderedVersion( $ptext );

    # do not allow click on link before save:
    $ptext =~ s@(href=".*?")@href="%SCRIPTURLPATH%/oops%SCRIPTSUFFIX%/%WEB%/%TOPIC%\?template=oopspreview"@goi;
    $ptext = &TWiki::handleCommonTags( $ptext, $topic );

    $tmpl = &TWiki::handleCommonTags( $tmpl, $topic );
    $tmpl = &TWiki::handleMetaTags( $webName, $topic, $tmpl, $meta );
    $tmpl = &TWiki::getRenderedVersion( $tmpl );
    $tmpl =~ s/%TEXT%/$ptext/go;
    
    $text = changeSpecialChars( $text );

    $tmpl =~ s/%HIDDENTEXT%/$text/go;
    $tmpl =~ s/%FORMFIELDS%/$formFields/go;
    $tmpl =~ s|</*nop/*>||goi;   # remove <nop> tags (PTh 06 Nov 2000)

    &TWiki::writeHeader( $query );
    print $tmpl;
}
