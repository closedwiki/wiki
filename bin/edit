#!/usr/bin/perl -wT
#
# TWiki WikiClone (see wiki.pm for $wikiversion and other info)
#
# Based on parts of Ward Cunninghams original Wiki and JosWiki.
# Copyright (C) 1998 Markus Peter - SPiN GmbH (warpi@spin.de)
# Some changes by Dave Harris (drh@bhresearch.co.uk) incorporated
# Copyright (C) 1999-2000 Peter Thoeny, peter@thoeny.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details, published at 
# http://www.gnu.org/copyleft/gpl.html

use CGI::Carp qw(fatalsToBrowser);
use CGI;
use lib ( '.' );
use lib ( '../lib' );
use TWiki;

use strict;

use vars qw( $query );

$query = new CGI;

&main();

sub main
{
    my $thePathInfo = $query->path_info(); 
    my $theRemoteUser = $query->remote_user();
    my $theTopic = $query->param( 'topic' ) || "";
    my $theUrl = $query->url;

    my( $topic, $webName, $dummy, $userName ) = 
	&TWiki::initialize( $thePathInfo, $theRemoteUser, $theTopic, $theUrl, $query );
    $dummy = "";  # to suppress warning

    my $saveCmd = $query->param( 'cmd' ) || "";
    my $breakLock = $query->param( 'breaklock' ) || "";
    my $onlyWikiName = $query->param( 'onlywikiname' ) || "";
    my $tmpl = "";
    my $text = "";
    my @meta = ();
    my $extra = "";
    my $wikiUserName = &TWiki::userToWikiName( $userName );

    if( ! &TWiki::Store::webExists( $webName ) ) {
        TWiki::writeHeader( $query );
	$tmpl= &TWiki::Store::readTemplate( "noweb" );
	$tmpl = &TWiki::handleCommonTags( $tmpl, $topic );
	print $tmpl;
        return;
    }

    my( $mirrorSiteName, $mirrorViewURL ) = &TWiki::readOnlyMirrorWeb( $webName );
    if( $mirrorSiteName ) {
        my $url = &TWiki::getOopsUrl( $webName, $topic, "oopsmirror", $mirrorSiteName, $mirrorViewURL );
        print $query->redirect( $url );
        return;
    }

    # prevent non-Wiki names?
    if( ( $onlyWikiName ) && ( ! &TWiki::isWikiName( $topic ) ) &&
        ( ! &TWiki::Store::topicExists( $webName, $topic ) ) ) {
        # do not allow non-wikinames, redirect to view topic
        TWiki::redirect( $query, &TWiki::getViewUrl( $webName, $topic ) );
	return;
    }

    # read topic and check access permission
    if( &TWiki::Store::topicExists( $webName, $topic ) ) {
	( $text, @meta ) = &TWiki::Store::readWebTopicNew( $webName, $topic );
    }
    if( ! &TWiki::Access::checkAccessPermission( "change", $wikiUserName, $text, $topic, $webName ) ) {
        # user has not permission to change the topic
        my $url = &TWiki::getOopsUrl( $webName, $topic, "oopsaccesschange" );
        TWiki::redirect( $query, $url );
        return;
    }
    if( ( $saveCmd ) &&
        ( ! &TWiki::Access::userIsInGroup( $wikiUserName, $TWiki::superAdminGroup ) ) ) {
        # user has no permission to execute undocumented cmd=... parameter
        my $url = &TWiki::getOopsUrl( $webName, $topic, "oopsaccessgroup", "$TWiki::mainWebname.$TWiki::superAdminGroup" );
        TWiki::redirect( $query, $url );
        return;
    }

    my( $lockUser, $lockTime ) = &TWiki::Store::topicIsLockedBy( $webName, $topic );
    if( ( ! $breakLock ) && ( $lockUser ) ) {
        # warn user that other person is editing this topic
        $lockUser = &TWiki::userToWikiName( $lockUser );
        use integer;
        $lockTime = ( $lockTime / 60 ) + 1; # convert to minutes
        my $editLock = $TWiki::editLockTime / 60;
        # PTh 20 Jun 2000: changed to getOopsUrl
        my $url = &TWiki::getOopsUrl( $webName, $topic, "oopslocked",
            $lockUser, $editLock, $lockTime );
        TWiki::redirect( $query, $url );
	return;
    }
    &TWiki::Store::lockTopic( $topic );

    TWiki::writeHeader( $query );

    # get edit template, standard or a different skin
    my $skin = $query->param( "skin" ) || &TWiki::Prefs::getPreferencesValue( "SKIN" );
    $tmpl = &TWiki::Store::readTemplate( "edit", $topic, $skin );
    if( ! &TWiki::Store::topicExists( $webName, $topic ) ) {
        my $templateTopic = $query->param( "templatetopic" ) || "";
        if( $templateTopic ) {
	    ( $text, @meta ) = &TWiki::Store::readWebTopicNew( $webName, $templateTopic );
        }
        if( ! $text ) {
            ( $text, @meta ) = &TWiki::Store::readTemplateTopic( "WebTopicEditTemplate" );
        }
        $extra = "(not exist)";

        my $foo = &TWiki::getLocaldate();
        $text =~ s/%DATE%/$foo/go;
        $text =~ s/%WIKIUSERNAME%/$wikiUserName/go;
    }
    
    # parent setting
    my $theParent = $query->param( 'parent' ) || "";
    if( $theParent ) {
        if( $theParent !~ /\./ ) {
           $theParent = "$webName.$theParent";
        }
        $tmpl =~ s/%TOPICPARENT%/$theParent/go;
    }
    $tmpl =~ s/%TOPICPARENT%/$theParent/;
    
    my $oldargsr;
    my $formTemplate = $query->param( "formtemplate" );
    if( $formTemplate ) {
       # FIXME temporary because potentially shared fields
       my @args = ( name => $formTemplate );
       @meta = &TWiki::Store::metaRemove( "FORM", @meta );
       if( $formTemplate ne "none" ) {
          @meta = &TWiki::Store::metaUpdate( "FORM", \@args, "name", @meta);
       } else {
          $formTemplate = "";
       }
       $tmpl =~ s/%FORMTEMPLATE%/$formTemplate/go;
       $text = $query->param( 'text' );
    } else {
       $tmpl =~ s/%FORMTEMPLATE%//go;
    }
    
    ( $oldargsr, @meta ) = &TWiki::Store::metaExtract( "FORM", "", "", @meta );
    my @oldargs = @$oldargsr;
    if( @oldargs ) {
       my %args = @oldargs;
       my $form = $args{"name"};
       my @fieldDefs = &TWiki::Form::getFormDef( $webName, $form );
       my $formText = &TWiki::Form::renderForEdit( $webName, $form, \@meta, @fieldDefs );
       my $formText = &TWiki::handleCommonTags( $formText, $topic, $webName );
       my $formText = &TWiki::getRenderedVersion( $formText, $webName ); # FIXME need this?
       $tmpl =~ s/%FORMFIELDS%/$formText/go;
    } else {
       $tmpl =~ s/%FORMFIELDS%//go;
    }
    
    if( $saveCmd ne "repRev" ) {
        # hide meta data
        $text =~ s/%META:.*?%\r?\n?//go;
    }
    
    my $possibleForms = TWiki::Prefs::getPreferencesValue( "WEBFORMS", "$webName" );
    if( $possibleForms ) {
        $tmpl =~ s/%CHANGEFORM%/<INPUT type="submit" name="submitChangeForm" value=" &nbsp; Change Form &nbsp; ">%SEP%/go;
        $tmpl =~ s/%SEP%/&TWiki::handleSep( $topic, $skin )/geo; # FIXME remove from here to handleCommonTags

    } else {
        $tmpl =~ s/%CHANGEFORM%//go;
    }

    $text =~ s/&/&amp\;/go;
    $text =~ s/</&lt\;/go;
    $text =~ s/>/&gt\;/go;
    $text =~ s/\t/   /go;

    if( $TWiki::doLogTopicEdit ) {
        # write log entry
        &TWiki::Store::writeLog( "edit", "$webName.$topic", $extra );
    }

    if( $saveCmd ) {
        $tmpl =~ s/\(edit\)/\(edit cmd=$saveCmd\)/go;
    }
    $tmpl =~ s/%CMD%/$saveCmd/go;
    $tmpl = &TWiki::handleCommonTags( $tmpl, $topic );
    my( $head, $tag, $body ) = split( /(<body)/i, $tmpl, 3 );
    $tmpl = join( "", $head,  &TWiki::getRenderedVersion( "$tag$body" ) );

    $tmpl =~ s/%TEXT%/$text/go;

    print $tmpl;
}
