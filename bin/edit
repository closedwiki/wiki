#!/usr/bin/perl -wT
#
# TWiki WikiClone (see wiki.pm for $wikiversion and other info)
#
# Based on parts of Ward Cunninghams original Wiki and JosWiki.
# Copyright (C) 1998 Markus Peter - SPiN GmbH (warpi@spin.de)
# Some changes by Dave Harris (drh@bhresearch.co.uk) incorporated
# Copyright (C) 1999-2000 Peter Thoeny, peter@thoeny.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details, published at 
# http://www.gnu.org/copyleft/gpl.html

use CGI::Carp qw(fatalsToBrowser);
use CGI;
use lib ( '.' );
use lib ( '../lib' );
use TWiki;

use strict;

use vars qw( $query );

$query = new CGI;

&main();

sub buildCategoryItem
{
    my ( $catitems, $ctext ) = @_;
    my $catname = "";
    my $scatname = "";
    my $catmodifier = "";
    my $catvalue = "";
    my @cmd = split( /\|/, $catitems );
    my $src = "";
    my $len = @cmd;
    if( $len < "2" ) {
        return ( $catname, $catmodifier, $catvalue )
    }
    
    my $i;
    my $itemsPerLine;

    # check for CategoryName=CategoryValue parameter
    my $cvalue = $query->param( $cmd[1] );
    if( $cvalue ) {
        $src = "<!---->$cvalue<!---->";
    } elsif( $ctext ) {
        foreach( split( /\n/, $ctext ) ) {
            if( /$cmd[1]/ ) {
                $src = $_;
                last;
            }
        }
    }

    if( $cmd[0] eq "select" ) {
        $catname = $cmd[1];
        $scatname = $catname;
        $scatname =~ s/[^a-zA-Z0-9]//g;
        my $size = $cmd[2];
        $catvalue = "<select name=\"$scatname\" size=\"$size\">";
        for( $i = 3; $i < $len; $i++ ) {
            my $value = $cmd[$i];
            my $svalue = $value;
            $svalue =~ s/[^a-zA-Z0-9]//g;
            my $flag = "";
            if( $src =~ /$value/ ) {
                $flag = "selected";
            }
            $catvalue = "$catvalue\n<option value=\"$svalue\" $flag>$value";
        }
        $catvalue = "$catvalue\n</select>";

    } elsif( $cmd[0] eq "checkbox" ) {
        $catname = $cmd[1];
        $scatname = $catname;
        $scatname =~ s/[^a-zA-Z0-9]//g;
        if( $cmd[2] eq "true" || $cmd[2] eq "1" ) {
            $i = $len - 4;
            $catmodifier = "$catmodifier\n<input type=\"button\" value=\" Set \" onClick=\"checkAll(this, 2, $i, true)\">&nbsp;";
            $catmodifier = "$catmodifier\n<input type=\"button\" value=\"Clear\" onClick=\"checkAll(this, 1, $i, false)\">&nbsp;";
        }
        $itemsPerLine = $cmd[3];
        $catvalue = "\n<table cellspacing=\"0\" cellpadding=\"0\"><tr>";
        for( $i = 4; $i < $len; $i++ ) {
            my $value = $cmd[$i];
            my $svalue = $value;
            $svalue =~ s/[^a-zA-Z0-9]//g;
            my $flag = "";
            if( $src =~ /$value[^a-zA-Z0-9\.]/ ) {
                $flag = "checked";
            }
            $catvalue = "$catvalue\n<td><input type=\"checkbox\" name=\"$scatname$svalue\" $flag>$value &nbsp;&nbsp;</td>";
            if( ( $itemsPerLine > 0 ) && (($i-4) % $itemsPerLine == $itemsPerLine - 1 ) ) {
                $catvalue = "$catvalue\n</tr><tr>";
            }
        }
        $catvalue = "$catvalue\n</tr></table>\n";

    } elsif( $cmd[0] eq "radio" ) {
        $catname = $cmd[1];
        $scatname = $catname;
        $scatname =~ s/[^a-zA-Z0-9]//g;
        $itemsPerLine = $cmd[2];
        $catvalue = "\n<table cellspacing=\"0\" cellpadding=\"0\"><tr>";
        for( $i = 3; $i < $len; $i++ ) {
            my $value = $cmd[$i];
            my $svalue = $value;
            $svalue =~ s/[^a-zA-Z0-9]//g;
            my $flag = "";
            if( $src =~ /$value[^a-zA-Z0-9\.]/ ) {
                $flag = "checked";
            } elsif( ( $scatname eq "UseCategory" ) && 
                     ( ( $i == 3 && $ctext ) || ( $i == 4 && ! $ctext ) ) ) {
                $flag = "checked";
            }
            $catvalue = "$catvalue\n<td><input type=\"radio\" name=\"$scatname\" value=\"$svalue\" $flag>$value &nbsp;&nbsp;</td>";
            if( ( $itemsPerLine > 0 ) && (($i-3) % $itemsPerLine == $itemsPerLine - 1 ) ) {
                $catvalue = "$catvalue\n</tr><tr>";
            }
        }
        $catvalue = "$catvalue\n</tr></table>\n";

    } elsif( $cmd[0] eq "text" ) {
        $catname = $cmd[1];
        $scatname = $catname;
        $scatname =~ s/[^a-zA-Z0-9]//g;
        $src =~ /<!---->(.*)<!---->/;
        if( $1 ) {
            $src = $1;
        } else {
            $src = "";
        }
        $catvalue = "<input type=\"text\" name=\"$scatname\" size=\"$cmd[2]\" value=\"$src\" >";
    }

    return ( $catname, $catmodifier, $catvalue )
}

sub main
{
    my $thePathInfo = $query->path_info(); 
    my $theRemoteUser = $query->remote_user();
    my $theTopic = $query->param( 'topic' ) || "";
    my $theUrl = $query->url;

    my( $topic, $webName, $dummy, $userName ) = 
	&TWiki::initialize( $thePathInfo, $theRemoteUser, $theTopic, $theUrl, $query );
    $dummy = "";  # to suppress warning

    my $saveCmd = $query->param( 'cmd' ) || "";
    my $breakLock = $query->param( 'breaklock' ) || "";
    my $onlyWikiName = $query->param( 'onlywikiname' ) || "";
    my $tmpl = "";
    my $tcat = "";
    my $icat = "";
    my $text = "";
    my @meta = ();
    my $before = "";
    my $atext = "";
    my $ctext = "";
    my $after = "";
    my $catname = "";
    my $catmod = "";
    my $catvalue = "";
    my $extra = "";
    my $wikiUserName = &TWiki::userToWikiName( $userName );

    if( ! &TWiki::Store::webExists( $webName ) ) {
        TWiki::writeHeader( $query );
	$tmpl= &TWiki::Store::readTemplate( "noweb" );
	$tmpl = &TWiki::handleCommonTags( $tmpl, $topic );
	print $tmpl;
        return;
    }

    my( $mirrorSiteName, $mirrorViewURL ) = &TWiki::readOnlyMirrorWeb( $webName );
    if( $mirrorSiteName ) {
        my $url = &TWiki::getOopsUrl( $webName, $topic, "oopsmirror", $mirrorSiteName, $mirrorViewURL );
        print $query->redirect( $url );
        return;
    }

    # prevent non-Wiki names?
    if( ( $onlyWikiName ) && ( ! &TWiki::isWikiName( $topic ) ) &&
        ( ! &TWiki::Store::topicExists( $webName, $topic ) ) ) {
        # do not allow non-wikinames, redirect to view topic
        TWiki::redirect( $query, &TWiki::getViewUrl( $webName, $topic ) );
	return;
    }

    # read topic and check access permission
    if( &TWiki::Store::topicExists( $webName, $topic ) ) {
	( $text, @meta ) = &TWiki::Store::readWebTopicNew( $webName, $topic );
    }
    if( ! &TWiki::Access::checkAccessPermission( "change", $wikiUserName, $text, $topic, $webName ) ) {
        # user has not permission to change the topic
        my $url = &TWiki::getOopsUrl( $webName, $topic, "oopsaccesschange" );
        TWiki::redirect( $query, $url );
        return;
    }
    if( ( $saveCmd ) &&
        ( ! &TWiki::Access::userIsInGroup( $wikiUserName, $TWiki::superAdminGroup ) ) ) {
        # user has no permission to execute undocumented cmd=... parameter
        my $url = &TWiki::getOopsUrl( $webName, $topic, "oopsaccessgroup", "$TWiki::mainWebname.$TWiki::superAdminGroup" );
        TWiki::redirect( $query, $url );
        return;
    }

    my( $lockUser, $lockTime ) = &TWiki::Store::topicIsLockedBy( $webName, $topic );
    if( ( ! $breakLock ) && ( $lockUser ) ) {
        # warn user that other person is editing this topic
        $lockUser = &TWiki::userToWikiName( $lockUser );
        use integer;
        $lockTime = ( $lockTime / 60 ) + 1; # convert to minutes
        my $editLock = $TWiki::editLockTime / 60;
        # PTh 20 Jun 2000: changed to getOopsUrl
        my $url = &TWiki::getOopsUrl( $webName, $topic, "oopslocked",
            $lockUser, $editLock, $lockTime );
        TWiki::redirect( $query, $url );
	return;
    }
    &TWiki::Store::lockTopic( $topic );

    TWiki::writeHeader( $query );

    # get edit template, standard or a different skin
    my $skin = $query->param( "skin" ) || &TWiki::Prefs::getPreferencesValue( "SKIN" );
    $tmpl = &TWiki::Store::readTemplate( "edit", $topic, $skin );
    $icat = &TWiki::Store::readTemplate( "twikicatitems" );
    if( ! &TWiki::Store::topicExists( $webName, $topic ) ) {
        my $templateTopic = $query->param( "templatetopic" ) || "";
        if( $templateTopic ) {
	    ( $text, @meta ) = &TWiki::Store::readWebTopicNew( $webName, $templateTopic );
        }
        if( ! $text ) {
            ( $text, @meta ) = &TWiki::Store::readTemplateTopic( "WebTopicEditTemplate" );
        }
        $extra = "(not exist)";

        my $foo = &TWiki::getLocaldate();
        $text =~ s/%DATE%/$foo/go;
        $text =~ s/%WIKIUSERNAME%/$wikiUserName/go;
    }
    
    # FIXME - note that this does not allow for multiple classifications
    my $oldargsr;
    ( $oldargsr, @meta ) = &TWiki::Store::metaExtract( "CLASSIFICATION", "", "", @meta );
    my @oldargs = @$oldargsr;
    if( @oldargs ) {
       my %args = @oldargs;
       my $classification = $args{"name"};
       my @categoriesInfo = &TWiki::Classification::getCategoriesInfo( $webName, $classification );
       my $catInfo = &TWiki::Classification::renderCategoryInfo( "edit", $classification, \@meta, @categoriesInfo );
       my $catInfo = &TWiki::handleCommonTags( $catInfo, $topic, $webName );
       my $catInfo = &TWiki::getRenderedVersion( $catInfo, $webName );
       $tmpl =~ s/%CATEGORIES%/$catInfo/go;
    } else {
       $tmpl =~ s/%CATEGORIES%//go;
    }

    if( $icat ) {
        # extract category section and build category form elements
        ( $before, $ctext, $after) = split( /<!--TWikiCat-->/, $text);
        # cut TWikiCat part
        $text = $before;
        if( ! $ctext ) { $ctext = ""; }
        if( $after ) {
            $text .= $after;
        }

        $tcat = &TWiki::Store::readTemplate( "twikicatedit" );
        if( ! $tcat ) {
            $tcat = &TWiki::Store::readTemplate( "twikicatview" );
        }
        my $line = "";
        my $ttext = "";
        my $temp = "";
        ( $before, $line, $after) = split( /%REPEAT%/, $tcat );
        foreach( split( /\n/, $icat ) ) {
            ( $catname, $catmod, $catvalue ) = buildCategoryItem( $_, $ctext );
            if( $catname ) {
                $catname = &TWiki::getRenderedVersion( $catname );
                $temp = $line;
                $temp =~ s/%CATNAME%/$catname/go;
                $temp =~ s/%CATMODIFIER%/$catmod/go;
                $temp =~ s/%CATVALUE%/$catvalue/go;
                $ttext = "$ttext$temp";
            }
        }
        $tcat = "$before$ttext$after";
    }

    if( $saveCmd ne "repRev" ) {
        # hide meta data
        $text =~ s/%META:.*?%\r?\n?//go;

        # cut attachment section if not in debug mode
        ( $before, $atext, $after) = split( /<!--TWikiAttachment-->/, $text );
        $text = $before;
        if( $after ) {
            $text .= $after;
        }
    }

    $text =~ s/&/&amp\;/go;
    $text =~ s/</&lt\;/go;
    $text =~ s/>/&gt\;/go;
    $text =~ s/\t/   /go;

    if( $TWiki::doLogTopicEdit ) {
        # write log entry
        &TWiki::Store::writeLog( "edit", "$webName.$topic", $extra );
    }

    if( $saveCmd ) {
        $tmpl =~ s/\(edit\)/\(edit cmd=$saveCmd\)/go;
    }
    $tmpl =~ s/%CMD%/$saveCmd/go;
    $tmpl = &TWiki::handleCommonTags( $tmpl, $topic );

    $tmpl =~ s/%TEXT%/$text/go;
    $tmpl =~ s/%TWIKICAT%/$tcat/go;

    print $tmpl;
}
