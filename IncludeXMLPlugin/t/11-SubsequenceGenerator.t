use strict;
use FindBin;
BEGIN {require "$FindBin::RealBin/testenv.cfg"}

use Test::More tests => 528;

use TWiki::Plugins::IncludeXMLPlugin::SubsequenceGenerator;

my @cases = (
    # Num Off Len       Expected       Expected(Rev)
    [[ 4,  0,   0  ], [            ], [            ]],
    [[ 4,  0,   1  ], [ 1          ], [ 4          ]],
    [[ 4,  0,   2  ], [ 1, 2       ], [ 4, 3       ]],
    [[ 4,  0,   3  ], [ 1, 2, 3    ], [ 4, 3, 2    ]],
    [[ 4,  0,   4  ], [ 1, 2, 3, 4 ], [ 4, 3, 2, 1 ]],
    [[ 4,  0,   5  ], [ 1, 2, 3, 4 ], [ 4, 3, 2, 1 ]],
    [[ 4,  0, undef], [ 1, 2, 3, 4 ], [ 4, 3, 2, 1 ]],
    [[ 4,  0,  -1  ], [ 1, 2, 3    ], [ 4, 3, 2    ]],
    [[ 4,  0,  -2  ], [ 1, 2       ], [ 4, 3       ]],
    [[ 4,  0,  -3  ], [ 1          ], [ 4          ]],
    [[ 4,  0,  -4  ], [            ], [            ]],
    [[ 4,  0,  -5  ], [            ], [            ]],

    [[ 4,  1,   0  ], [            ], [            ]],
    [[ 4,  1,   1  ], [    2       ], [    3       ]],
    [[ 4,  1,   2  ], [    2, 3    ], [    3, 2    ]],
    [[ 4,  1,   3  ], [    2, 3, 4 ], [    3, 2, 1 ]],
    [[ 4,  1,   4  ], [    2, 3, 4 ], [    3, 2, 1 ]],
    [[ 4,  1,   5  ], [    2, 3, 4 ], [    3, 2, 1 ]],
    [[ 4,  1, undef], [    2, 3, 4 ], [    3, 2, 1 ]],
    [[ 4,  1,  -1  ], [    2, 3    ], [    3, 2    ]],
    [[ 4,  1,  -2  ], [    2       ], [    3       ]],
    [[ 4,  1,  -3  ], [            ], [            ]],
    [[ 4,  1,  -4  ], [            ], [            ]],
    [[ 4,  1,  -5  ], [            ], [            ]],

    [[ 4,  2,   0  ], [            ], [            ]],
    [[ 4,  2,   1  ], [       3    ], [       2    ]],
    [[ 4,  2,   2  ], [       3, 4 ], [       2, 1 ]],
    [[ 4,  2,   3  ], [       3, 4 ], [       2, 1 ]],
    [[ 4,  2,   4  ], [       3, 4 ], [       2, 1 ]],
    [[ 4,  2,   5  ], [       3, 4 ], [       2, 1 ]],
    [[ 4,  2, undef], [       3, 4 ], [       2, 1 ]],
    [[ 4,  2,  -1  ], [       3    ], [       2    ]],
    [[ 4,  2,  -2  ], [            ], [            ]],
    [[ 4,  2,  -3  ], [            ], [            ]],
    [[ 4,  2,  -4  ], [            ], [            ]],
    [[ 4,  2,  -5  ], [            ], [            ]],

    [[ 4,  3,   0  ], [            ], [            ]],
    [[ 4,  3,   1  ], [          4 ], [          1 ]],
    [[ 4,  3,   2  ], [          4 ], [          1 ]],
    [[ 4,  3,   3  ], [          4 ], [          1 ]],
    [[ 4,  3,   4  ], [          4 ], [          1 ]],
    [[ 4,  3,   5  ], [          4 ], [          1 ]],
    [[ 4,  3, undef], [          4 ], [          1 ]],
    [[ 4,  3,  -1  ], [            ], [            ]],
    [[ 4,  3,  -2  ], [            ], [            ]],
    [[ 4,  3,  -3  ], [            ], [            ]],
    [[ 4,  3,  -4  ], [            ], [            ]],
    [[ 4,  3,  -5  ], [            ], [            ]],

    [[ 4,  4,   0  ], [            ], [            ]],
    [[ 4,  4,   1  ], [            ], [            ]],
    [[ 4,  4,   2  ], [            ], [            ]],
    [[ 4,  4,   3  ], [            ], [            ]],
    [[ 4,  4,   4  ], [            ], [            ]],
    [[ 4,  4,   5  ], [            ], [            ]],
    [[ 4,  4, undef], [            ], [            ]],
    [[ 4,  4,  -1  ], [            ], [            ]],
    [[ 4,  4,  -2  ], [            ], [            ]],
    [[ 4,  4,  -3  ], [            ], [            ]],
    [[ 4,  4,  -4  ], [            ], [            ]],
    [[ 4,  4,  -5  ], [            ], [            ]],

    [[ 4,  5,   0  ], [            ], [            ]],
    [[ 4,  5,   1  ], [            ], [            ]],
    [[ 4,  5,   2  ], [            ], [            ]],
    [[ 4,  5,   3  ], [            ], [            ]],
    [[ 4,  5,   4  ], [            ], [            ]],
    [[ 4,  5,   5  ], [            ], [            ]],
    [[ 4,  5, undef], [            ], [            ]],
    [[ 4,  5,  -1  ], [            ], [            ]],
    [[ 4,  5,  -2  ], [            ], [            ]],
    [[ 4,  5,  -3  ], [            ], [            ]],
    [[ 4,  5,  -4  ], [            ], [            ]],
    [[ 4,  5,  -5  ], [            ], [            ]],

    [[ 4, -1,   0  ], [            ], [            ]],
    [[ 4, -1,   1  ], [          4 ], [          1 ]],
    [[ 4, -1,   2  ], [          4 ], [          1 ]],
    [[ 4, -1,   3  ], [          4 ], [          1 ]],
    [[ 4, -1,   4  ], [          4 ], [          1 ]],
    [[ 4, -1,   5  ], [          4 ], [          1 ]],
    [[ 4, -1, undef], [          4 ], [          1 ]],
    [[ 4, -1,  -1  ], [            ], [            ]],
    [[ 4, -1,  -2  ], [            ], [            ]],
    [[ 4, -1,  -3  ], [            ], [            ]],
    [[ 4, -1,  -4  ], [            ], [            ]],
    [[ 4, -1,  -5  ], [            ], [            ]],

    [[ 4, -2,   0  ], [            ], [            ]],
    [[ 4, -2,   1  ], [       3    ], [       2    ]],
    [[ 4, -2,   2  ], [       3, 4 ], [       2, 1 ]],
    [[ 4, -2,   3  ], [       3, 4 ], [       2, 1 ]],
    [[ 4, -2,   4  ], [       3, 4 ], [       2, 1 ]],
    [[ 4, -2,   5  ], [       3, 4 ], [       2, 1 ]],
    [[ 4, -2, undef], [       3, 4 ], [       2, 1 ]],
    [[ 4, -2,  -1  ], [       3    ], [       2    ]],
    [[ 4, -2,  -2  ], [            ], [            ]],
    [[ 4, -2,  -3  ], [            ], [            ]],
    [[ 4, -2,  -4  ], [            ], [            ]],
    [[ 4, -2,  -5  ], [            ], [            ]],

    [[ 4, -3,   0  ], [            ], [            ]],
    [[ 4, -3,   1  ], [    2       ], [    3       ]],
    [[ 4, -3,   2  ], [    2, 3    ], [    3, 2    ]],
    [[ 4, -3,   3  ], [    2, 3, 4 ], [    3, 2, 1 ]],
    [[ 4, -3,   4  ], [    2, 3, 4 ], [    3, 2, 1 ]],
    [[ 4, -3,   5  ], [    2, 3, 4 ], [    3, 2, 1 ]],
    [[ 4, -3, undef], [    2, 3, 4 ], [    3, 2, 1 ]],
    [[ 4, -3,  -1  ], [    2, 3    ], [    3, 2    ]],
    [[ 4, -3,  -2  ], [    2       ], [    3       ]],
    [[ 4, -3,  -3  ], [            ], [            ]],
    [[ 4, -3,  -4  ], [            ], [            ]],
    [[ 4, -3,  -5  ], [            ], [            ]],

    [[ 4, -4,   0  ], [            ], [            ]],
    [[ 4, -4,   1  ], [ 1          ], [ 4          ]],
    [[ 4, -4,   2  ], [ 1, 2       ], [ 4, 3       ]],
    [[ 4, -4,   3  ], [ 1, 2, 3    ], [ 4, 3, 2    ]],
    [[ 4, -4,   4  ], [ 1, 2, 3, 4 ], [ 4, 3, 2, 1 ]],
    [[ 4, -4,   5  ], [ 1, 2, 3, 4 ], [ 4, 3, 2, 1 ]],
    [[ 4, -4, undef], [ 1, 2, 3, 4 ], [ 4, 3, 2, 1 ]],
    [[ 4, -4,  -1  ], [ 1, 2, 3    ], [ 4, 3, 2    ]],
    [[ 4, -4,  -2  ], [ 1, 2       ], [ 4, 3       ]],
    [[ 4, -4,  -3  ], [ 1          ], [ 4          ]],
    [[ 4, -4,  -4  ], [            ], [            ]],
    [[ 4, -4,  -5  ], [            ], [            ]],

    [[ 4, -5,   0  ], [            ], [            ]],
    [[ 4, -5,   1  ], [            ], [            ]],
    [[ 4, -5,   2  ], [ 1          ], [ 4          ]],
    [[ 4, -5,   3  ], [ 1, 2       ], [ 4, 3       ]],
    [[ 4, -5,   4  ], [ 1, 2, 3    ], [ 4, 3, 2    ]],
    [[ 4, -5,   5  ], [ 1, 2, 3, 4 ], [ 4, 3, 2, 1 ]],
    [[ 4, -5, undef], [ 1, 2, 3, 4 ], [ 4, 3, 2, 1 ]],
    [[ 4, -5,  -1  ], [ 1, 2, 3    ], [ 4, 3, 2    ]],
    [[ 4, -5,  -2  ], [ 1, 2       ], [ 4, 3       ]],
    [[ 4, -5,  -3  ], [ 1          ], [ 4          ]],
    [[ 4, -5,  -4  ], [            ], [            ]],
    [[ 4, -5,  -5  ], [            ], [            ]],
);

for my $reverse (0..1) {
    for my $case (@cases) {
        my ($params, @expected) = @$case;
        
        my ($num, $offset, $limit) = @$params;
        my $expected = $expected[$reverse];
        
        my $sg = TWiki::Plugins::IncludeXMLPlugin::SubsequenceGenerator->new($offset, $limit, $reverse);
        
        for my $i (1..$num) {
            $sg->push(sub {$i});
            $sg->more or last;
        }
        
        is_deeply($sg->result, $expected,
            "$num, ($offset, ".(defined $limit ? $limit : 'undef').", $reverse) -> ".
            "expected (".join(', ', @$expected).") but was (".join(', ', @{$sg->result}).")");
    }
    
    for my $case (@cases) {
        my ($params, @expected) = @$case;
        
        my ($num, $offset, $limit) = @$params;
        my $expected = $expected[$reverse];
        
        my $sg = TWiki::Plugins::IncludeXMLPlugin::SubsequenceGenerator->new($offset, $limit, $reverse);
        
        for my $i (1..$num) {
            $sg->set($i - 1, sub {$i});
        }
        
        is_deeply($sg->result, $expected,
            "$num, ($offset, ".(defined $limit ? $limit : 'undef').", $reverse) -> ".
            "expected (".join(', ', @$expected).") but was (".join(', ', @{$sg->result}).")");
    }
}
