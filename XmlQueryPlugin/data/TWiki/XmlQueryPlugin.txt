%META:TOPICINFO{author="PatrickDiamond" date="1100098539" format="1.0" version="1.35"}%
---++ <nop>XmlQuery TWiki Plugin

This Plugin allows TWiki topics to become XML data sources that can be queried and transformed via XSLT. XML data is extracted for each table, action, form and for any metadata. This XML data is created when a topic is saved and stored separately

Additionally TWiki XML attachments and URLs which export XML can be used as XML data sources.

---+++ <nop>%TOPIC% Settings
	* Short Description of the XmlQuery Plugin
		* Set SHORTDESCRIPTION = Apply XSLT queries to Topics, XML attachments & URL's

	* Directory where both XML versions of topics and query results are cached. This will need to be altered on a Windows machine e.g. c:/twiki_xml. Expect the size required by this to be around 1k multiplied  by the number of topics in your TWiki.
		* Set XMLDIR = /var/tmp/twiki_xml

	* The size limit on the results cache valid values are __number Kb|Mb|Gb__ . This is located under your XMLDIR
		* Set CACHESIZELIMIT = 100Mb

	* The time limit on the results cache valid values are  __now__, __never__, __number seconds|minutes|hours|days|weeks|months|years__ . This value can be overridden per query using the __cache__ and __cacheexpires__ attributes. The cache handles flushing of old data.
		* Set CACHEEXPIRES = never

	* Debug this plugin: (See output in =data/debug.txt=)
		* Set DEBUG = 0

---+++ Syntax Rules

---++++ XSLTSTART tag: defining a stylesheet

The basic format of an XSLT query is as follows

%<nop>XSLTSTART{topic="^StartsWith.*"}%

__some XSLT, see recipes for example XSLT__

%<nop>XSLTEND%

| *Parameter* | *Comment* | *Default* |
| *web* | This a regular expression which can match multiple webs e.g. ^Work | current web |
| *topic* | This is a regular expression that matchs topics within the web(s) matched by the __web__ parameter | current topic |
| *attach* | This is a regular expression which is matched against attachments on already matched topics. The contents of these attachments are included in the XML parsed by this XSLT | |
| *url* | specify a url from which to extract XML. If specified this overrides the above XML sources | |
| *debug* | Accepts one of __on__ , __off__ or __full__ <br> __on__ lists the input XML, the XSLT being parsed, the raw output and plugin and cache settings <br> __off__ switches off debug out <br> __full__ by default the XML output in the debug is limited to the first 10k. This option will output it all. Browser beware | __off__ |
| *quiet* | Accepts one of __on__ or __off__ . If __on__ will suppress warning and error messages | __off__ |
| *benchmark* | Accepts one of __on__ or __off__ . If __on__ will display internal benchmarks on the processing of the XSLT. Points to note, XML will have to be generated for pages referenced by the query but not saved since the Plugin was installed. This can take sometime and is a one off operation. Previews are not cached and this can be seen in  benchmarks.  | __off__ |
| *cache* | Switch __on__ or __off__ result caching | __on__ |
| *cacheexpires* | Override the plugin defaults on expiring the result cache. <br/> Valid values are <ul><li> __never__ the cache is never expired</li><li> __now__ the cache is expired now</li><li> __x [seconds,minutes,hours,days,weeks,months,years]__ specify exactly how long the cache should live| __never__ |
| __anything else__ | Every other parameter specified is passed directly to the query as an XSLT parameter e.g. a parameter  of admin="%WIKIWEBMASTER%" becomes a parameter $admin available within the XSLT. See [[XmlQueryPluginRecipe2][Recipe 2]] for a working example.  This is the best way of inserting or passing TWiki content to an XSLT query.| |

---++++ XML Format

The XML created from Topic text has the following format.

<verbatim>
<twiki>
	 <web name="Bla">
		  <topic name="BlaBla">
				<data topic="BlaBla" web="Bla" version="Bla">
					 <tables>
						  <table bla="bla">
								<row>
									 <field type="title">Bla</field>
									 <field type="data">Bla</field>
									 ....
								</row>
								....
							</table>
							....
					  </tables>
					  <actions>
							<action bla="bla" ..../>
							....
					  </actions>
					  <metadata>
							<? bla="bla"..../>
					  </metadata>
					  <xmldata>
							....	
					  </xmldata>
				 </data>
			<attachments>
				 <attachment name="bla">
					  ....
				 </attachment>
				 ....
			</attachments>
			</topic>
	  </web>
</twiki>
</verbatim>

Attachment data is only available if the attach parameter is used within the XSLTSTART tag. The table and action tag each contain the same arguments as specified within the TWiki text. This is a very useful way to pass metadata into the XML. The argument doesn't have to mean anything to the TWiki macro for it to be available. One use for this could be to create id and class parameters on these data sets.

Metadata is handled in a generic fashion where the metadata name/type becomes the tag name and every argument to the metadata becomes an argument to the XML element.

To view actual structure of any TWiki page reference it in a XSLTSTART tag and set debug = "on" or "full".

---++++ XMLSTART tag: defining XML content within a twiki page

If you need to specify XML data directly within a twiki page the XMLSTART/XMLEND tags can be used.
For example.

%<nop>XMLSTART{display="hidden"}%

__some XML__

%<nop>XMLEND%

| *Parameter*| *Comment* | *Default* |
|*display*| This controls the display of the XML text <ul><li> __hidden__ The XML text is hidden from display but still available to XSLT queries</li><li> __verbatim__ The XML is displayed exactly as entered</li><li> __include__ the XML is included along with the rest of the TWiki text in the display</li></ul> | __hidden__ |

---++ Recipes

As XSLT has has a very powerful but complex syntax here are several (hopefully) useful examples. If you do create a query that could be useful to others and would like to share then please do create a Recipe similar to  the ones below and send to %TWIKIWEB%.PatrickDiamond.

	* [[XmlQueryPluginRecipe1][Recipe 1]]: List all Attachments in the current Web
	* [[XmlQueryPluginRecipe2][Recipe 2]]: Attachments Queried using parameters
	* [[XmlQueryPluginRecipe3][Recipe 3]]: Table Contents Filtered
	* [[XmlQueryPluginRecipe4][Recipe 4]]: Table Contents Restructured
	* [[XmlQueryPluginRecipe5][Recipe 5]]: Creating a unique, sorted, list from the contents of a table column

---++ Notes on Performance

	* Caching is very good for performance epically when multiple topics are being referenced. Use the __benchmark__ parameter to help determine the benefits.
	* Accessing large XML files will consume memory on your server.
	* A local filesystem is a good place to point __XMLDIR__.
	* A small difference can be made by switching off access time updates on the file system where the TWiki files are and the file system that XMLDIR points to. On Unix this is controlled by the noatime mount flag. Use the __benchmark__ parameter to help determine the benefits. This will most likely only be of any significant on queries referencing hundreds of topics.

---++Useful Tutorials

To learn more about XML and XSLT try the following online resources

	* [[http://www.vbxml.com/xsl/default.asp][TopXML]] XSLT Tutorials and References
	* [[http://www.w3schools.com/xml/default.asp][XML]] XML Tutorials
	* [[http://www.w3schools.com/xsl/default.asp][XSLT]] XSLT Tutorials
	* [[http://www.w3schools.com/xpath/default.asp][XPath]] XPATH Tutorials
	* [[http://www.exslt.org/][EXSLT]] Extensions to XSLT available in <nop>LibXSLT

---++Details on the operation of this Plugin

	* When a topic is saved an XML version of the topic is also saved. This contains data held in TWiki tables, actions and metadata.

	* When a topic is referenced by a query the XML is checked to ensure it is up todate. If it is not up todate it is then regenerated.
	* When a query is parsed a top level XML document is created which includes the XML generated for each referenced topic
	* if caching is on a cache key is created from
		* this top level xml
		* the last modified times of each referenced topic
		* all the arguments passed to the XSLT (alter being evaluated for TWiki variables).
	* If caching is on the cache is checked for a result and if available it is returned. The following steps are only taken if no cached result is returned.
	* The topic/attachment/url XML is parsed by <nop>LibXML
	* The XSLT is parsed by <nop>LibXML
	* <nop>LibXSLT is then passed the parsed XML and parsed XSLT
	* If caching is on the result is cached.
	* The result is returned.

*Notes on Plugin operation*
	* The above caching schmea makes the use of TWiki variables and includes etc embedded into the XSLT a problem. If you do this it is best to switch off caching. To avoid having to do this pass the TWiki variables etc into the XSLT as parameters.
	* The caching schema unfortunality doesn't cache the most expensive part of the XSLT processing. The parsing of the XML. What this means is that when parameters to the XSLT are changed the XML has to be reparsed :( . The reason for this is that the serialize function on <nop>LibXML gives a result which is no quicker to load than the orginal XML text.

---++ Plugin Requirements

This Plugin requires some disk space to store it's cache and the XML versions of each topic. The cache size is controlled by the CACHESIZELIMIT plugin preference. The XML version of each topic takes around 1k on average.

The following Perl modules must be installed before this Plugin

	* XML::LibXML
	* XML::LibXSLT
	* XML::Simple
	* Text::ParseWords
	* Cache::Cache
	* String::CRC

---++ Plugin Installation Instructions

__Note:__ You do not need to install anything on the browser to use this plugin. The following instructions are for the administrator who installs the plugin on the server where TWiki is running.

	* Download the ZIP file from the Plugin web (see below)
	* Unzip ==%TOPIC%.zip== in your twiki installation directory. Content:
	  | *File:* | *Description:* |
	  | ==data/TWiki/%TOPIC%.txt== | Plugin topic |
	  | ==data/TWiki/%TOPIC%.txt,v== | Plugin topic repository |
	  | ==data/TWiki/%TOPIC%Recipe1== | Plugin Example |
	  | ==data/TWiki/%TOPIC%Recipe2== | Plugin Example |
	  | ==data/TWiki/%TOPIC%Recipe3== | Plugin Example |
	  | ==data/TWiki/%TOPIC%Recipe4== | Plugin Example |
	  | ==data/TWiki/%TOPIC%Recipe5== | Plugin Example |
	  | ==lib/TWiki/Plugins/%TOPIC%.pm== | Plugin Perl module |
	* Test if the installation was successful:
		* %TOPIC%Recipe5
	* if unsuccessful check the __data/warnings.txt__ file

---++ Plugin Info

|  Plugin Author: | TWiki:Main/PatrickDiamond |
|  Plugin Version: | 10 Nov 2004 (V1.002) |
|  Change History: | <!-- versions below in reverse order -->&nbsp; |
|  10 Nov 2004: | Initial version |
|  TWiki Dependency: | TWiki version 01 Feb 2003 or later |
|  CPAN Dependencies: | XML::LibXML, XML::LibXSLT, XML::Simple, Text::ParseWords, Cache::Cache, String::CRC |
|  Other Dependencies: | |
|  Perl Version: | 5.6 |
|  TWiki:Plugins/Benchmark: | %TWIKIWEB%.GoodStyle nn%, %TWIKIWEB%.FormattedSearch nn%, %TOPIC% nn% |
|  Plugin Home: | http://TWiki.org/cgi-bin/view/Plugins/%TOPIC% |
|  Feedback: | http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%Dev |

__Related Topics:__ %TWIKIWEB%.TWikiPreferences, %TWIKIWEB%.TWikiPlugins

