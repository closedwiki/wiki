#!/usr/bin/perl
use strict;
use integer;

use lib '../lib';

use TWiki::Net;
use TWiki::Plugins::FormQueryPlugin::WebDB;
use TWiki::Plugins::ActionTrackerPlugin::ActionNotify;

# Generate a list of notification mails

my $attrs = new FormQueryPlugin::Map( join( ' ', @ARGV ));

my $web = $attrs->get( "web" );
my $query = $attrs->get( "query" );
die "web= not found on command line" unless ( defined( $web ));
die "query= not found on command line" unless ( defined( $query ));

my ( $topic, $webName, $dummy, $userName, $dataDir) = 
    &TWiki::initialize( "/$web", "nobody" );
$dummy = "";  # to suppress warning

my $db = new FormQueryPlugin::WebDB( $webName );

my $now = localtime( time() );
$now =~ s/(\w+)\s+(\w+)\s+(\w+)\s+([^\s]+)\s+(\w+).*/$3-$2-$5/o;

$db->_load();

if ( !TWiki::Func::topicExists( $webName, $query )) {
  die "Query topic $webName.$query not found\n";
}

$query = TWiki::Func::readTopicText( $web, $query );
$query =~ s/%META:\w+{.*}%//mo;

$query = TWiki::Func::expandCommonVariables( $query, $topic, $webName );

my %mails;

foreach my $line ( split( /\n/, $query )) {
  if ( $line =~ s/([^:]+): (.*)$/$2/o ) {
    my $name = $1;
    $name =~ s/\s+//go;
    $name = ActionTrackerPlugin::Action::_canonicalName( $name );
    $mails{$name} .= "\n$line";
  }
}

sendMails( $webName, \%mails );

# Given a hash keyed on the name of the owner, compose and
# send an email containing all notifications
sub sendMails {
  my ( $webName, $mails ) = @_;

  my $mailAddress = {};

  # Use the ActionTracker to recover mail addresses
  foreach my $key ( keys( %$mails )) {
    my $name = ActionTrackerPlugin::Action::_canonicalName( $key );
    ActionTrackerPlugin::ActionNotify::_getMailAddress( $name, $mailAddress )
  }
  ActionTrackerPlugin::ActionNotify::_loadWebNotifies( $mailAddress );

  foreach my $name ( keys( %mails )) {
    my $email =
      ActionTrackerPlugin::ActionNotify::_getMailAddress( $name, $mailAddress );
    if ( !defined( $email )) {
      $email = $name;
      print STDERR "Mail address for $name not found\n";
    }
    sendMail( $webName, $name, $email, $mails );
  }
}

sub sendMail {
  my ( $webName, $name, $email, $mails ) = @_;

  my $message = $mails->{$name};
  my $mail = "From: $webName Web
To: $email
Subject: Outstanding tasks owned by $name
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary=\"=====================_64421935==_.ALT\"

";
  # First the HTML version
  $mail .= "--=====================_64421935==_.ALT
Content-Type: text/html; charset=\"us-ascii\"
Content-Transfer-Encoding: 7bit

<html><body>
This is an automated notification from the $webName Web<p />
Tasks that require your attention follow:<p />
$message
";
  # Now the plain-text; remove HTML tags
  $message =~ s/<[^>]*>//go;
  $mail .= "--=====================_64421935==_.ALT
Content-Type: text/plain; charset=\"us-ascii\"

This is an automated notification from the Requirements Web

Tasks that require your attention follow:

$message
--=====================_64421935==_.ALT--
";

  print $mail;
 # my $error = TWiki::Net::sendEmail( $mail );
 # if ( defined( $error )) {
 #   $error = "ActionTrackerPlugin:ActionNotify: $error";
 #   TWiki::Func::writeWarning( $error );
 # }
}

1;

