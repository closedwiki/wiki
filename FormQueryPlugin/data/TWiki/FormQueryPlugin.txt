---+!! FormQueryPlugin
<!--

   PLEASE DO NOT EDIT THIS TOPIC

   It is automatically generated from the subversion repository, and any changes
   you make will simply be overwritten the next time a release is generated.

   Instead, you could check your fix in, raise a bug in the Bugs web, or mail thge author.
-->

The FormQueryPlugin provides a query interface to the [[TWiki:Plugins/DBCacheContrib][TWiki::Contrib::DBCache]] module, giving a way to present query results as formatted tables.

*WARNING: TWiki-4 only. If you want to use this extension with an earlier version of TWiki, please see [[http://twiki.org/cgi-bin/view/Plugins/%TOPIC%?rev=1.20][here]]*
 
When using the plugin each topic is treated as a container for data fields. These fields can be the fields in the form attached to the topic, or can be parsed out of the topic. The database is managed by the [[TWiki:Plugins/DBCacheContrib][TWiki::Contrib::DBCache]] module, which must be installed for this plugin to work.

The tutorial section of this topic gives an introduction to formulating and formatting queries using this plugin, and is a good place to start.

%RED%
Note: Since the last release the following macros have been deprecated. Please get compatible support by loading the appropriate plugins:
| *Macro* | *Plugin* |
| =CALLMACRO= | TWiki:Plugins/MacrosPlugin |
| =SET= | TWiki:Plugins/MacrosPlugin |
| =ARITH= | Still supported in this release, but undocumented and should be replaced by %CALC% from SpreadSheetPlugin |
| =PROGRESS= | Deprecated in favour of GaugePlugin, though still supported because it doesn't require ay additional software to be installed (progress bars are pure HTML) |
| =WORKDAYS= | Still supported in this release though undocumented and deprecated on the basis that it should be in %CALC% at some point |
The =tasknotify= script has also been removed and is now shipped separately as the  TWiki:Plugins/NotifierAddon.

If the appropriate plugins and contributed code modules are loaded, this release should be fully compatible with previous releases of this plugin.
%ENDCOLOR%

%TOC%

---++ Features
	* Perform complex queries on the database
	* Extensive conditional formatting support
	* Automatic derivation of new topic names
	* Recognition and special formatting of key data strings

---+++ How the database gets built
The basic database is built using the DBCache. Refer to the documentation of that module for details of how it works.

As well as the form data loaded by the DBCache, the FormQueryPlugin adds the ability to extract embedded tables from topics.

Embedded tables that follow a specific format (defined using the Edit<nop>TablePlugin) are added to the topic as an array of rows, each of which contains a map keyed on the fields and mapping to the values in the table. This array is added to the topic as a field named the same as the table type. Where there are multiple tables of the same type in a topic, they are concatenated together into a single array. See [[#SettingsAnchor][Settings]] for more information about how to set up tables.

Topics can also be automatically related to each other by name. The plugin uses something called [[#TopicRelations][Topic Relations]] that allow the creation of two-way relationships between topics. Topic relations from parent topics to child topics are stored in the map of the parent topic using _the name of the relation_ as the field name and an array of references to the maps of child topics. Reverse relations from child to parent topics are also stored. See [[#SettingsAnchor][Settings]] for more information about how to set up topic relations.

Most of the rest of this documentation describes how to search this database and generate reports.

---
---++ Syntax Rules

---+++ Queries
---++++ <code>%FORMQUERY</code>
<code>%FORMQUERY</code> is the basic query mechanism. A <code>%FORMQUERY</code> works either on the whole database or, if the =query= parameter is given, the results of another query.
| *Parameter* | *Description* |
| =name= | Required, gives the name of the query result for use in <code>%SHOWQUERY</code> or another <code>%FORMQUERY</code> |
| =search= | Required, the search to perform (see [[#SearchOperators][Search operators]])|
| =query= | Optional, the name of the query to refine. If missing, defaults to the whole database |
| =extract= | Optional, the name of a field in each of the matched maps to flatten out into the returned list. |
| =moan= | Optional, if set to "off" will disable match failed message |

For example,
<pre>
%<nop>FORMQUERY{name=AQuery search="Owner='Main\.Fred'"}%
%<nop>FORMQUERY{name=BQuery query=AQuery search="Product='Boiled Egg'"}%
%<nop>FORMQUERY{name=CQuery query=BQuery search="" extract=Cooking<nop>Times}%
%<nop>FORMQUERY{name=DQuery query=CQuery search="Time < '4'"}%
</pre>
will search for all topics with a form field =Owner= set to =Main.Fred=, then filter that down to those topics that have =Product= set to =Boiled Egg=. Then it will extract and flatten out the embedded table =Cooking<nop>Times= in each matched topic. By "flatten out" we mean that future queries on =CQuery= must refer to the fields of the =Cooking<nop>Times= table, not the fields of the topic, i.e. =CQuery= will be an array of all the rows in the embedded table. Finally it will filter down to those rows that have the column =Time= &lt; 4 minutes.

Of course there is more than one way to skin a cat. A faster way to formulate the *same* query would be to say:
<pre>
%<nop>FORMQUERY{name=AQuery search="Owner='Main\.Fred' AND Product='Boiled Egg'" extract=Cooking<nop>Times}%
%<nop>FORMQUERY{name=DQuery query=AQuery search="Time < '4'"}%
</pre>

FORMQUERY is normally silent i.e. it generates no output unless there is an error, in which case an error description is inserted. This error message can be disabled using the =moan= parameter which makes =FORMQUERY= totally silent.

#SearchOperators
---+++++ Search operators
The available search operators are described in the documentation for the [[DBCacheContrib#SearchOperators][DB Cache Plugin]]. Search operators work on the fields of each map, be it a topic or an embedded table row.

Fields can be simple field names or can be more complex, and may even contain embedded searches. See [[#FieldRefs][Fields]] below for more information.

At present there is no way to constrain a search on the contents of a contained table, such as an embedded table or forward relation. However there are usually ways around this; for example, a <code>%FORMQUERY</code> that uses =extract= to flatten all the sub-tables, and then use of the parent relation to complete the search. For example:
<pre>
%<nop>FORMQUERY{name=AQuery search="Product='Boiled Egg'" extract=Cooking<nop>Times}%
%<nop>FORMQUERY{name=DQuery query=AQuery search="Time < '4' AND CookingTimes_of.Owner='Main\.Fred'"}%
</pre>

#FieldRefs
---+++++ Fields
Field references can be as simple as the name of a field, or may be more complex expressions that can even include embedded searches. The precise interpretation of the syntax depends on the type (Map or Array) of the object being referenced.
*Arrays*
	* _N_ where $n is a number will get the Nth entry in the array e.g. =attachments.9=
	* =[_N_]= where $n is a number will also get the Nth entry in the array e.g. =attachments[9]=
	* =X= will return the sum of the subfield =X= of each entry e.g. =TaskTable.Effort= will sum the =Effort= column in a table called =TaskTable=.
	* =[?<i>search</i>]= will perform the given search over the entries in the array. Always returns an array result, even when there is only one result. For example: <code>attachments[?name='pitcha.gif']</code> will return an array of all the entries that have their subfield =name= set to =Sam=.
	* =[*X]= will get a new array made from field X of each entry in this array. For example =attachments[*size]= will get an array of the sizes of each attachment.
*Maps*
	* =X= will get the subfield named =X=. For example, =Product= will get the formfield named =Product=.
	* =X.Y= will get the subfield =Y= of the subfield named =X=.
	* =[X] = will get the subfield named =X= (so X[Y] and X.Y are synonymous).
In all cases
	* =#= means "reset to root". So =#.Y= will return the subfield =Y= of the Map at the root of the query.

---+++ Reports
---++++ <code>%TABLEFORMAT</code>
<code>%TABLEFORMAT</code> provides a template for the display of values extracted from a query (like the old Fortran 'format' statement).
| *Parameter* | *Description* |
| =name= | Required, gives the name of the format for use in <code>%SHOWQUERY</code> or another <code>%FORMQUERY</code> |
| =format= | Required, gives the format of the body rows (or the format to subclass) |
| =header= | Optional, gives the format of the header row |
| =footer= | Optional, gives the string to use to terminate the table |
| =sort= | Optional, defines the sort order |
| =help= | Optional, if present then a helpful message will be output for undefined fields. So if you see a table entry that is blank and you don;t think it should be, add the =help= parameter and it should give some guidance. |
| =moan= | Optional, if set to "off" disables error output |

The =header=, =footer= and =format= parameters are very similar in application to the parameters used in the standard <code>%SEARCH</code> TWiki command. For the uninitiated, the header is used to define the first row of the results table:

<pre>
header="| <nop>*Topic*<nop> | <nop>*Summary*<nop> |"
header="&lt;table>&lt;tr>&lt;th>Topic&lt;/th>&lt;th>Summary&lt;/th>&lt;/tr> |"
footer="&lt;/table>"
</pre>

The =format= parameter is overloaded so it can also be used to refer to a table format previously defined using <code>%TABLEFORMAT</code>. This allows you to derive new formats (e.g. with different sort orders) For example,
<pre>
%<nop>TABLEFORMAT{ name=TBLFMT format="|$topic|" sort="Owner,Priority"}%
%<nop>TABLEFORMAT{ name=SUBFMT format=TBLFMT sort="Priority,Owner" }%
</pre>
Any of the =header=, =footer= or =sort= parameters in the referenced table format can be overridden by giving new values in the <code>%SHOWQUERY</code>.

The footer is usually only used for tables generated directly in HTML, in which case it is usually set to =footer="&lt;/table>"=

<pre>
footer="&lt;/table>"
</pre>

The format is used to define the rows in the body of the table:

=format="| $topic | $Summary |"=

Any fields in the form in the topic can be output by putting a $ sign before the name of the field. The two special fields =$topic= and =$form= are available for outputting the name of the topic and the type of the form. You can also refer to fields in related topics using the syntax <code>$field.field</code> where $field is the name of the relation and =field= is a field in the related topic; for example, <code>format="|$Child_of.topic|"</code>.

#SummingFields
It is also possible to expand the contents of tables embedded in the topic, in two ways:
	* using the syntax <code>$field[format=FORMAT]</code> where =$field= is the table type, which is named the same as the table topic, and =FORMAT= is the name of a format previously defined using <code>%TABLEFORMAT</code> and suitable for expanding the sub-table.
	* using the syntax <code>$field.subfield</code> where =subfield= is a numeric field in the contents of the embedded table (i.e. it contains a number). In this case the result will be the sum of all =subfield= values over all the rows in the table.

=sort= is used to define the sort order, and is a list of field names (without $'s) separated by commas. You can reverse the sort order for a column by prepending '-' to the field name. For example,

=sort="Owner,-Priority"=

The default sort method is string comparison. If the field data is numeric, then you can put a '#' in front of the field name to force the sort to be numeric. For example,

=sort="Owner,#Priority"=

or

=sort="Owner,-#Priority"=

<code>%TABLEFORMAT</code> is silent i.e. it produces no output on the page unless there is an error, in which case a descriptive error message is output. This message can be disabled using the =moan= parameter.

---+++ <code>%SHOWQUERY</code>
Used to show the results of a query, <code>%SHOWQUERY</code> accepts all the same parameters as <code>%TABLEFORMAT</code> (except =name=), and also the following parameters:
| *Parameter* | *Description* |
| =query= | Required, gives the name of the query to show |
| =row_from= | Optional, first row to display |
| =row_count= | Optional, number of rows to display |
For example,
<pre>
%<nop>SHOWQUERY{ query=AFORMQUERY format=ATBLFMT }%
</pre>
*Note:* If you render your results in TWiki table format and limit the rows displayed using row_count (e.g. first 10 from 99 rows), and also use TWiki.TablePlugin to allow sorting on the headers, then only the 10 displayed rows will be sorted by TablePlugin (and not the full 99 rows in the table).
---+++ Automatic topic naming
When using relations (as described above) it is useful to be able to automatically generate new topics using the relation to define the new topic name. This tag supports this. *This section can safely be ignored* unless you want to generate topics using names derived from relations.
---++++ <code>%TOPICCREATOR</code>
Used to create a new topic generator button using rules defined in [[#TopicRelations][topic relations]].
| *Parameter* | *Description* |
| =relation= | Required, name of the relation to use to derive the next topic name |
| =text= | Required, text of the button |
| =base= | Optional, name of base topic to apply relation to. Defaults to the current topic. |
| =form= | Optional, type of the form to include with the new topic. The wikiname of the topic containing the form definition. |
| =template= | Optional, the template topic to use |

The =base= is used as the RHS of the relation and a new topic name is derived. This is best shown by an example. If we have the relation:

=Dir%A_%B subdir Dir%A=

and the base is <code>Dir75</code>, and topics <code>Dir75_1</code> through <code>Dir75_54</code> already exist, the generator will generate topic <code>Dir75_55</code>. Note that even if there are gaps in the sequence e.g. <code>Dir75_53</code> doesn't exist, the generator will still create <code>Dir75_55</code> i.e. one more than the largest existing topic. The behaviour of the generator is undefined if the base does not match the RHS of the relation.

A special hard-coded relation, =copy=, is also provided by default that will create a new topic by incrementing a number at the end of the current topic name. For example, if the base is =Dir75= and we say
<pre>
%<nop>TOPICCREATOR{relation=copy}%
</pre>
then the next topic created will be =Dir76= (or whatever the next available topic is). If the current topic does not end in a number, it's behaviour is undefined.

The topic generator works by creating the topic name at the time the button is pressed i.e. you can dislay a topic containing a generator, wait a day, hit the button to create the new topic and the name of the new topic created will not conflict with other topics created by other people using the generator in the interim. To do this it uses the =autocreate= script installed in the twiki bin directory.
---+++ Other helpful macros
This section describes a number of other helpful macros provided by the plugin. *It can safely be ignored* unless you specifically want to use any of the functionality described here.

<!-- ---+++ <code>%WORKDAYS</code>
Used to calculate the number of working days (non-weekends) between two dates.
It takes two parameters, =start= and =end=, which must be dates in the format expected by =Time::ParseDate= (like the ActionTrackerPlugin) and returns a single number that is the number of days, excluding weekends, between two dates. Sorry, it only works for Saturday and Sunday so if your weekend is offset &plusmn; you may have to make some mental adjustments.
---+++ <code>%SUMFIELD</code>
Used to calculate the sum of a numeric field across all the matches in a query result.
| *Parameter* | *Description* |
| =query= | Required, name of the query to sum over |
| =field= | Required, name of the field to sum |
For example, let's say we have a form type called "VitalStatistics" that has a field "Age" in it. We can sum all the ages in all occurences of the form using:
<pre>
%<nop>FORMQUERY{name=vs search="form='VitalStatistics'"}%
Sum of ages = %<nop>SUMFIELD{query=vs field="Age"}%
</pre>
The result is a single number representing the sum of all the fields.

Note that values embedded in tables can be summed using the shorthand described [[#SummingFields][above]].
-->

---+++ <code>%PROGRESS</code> - %RED%DEPRECATED, use TWiki:Plugins/GaugePlugin instead%ENDCOLOR%
Used to display a three-part progress bar.
| *Parameter* | *Description* |
| =total= | Required, total length of the bar in arbitrary units |
| =actual= | Required, where we really are |
| =target= | Optional, where we should expect to be |

If =target= is omitted, then it creates a standard two-part progress bar. If all three parameters are used, then it creates bars like this:
<table border=2 width=100%>
 <tr>
  <td> If actual &lt; target, e.g. <code>%<nop>PROGRESS{total=10 target=5 actual=3}%</code></td>
  <td><table border=0 cellspacing=0 width=100%><tr><td width=30% bgcolor="#999999" align=center><font color="white">&nbsp;</font></td><td width=20% bgcolor="red" align=center><font color="white">2</font></td><td width=1% bgcolor="" align=center><font color="white">&nbsp;</font></td><td width=49% bgcolor="#CCCCCC" align=center><font color="black">&nbsp;</font></td></tr></table></td>
 </tr>
 <tr>
  <td> If actual &gt; target, e.g. <code>%<nop>PROGRESS{total=10 target=5 actual=7}%<code>  </td>
  <td><table border=0 cellspacing=0 width=100%><tr><td width=50% bgcolor="#999999" align=center><font color="white">&nbsp;</font></td><td width=1% bgcolor="black" align=center><font color="white">&nbsp;</font></td><td width=20% bgcolor="lime" align=center><font color="black">2</font></td><td width=29% bgcolor="#CCCCCC" align=center><font color="black">&nbsp;</font></td></tr></table></td>
 </tr>
</table>

---+++ Tutorial
See TWiki::Plugins/FormQueryPluginTutorial for a tutorial describing how to use the plugin in real-world applications.

---
#SettingsAnchor
---++ <nop>%TOPIC% Settings
One line description, shown in the TWiki.TextFormattingRules topic:
	* Set SHORTDESCRIPTION = Provides query capabilities across a database defined using forms and embedded tables in TWiki topics. 
Set to 1 to enable internal consistency checks and other debug states.
	* Set DEBUG = 0
Set to 0 if you do not want to use the =Storable= module even if it is installed. The plugin is _much_ faster if =Storable= is installed and enabled.
	* Set STORABLE = 1
The plugin can be enabled gloablly, or on a per-web basis. If it is to be enabled globally, then the setting
	* Set FQP_ENABLE = 1
must appear in this topic. Otherwise the plugin can be enabled on a per-web basis by putting the =FQP_ENABLE= setting into the WebPreferences topic for the web.
The remaining settings are defined on a per-web basis.
	* [[#FqTables][FQTABLES]]
	* [[#TopicRelations][FQRELATIONS]]
	* [[#HighLightMap][HIGHLIGHTMAP]]

#TopicRelations
---+++ Topic Relations
Topic relations are defined by setting the =FQRELATIONS= variable in the Web<nop>Preferences topic of the web to be processed. This defines a semicolon-separated list of rules for deriving relationships between topics using common portions of names. This is best illustrated by an example. Let's say we set =FQRELATIONS= to be:
<pre>
ReQ%Ax%B SubReq ReQ%A; TiT%An%B TestItem ReQ%A
</pre>
This describes two rules, the first of which says "Any topic named "ReQ&lt;something>x&lt;something>" is a Sub<nop>Req of another topic called "ReQ&lt;something>". Single upper case characters with a preceding percent sign are used to define the &lt;something>s. So, in this example, =ReQ1456= has the =SubReq= relation to =ReQ1456x7=. The reverse relation is also inserted, but appending =_of= to the relation name, so =ReQ1456x7= has the =SubReq_of= relation to =ReQ1456=.

Obviously a single topic may have many topics that have the same relation to it (i.e. they are _one-to-many_), so forward relations are stored as arrays in the maps that represent topics. Reverse relations are _many_to_one_ so they are stored as a simple field in the other topic. Relations are stored as pointers to the maps of the other topic so they can't be printed as if they were simple names. Instead you have to use them to refer to fields within the other topic. For example, in a <code>%SHOWQUERY</code> showing =ReQReQ1456x7= you can't refer simply to =$SubReq_of= to get =ReQ1456= (the name of the related topic); you have to use =$SubReq_of.topic= instead.

The default value of =FQRELATIONS= is <code>Re<nop>Q%Ax%B Sub<nop>Req Re<nop>Q%A; Ti<nop>T%An%B Test<nop>Item Re<nop>Q%A</code>

#FqTables
---+++ Tables
Tables to be read into the database must be formatted to use the Edit<nop>table plugin using the 'include=' feature that defined the format of the tables in another topic. Tables to be read are defined by setting the =FQTABLES= variable in the WebPreferences topic of the web. This is a list of the names of the topics that Edit<nop>TablePlugin uses to find it's table formats. Tables are read in as arrays of maps, with each map keyed on a field name generated by stripping all non-alphabetic characters from the column header. Note that the column header where the table is defined is used, not the column header in the Edit<nop>Table include= topic.

Two special map entries are added to each table row, =topic= and the equivalent of the reverse relation described above, represented by the name of the table with "_of" appended. So if you load a table type "CookingTimes", each row will have =topic= set to the name of the topic it was loaded from and =CookingTimes_of= set to the map of that topic. This allows you to refer to the fields of the topic that contains a table even after the table has been extracted.

The default value of =FQTABLES= is <code>Task<nop>Table</code>

#HighLightMap
---+++ Formatting field values
A feature of the plugin is that special words in the fields of <code>%SHOWQUERY</code> can be recognised and formatted to your preference.

For example, let's say you want to detect the words "No progress" in a table field and highlight it in bold red text. This is done through a special topic in the web that contains a set of mappings from perl regular expressions that match the words to be recognised and the special formatting. For example, the highlight map might contain the following:
<pre>
	* /(No progress)/ = &lt;font color=red>&lt;b>$1&lt;/b>&lt;/font>
</pre>
The =/(No progress)/= defines the perl RE to be matched, and the HTML on the right of the equals defines what to replace it with. The =$1= inserts whatever was matched by the RE. The RE must match the whole string in the table field, so the above map will *NOT* match "No progress with editing"; to match that, you'd have to write:
<pre>
	* /(No progress)(.*)/ = &lt;font color=red>&lt;b>$1&lt;/b>&lt;/font>$2
</pre>
Only the first RE in the map matched by the string is expanded. Note that spaces between the '=' and the first non-whitespace character of the RHS are ignored. If you want a space here use <code>&amp;nbsp;</code>

The default name of the map topic is =Highlight<nop>Map= though you can change this by setting the variable =FQHIGHLIGHTMAP= in Web<nop>Preferences to the name of the topic to use instead. For example
<pre>
	* <nop>Set FQHIGHLIGHTMAP = MyHighlightMap
</pre>

Just about any formatting can be included on the LHS of the map; for example, you may want to leverage the SmiliesPlugin and translate "pass" to a smiley face and "fail" to a frown.
<pre>
	* /pass/ = :<nop>-)
	* /fail/ = :<nop>-(
</pre>

---
---++ Plugin Installation Instructions
__Note:__ These instructions are for the TWiki maintainer. No changes to your browser are required.
	* Download the ZIP file from the Plugin web (see below). Contents:
	| *File:* | *Description:* |
%$MANIFEST%
	* Unzip ==%TOPIC%.zip== in your twiki installation directory.
	* Optionally, run ==%TOPIC%_installer== to automatically check and install other TWiki modules that this module depends on. You can also do this step manually.
	* Alternatively, manually make sure the dependencies listed in the table below are resolved.
	%$DEPENDENCIES%
	* (Dakar) Visit =configure= in your TWiki installation, and enable the plugin in the {Plugins} section.
	* The variable %<nop>FORMQUERYPLUGIN_ENABLE% must be set either globally or in the web where you want to use it.
		* Set ENABLE = 1
	* By default the plugin is enabled globally (on all webs). This may have an unwelcome performance impact, as the plugin may create a cache of topics in a web where it is not intended to be used. To enable the plugin for selected webs only, comment out the previous line (put a # in front of the word 'Set') and put the following line (without the #) into the WebPreferences topic of the web you want to enable it on:
		* #Set FORMQUERYPLUGIN_ENABLE = 1
	* __Note:__ If you are using it, TWiki:Plugins/MacrosPlugin must appear in the Plugins evaluation order *before* FormQueryPlugin. You can ensure this by putting Macros<nop>Plugin immediately after Default<nop>Plugin in the INSTALLEDPLUGINS list in %TWIKIWEB%.TWikiPreferences.

---
---++ Plugin Info

|  Plugin Author: | TWiki:Main/CrawfordCurrie |
|  Plugin Version: | %$VERSION% |
| Change History: | |
| 6277 | <a rel='nofollow' href='http://develop.twiki.org/~develop/cgi-bin/view/Bugs/Item196'>Item196</a>  updates to FQP, including minor core bugfixes found while testing, and extension to registerTagHandler to allow registration of handlers using alternate parameter syntax. Also enabled the table plugins by default. |
| 5517 | Corrected path to module |
| 5267 | doc changes, and efficiency improvements |
| 5223 | Documentation fixes, adding gifs. |
| 5048 | Cairo readiness |
| 5020 | Moved a lot of stuff out to DBCachePlugin |
| 4959 | Switched over to centralise fixtures for tests and changed to perl build methodology |
| 4917 | Patches from TimSlidel for autocreate, collapsing tables and mod_perl |
| 4899 | Maintenance updates |
| 4877 | Bugfixes and minor enhancements |
| 4858 | Bugfixes and optimised cache |
| 4855 | Range of fixes |
| 4850 | Missing tests and fixes to locking |
| 4849 | Initial checkin |
| 16 Jul 2004 | Added option to switch on/off "Undefined" messages for undefined field values |
| 16 Jul 2004 | Expanded fields no longer have spaces around them. This is more correct, but requires care in =format= definitions. |
| 16 Jul 2004 | Split into sub-components |
| 02 Apr 2004 | SimonHardyFrancis bugfixes incorporated. TimSlidel patches incoporated for mod_perl, autocreate, and collapsing same-type tables in a single topic |
|  05 Feb 2004 | Bugfix version |
|  11 Jul 2003 | Initial version |
|  Dependencies: | %$DEPENDENCIES% |
|  Perl Version: | 5.0 |
|  Plugin Home: | http://TWiki.org/cgi-bin/view/Plugins/%TOPIC% |
|  Feedback: | http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%Dev |
|  Demo URL: | http://www.owiki.org/FQP/ |

---+++ Copyright

This code is based on an original development of Motorola Inc. and is protected by the following copyrights:
	* Copyright &copy; 2002-2003 Motorola. All Rights Reserved.
	* Copyright &copy; 2004. Crawford Currie http://www.c-dot.co.uk

---+++ Extending or customising
Extension or customisation is welcome, as long as all extensions are described and code provided back to the author.

The module is shipped with a perl build file, which should be used for installation and testing. Testing is done using Test::Unit, and is invoked using the 'test' build target. Writing tests is a useful way of feeding back bugs as well. I can't encourage you enough to maintain and extend the tests!

---+++ License

As required for the publication of all extensions to TWiki, this
software is published under the terms of the GNU General Public
License.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details, published at
http://www.gnu.org/copyleft/gpl.html

-- TWiki:Main/CrawfordCurrie - %$DATE%
